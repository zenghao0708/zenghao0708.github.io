{"meta":{"title":"Zenghao0708的小站","subtitle":null,"description":"Life is struggle!","author":"zenghao0708","url":"https://coolzeng.com","root":"/"},"pages":[{"title":"categories","date":"2017-08-12T14:59:23.000Z","updated":"2022-04-05T13:46:10.927Z","comments":true,"path":"categories/index.html","permalink":"https://coolzeng.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2016-11-16T08:21:04.000Z","updated":"2022-04-05T13:46:10.929Z","comments":false,"path":"tags/index.html","permalink":"https://coolzeng.com/tags/index.html","excerpt":"","text":""},{"title":"简介","date":"2017-08-12T14:04:39.000Z","updated":"2022-04-05T13:46:10.925Z","comments":true,"path":"about/index.html","permalink":"https://coolzeng.com/about/index.html","excerpt":"","text":"[Who am I]目前就职于字节飞书团队，担任 iOS 团队 Leader，负责飞书文档iOS 端开发和团队管理工作。 老东家有： Misfit - 来自硅谷的智能硬件创业公司，于2015年被 Fossil Group 以2.6亿美金收购。 VTech - 香港最大的电子儿童玩具和电话设备制造商。 主要作品有： Misfit Home App - Misfit 智能灯泡 BOLT iOS App Misfit App - Misfit 智能手环 iOS App Learning Lodge - 儿童学习系统客户端(C&#x2F;S 架构，支持 PC 和 MAC 双平台) 目前飞书深圳团队招聘中，感兴趣的童鞋可以发送简历到[&#122;&#x65;&#x6e;&#x67;&#104;&#x61;&#x6f;&#x2e;&#104;&#x6f;&#119;&#x69;&#x65;&#x40;&#98;&#x79;&#116;&#101;&#x64;&#x61;&#110;&#99;&#101;&#46;&#x63;&#x6f;&#x6d;]或者加微信[tel: 15625261320] iOS 职位：https://job.toutiao.com/s/Nx12FCwAndroid 职位：https://job.toutiao.com/s/Nx1MJAA前端职位：https://job.toutiao.com/s/N9ofyju后端职位：https://job.toutiao.com/s/Nx1DXTR"}],"posts":[{"title":"ChatGPT & LLM 的那些事（一）：新手上路","slug":"ChatGPT-LLM-的那些事（一）：新手上路","date":"2024-01-13T02:16:28.000Z","updated":"2024-01-14T13:16:29.408Z","comments":true,"path":"posts/chatpgt-introduce/","permalink":"https://coolzeng.com/posts/chatpgt-introduce/","excerpt":"开场白在当今的技术世界中，了解人工智能的最新进展对于一名移动端开发工程师至关重要。OpenAI的ChatGPT是这一领域的最新成果，它不仅代表了大模型时代的前沿，而且还体现了AI技术在日常生活中应用的无限可能性，本文会给大家介绍一些chatGPT 相关的基本概念、Prompt 技巧、GPT 4的能力对比和一些学习资料，希望大家能够在大模型的时代继续遨游。","text":"开场白在当今的技术世界中，了解人工智能的最新进展对于一名移动端开发工程师至关重要。OpenAI的ChatGPT是这一领域的最新成果，它不仅代表了大模型时代的前沿，而且还体现了AI技术在日常生活中应用的无限可能性，本文会给大家介绍一些chatGPT 相关的基本概念、Prompt 技巧、GPT 4的能力对比和一些学习资料，希望大家能够在大模型的时代继续遨游。 最快到达十亿用户数的应用 – ChatGPT 之前是 Tiktok 用了 9 个月 OpenAI和ChatGPT的发展历程OpenAI的愿景与成立OpenAI成立于2015年，其愿景是推动人工智能技术的友好发展，以使全人类受益。它最初是作为非盈利组织成立的，但后来转型为“有限盈利”公司，旨在平衡盈利与研究目标之间的关系。 GPT系列的演进 GPT-1: OpenAI首个显著的成果是GPT-1，它标志着利用大规模数据集进行深度学习的开始。这个模型虽小，但已显示出巨大潜力。 GPT-2: 随后，GPT-2的发布展示了在文本生成方面的显著进步，其更大的模型和更复杂的训练数据使其成为当时最强大的语言模型之一。 GPT-3: GPT-3的发布是一个历史性时刻，其1750亿参数量使其成为当时世界上最大的语言模型。它的出现不仅是技术上的飞跃，也为AI的未来应用开辟了新的道路。 ChatGPT: 结合了GPT-3的能力和进一步的优化，ChatGPT专注于生成更自然、连贯的对话式文本。它的出现标志着AI在自然语言处理领域的一个重要里程碑。 GPT-4: 最新一代的GPT-4在2023年推出，它不仅在模型大小上有所增长，而且在理解复杂文本、多模态能力（处理文本和图像）以及更精准的信息处理方面都显示了显著进步。GPT-4的推出进一步拓宽了AI在各种复杂任务中的应用前景，标志着AI技术向更高层次的演进。 关键技术要点一些基础术语Prompt（提示） 含义: Prompt是指向AI模型提供的输入文本，它起到引导模型生成特定回答或内容的作用。 示例: 在ChatGPT中，输入“写一篇关于人工智能未来的文章”是一个prompt。 原理: Prompt工作机制基于模型的预训练知识。它解读输入文本，结合学习到的语言模式和知识，生成相关回答。 拓展一下: 最初的AI模型依赖于特定的命令或关键词触发。随着NLP技术的进步，现代模型如GPT系列能理解更自然的语言和复杂的prompt。 用好Prompt可以让AGI 更好的帮助我们解决问题，值得花点时间深入研究下。 LLM（Large Language Models，大型语言模型） 含义: LLM指的是在大量文本数据上训练的模型，能够处理、理解和生成人类语言。 示例: GPT-3和GPT-4是典型的LLM。 原理: LLM通过学习大规模文本数据集，掌握语言的深层结构和复杂性。这使得它们能够生成连贯、相关且多样的文****本。 拓展一下: LLM的发展始于较小的模型，如GPT-1，随着时间的推移，模型变得越来越大，学习能力也不断增强，直至能处理极其复杂的语言任务。 LLM 是一个新事物，但也是站在已有的技术上面进行创新。而且很有可能是超出创始人预期的「上帝的礼物」。 G, P, T是什么？（Generate, Predict, and Transform，生成、预测、转换） 含义: 这些术语描述了大型语言模型的三个基本功能：生成（Generate）文本，预测（Predict）下一个词，转换（Transform）输入数据。 示例: 在文本生成任务中，模型生成（Generate）连续的文本，预测（Predict）基于上下文的下一个最可能的词，转换（Transform）用户输入为有意义的输出。 原理: 这些功能基于Transformer架构，该架构能够有效处理序列数据，并在不同的上下文中生成、预测和转换文本。 拓展一下: 这些概念随着深度学习和NLP技术的发展而进化，尤其是随着Transformer模型的引入和完善。 GPT是一个重要的里程碑，有更好的交互形式、从而可以让大众使用进而快速传播。以此来看，鼠标、触摸屏是PC和互联网时代典型的交互形态。 预训练（Pre-training）和Fine-Tuning 含义: 预训练是指在大规模数据集上进行的初步模型训练，而Fine-Tuning是针对特定任务的二次训练。 示例: GPT-3首先在大量文本上进行预训练，然后可以通过Fine-Tuning来执行特定的任务，比如法律咨询或医学诊断。 原理: 预训练使模型学会语言的基本结构和模式，Fine-Tuning则调整模型以更好地适应特定应用场景的需求。 拓展一下: 预训练和Fine-Tuning的概念随着深度学习的发展而出现，尤其是在大型模型如GPT系列的研究和开发过程中变得至关重要。 预训练让LLM有了更强大的能力，Fine-Tuning让LLM更好用。 Token（令牌） 含义: 在NLP中，Token是文本分割的基本单位，通常是词或子词片段。 示例: 在处理句子“Hello, world!”时，它可以被分割为Tokens：“Hello”, “,”, “world”, “!”。 原理: Token化是文本处理的基本步骤，使得模型能够以更细粒度理解和生成文本。 拓展一下: 随着NLP技术的进步，Token化方法也在不断优化，以更好地适应不同语言和文本的复杂性。 GPT-3拥有1400万字符串组成的词汇表，主要有下面三个局限性：区分大小写；数字分块不一致；有时候会附带空格 在https://platform.openai.com/tokenizer 中可以看到 “Hello, World“和「你好，世界」的 token 数量。各种 LLM 的交互上下文限制、API Cost都是token 来计数的。 Hello, World 你好，世界 编写高效Prompt的规则推荐两个学习源： 吴恩达的 Prompt Engingerring 教程：https://github.com/GitHubDaily/ChatGPT-Prompt-Engineering-for-Developers-in-Chinese Learning Prompt 课程 By Jimmy Wong： https://learningprompt.wiki/zh-Hans/ 大型语言模型如GPT系列在生成回答时依赖于输入的质量和准确性。清晰和具体的prompt可以提高模型生成文本的相关性和质量。 明确性: 提供明确、具体的指令或问题。明确的prompt帮助模型更准确地理解预期的输出。 详细性: 包含足够的背景信息和细节。这有助于模型生成更相关和准确的回答。 上下文相关: 保持prompt与所需任务或问题的相关性。相关的上下文信息可以指导模型生成更合适的内容。 避免歧义: 尽量使用无歧义的语言，避免引起模型的误解。 适当的长度: 不宜过长或过短。过长可能导致模型混淆，过短可能导致信息不足。 Demosemoji 工厂要求：GPT Plus账号 + DELL·E3 Prompt： 12345678910给你几个表情关键字：“开心”：代表现在很高兴、开心、愉悦、心情舒畅“愤怒”：代表现在有点懊恼，有一种想要找个地方发泄不满情绪。我会给你一段文字描述，你给我匹配相关的表情关键字，然后画出emoji表情。下面是示例：文字描述「我今天中奖了，想要大吃一顿满足下」， 表情关键字：开心 效果如下： iOS 技术专家要求：chatGPT Prompt: 123你作为一名经验丰富的iOS开发者，帮我解决一些iOS和Swift相关的技术问题。希望给出相关知识点、实践案例，最好搭配上相关代码。我作为一名iOS开发新手，经常会遇到循环引用导致的内存泄露问题，有什么好的建议或者最佳实践呢？ 效果如下： 让GPT 来帮我们写Prompt（比如写一个技术调研文档😊）要求：chatGPT(gpt4 效果更佳) Prompt： 123456789101112131415161718192021222324252627282930313233Web search results:[1] &quot;Oops, there was an error. Please try again.If it persists, please email &lt;ops@duckduckgo.com&gt;&quot;URL: &lt;https://lite.duckduckgo.com/50x.html?e=3&gt;Current date: 2023/4/9Instructions: Using the provided web search results, write a comprehensive reply to the given query. Make sure to cite results using [[number](URL)] notation after the reference. If the provided search results refer to multiple subjects with the same name, write separate answers for each subject.Query: I want you to become my Expert Prompt Creator. Your goal is to help me craft the best possible prompt for my needs. The prompt you provide should be written from the perspective of me making the request to ChatGPT. Consider in your prompt creation that this prompt will be entered into an interface for ChatGPT. The process is as follows: 1. You will generate the following sections: Prompt:我需要写一个技术调研文档，这个文档是关于“移动端类似Notion产品的技术方案设计”，现在有三个思路：Native实现、Webview实现、类似RN/Weex的混合开发。技术方案需要考虑到如下几个方面：竞品是如何实现的？三种实现方式的优缺点是什么？采用不同方案短期的成本和长期的收益什么？Critique:需要有可以量化的指标（比如开发人天数），有足够的说服力（写清楚优缺点）。Questions:&#123;ask any questions pertaining to what additional information is needed from me to improve the prompt(max of 3). If the prompt needs more clarification or details in certain areas, ask questions to get more information to include in the prompt&#125; 2. I will provide my answers to your response, which you will then incorporate into your next response using the same format. We will continue this iterative process with me providing additional information to you and updating the prompt until the prompt is perfected.Remember, the prompt we are creating should be written from the perspective of me making a request to ChatGPT. Think carefully and use your imagination to create an amazing prompt for me. Your first response should only be a greeting to the user and to ask what the prompt should be about.Reply in 中文 效果： 目测chatGPT的效果比GPT 4好一些，能够比较完整的输出整个文档内容 chatGPT 版本 [完整对话：]https://shareg.pt/sGNglFQ GPT4 版本 Mr.-Ranedeer-AI-Tutor一个非常强大的课程生成器，支持中文、难度选择。 github地址：https://github.com/JushBJJ/Mr.-Ranedeer-AI-Tutor 要求：GPT Plus账号 中文指南：https://zhuanlan.zhihu.com/p/642238713 效果: My GPTs一个字：牛；两个字：牛逼； 三个字：很牛逼 不用任何编程能力，使用自然语言来完成各种任务，写网站、实现视频下载能力···· emoji工厂- My GPT 版本继续使用上面的「emoji 工厂」来创建自己 GPT 应用。下面是在GPT Store中配置的截图，可以看到整个创建过程非常顺畅，直接通过对话来进行配置。 B站视频下载器 - My GPT 版本全程使用中文来定义你的需求，GPT还会帮你生成Logo。 GPTs 不能直接下载视频，但是可以推荐一些相关的工具 [体验地址【需要GPT Plus】：]https://chat.openai.com/g/g-ozticvPaK-bzhan-shen-qi 如何开通 Plus 账号chatGPT Plus 账号、OpenAI API 账号的关系ChatGPT 是基于 OpenAI 的 GPT-4 模型开发的一款聊天式人工智能。它可以理解和生成自然语言，与用户进行多轮对话。ChatGPT 旨在为用户提供智能、有趣的对话体验，可用于回答问题、进行讨论等。它仍然存在一些局限性，如模型输出可能不准确或不可靠，无法实时更新知识库，以及容易产生偏见。 ChatGPT Plus 是针对 ChatGPT 的一项增值服务，通过订阅此服务，用户可以获得更多功能和优先支持。这个服务主要面向那些希望在使用 ChatGPT 时获得更高质量、更个性化体验的用户。ChatGPT Plus 更适合企业级应用、专业人士和教育领域等场景。 OpenAI API 是一种开放的应用程序编程接口，通过这个接口，开发者可以将 OpenAI 开发的人工智能技术应用到各种软件中。通过调用这个 API，开发者可以实现对话生成、摘要、翻译等自然语言处理任务。OpenAI API 被广泛应用于聊天机器人、内容生成、文本摘要和语言翻译等场景。 轻度使用 ChatGPT 免费版足够。 ChatGPT Plus 适合不熟悉代码，不喜欢折腾，对稳定性有强需求的用户。ChatGPT-4 更新后，性价比高了很多，推荐。 喜欢折腾的朋友，ChatGPT plus 也满足不了你，直接上 OpenAI API 吧。 分享两个小工具： [虚拟信用卡：]https://2chuhai.com/recommend/openai-chatgpt-pay/ ，实测很方便、支持很多美区应用；开通信用卡送3个虚拟手机号 [科学上网：]https://s.stotik.com/dashboard/invite, 已经稳定使用3 年、支持 YouTube 4k 视频； 推荐半年或者一年套餐 找一个靠谱的梯子 推荐使用stotik，专业客服解决问题，稳定运行多年、多平台适配，价格合适 开通虚拟信用卡 推荐使用WildCard(推荐码链接) 来开通美国信用卡，然后绑定到 chatGPT 和 OpenAI 后台支付渠道。 收费：两年开卡费用大概100 RMB，充值手续费3.5%。 遇到问题有客服帮助解决，本人亲测能够一次性绑定好信用卡～ 大模型时代的移动端开发者应该做什么？正如某个大佬所说「chatGPT 就是移动时代的 iPhone4」，他们都有的特点：产品本身足够优秀、充满想象力和魔力、开启下一个十年时代。作为经历了互联网和移动互联网时代的十年行业老兵，下面是我的想法： 体验行业里面最好的产品（强烈安利 GPT plus 账号，能够体验 GPT 4 和各种丰富的插件）,学习并使用 Prompt 的技巧和经验，提升生产力或者实现自己的创意。 解决一个你自己遇到的问题，亲自跑 OpenAI 的 API，了解一些基本的概念。 把『小宇宙』上面的播客下周到本地，然后上传到飞书妙记，然后使用 MyAI 总结文档内容 Be Patient and Keep Going（持续跟踪3 ~5个行牛大牛，学习他们的技术文章、分享和观点，沉淀自己的技术能力、发挥想象力） 写会议纪要、建日程、汇总群聊信息、建任务、润色文案、写文档等等痛点问题，用之前的技术，很难解决。现在，大模型技术可以轻而易举地搞定这些事。钉子早就有，现在，合适的锤子终于来了。 推荐两个公众号 张无常：真名张海庚，字节跳动产品经理。 LLM系列 Hey! 这有一座重庆大厦 如何成为初代 AGI 产品经理？ 王建硕：百姓网创始人，知名 Blog 主。很有意思的一个技术人，可以帮助打开思路。 ChatGPT 开创的时代： 学习资料 AIGC交流群工具沉淀 by 乔向阳 : ⭐️⭐️⭐️⭐️⭐️，很全面的工具、X 账号、产品合集，找到你感兴趣的Topic 深入体验、交流，感觉吃透这里面的内容，遇到 AGI 的话题应该能做到「侃侃而谈」 如何成为初代 AGI 产品经理？ ： ⭐️⭐️⭐️⭐️，海庚从产品经理角度来解读 LLM 时代的现状和机会，产品经理是最接近用户的群体，多看看产品经理的思路有助于自己更好的解决问题。 GPT &#x2F; GPT-2 &#x2F; GPT-3 &#x2F; InstructGPT 进化之路 一个产品经理的大模型观察、反思与预测 – 张无常 💳虚拟信用卡推荐Wildcard升级🤖OpenAI&#x2F;ChatGPT Plus付款教程,非DePay&amp;Dupay💥⭐ 爱出海导航💖","categories":[{"name":"AI","slug":"AI","permalink":"https://coolzeng.com/categories/AI/"}],"tags":[{"name":"LLM, GPT","slug":"LLM-GPT","permalink":"https://coolzeng.com/tags/LLM-GPT/"}]},{"title":"关于HTTP/3 的那些事","slug":"关于HTTP-3-的那些事","date":"2022-08-06T03:02:00.000Z","updated":"2022-08-07T12:36:36.859Z","comments":true,"path":"posts/http3-overview/","permalink":"https://coolzeng.com/posts/http3-overview/","excerpt":"前言之前的文章已经给大家介绍过 HTTP&#x2F;2，今天我们来聊聊 HTTP&#x2F;3。本文主要从如下几个角度来讲讲 HTTP&#x2F;3的那些事： HTTP&#x2F;3的由来 HTTP&#x2F;3相比 HTTP&#x2F;2有哪些新特性 HTTP&#x2F;3的使用现状","text":"前言之前的文章已经给大家介绍过 HTTP&#x2F;2，今天我们来聊聊 HTTP&#x2F;3。本文主要从如下几个角度来讲讲 HTTP&#x2F;3的那些事： HTTP&#x2F;3的由来 HTTP&#x2F;3相比 HTTP&#x2F;2有哪些新特性 HTTP&#x2F;3的使用现状 HTTP&#x2F;2有什么问题？2015年5月定稿的HTTP&#x2F;2解决了HTTP 1.x中存在的一大堆缺点，其中主要包含： 解决了HTTP的队头拥塞（head of line blocking）问题，客户端必须等待一个请求完成才能发送下一个请求的日子过去了。 使用多路复用（multiplexing），因而它可以通过同一个TCP连接发送多个逻辑数据流。复用使得很多事情变得更快更好，它带来更好的拥塞控制、更充分的带宽利用、更长久的TCP连接。 但是HTTP&#x2F;2也有自己的问题：TCP上的队头阻塞（head of line blocking）。如果一个序列号较低的数据段还没有接收到，即使其他序列号较高的段已经接收到，TCP的接收机滑动窗口也不会继续处理。这将导致TCP流瞬间挂起，在更糟糕的情况下，即使所有的段中有一个没有收到，也会导致关闭连接。 HTTP&#x2F;3是什么？ HTTP3.0 &#x3D; HTTP2.0 + QUIC（包含TLS）+ UDP HTTP&#x2F;3其实是HTTP-over-QUIC，而QUIC（Quick UDP Internet Connections）是Google 2012年实现并部署、2013年公开发布，2021 年 6 月IETF公布的RFC9000正式确定了标准化版本。 相比于 HTTP&#x2F;2，HTTP&#x2F;3主要是将传输层的TCP改为UDP协议，然后在应用层用QUIC协议来实现TCP的可靠性，解决TCP少量丢包导致队头阻塞（head-of-line blocking）问题&amp;继承HTTP2.0的多路复用优点。 HTTP&#x2F;2 vs HTTP&#x2F;3 HTTP&#x2F;3有哪些关键特性？HTTP&#x2F;3 的几个关键点主要包含： 通过提高链接利用效率减少 RTT，提高数据交互速度。 在第一条的基础上，囊括安全需求。 解决当前实际网络环境中的适配问题，需要做好协议的兼容性设计。 减少RTT RTT是Round Trip Time的缩写，通俗地说，就是通信一来一回的时间。下面分别是 HTTP&#x2F;2和 HTTP&#x2F;3 建立第一次数据通信需要的 RTT 对比。 HTTP&#x2F;2：TCP1.5次RTT+TLS1.5 次RTT+ HTTP 1 次RTT HTTP&#x2F;3：QUIC1.5 次RTT+ HTTP 1 次RTT QUIC协议本身的一些关键特性如下： 优势 详细解释 显著的减少了连接建立的时间 使用QUIC协议也是需要三次握手的，跟TCP三次握手不一样的是它集成了TLS1.3版本的握手过程，需要1RTT。 就HTTP2.0来说，支持TLS1.3的话，也需要1RTT（TCP三次握手）+1RTT（TLS1.3）&#x3D;2RTT，况且现在还是TLS1.2版本在广泛使用，现状就是 1RTT（TCP三次握手）+2RTT（TLS1.2）&#x3D;3RTT 没有队头阻塞的多路复用 这个上面有举例，就不详细说了。 对HTTP2.0，主要是因为所有的资源是通过同一个TCP连接返回的，TCP要保证接收到所有的数据包，因此，一旦有数据包丢失，丢失的数据包会阻塞后续的数据包传送给应用层，直至重新接收到这个数据包。 对QUIC，它使用UDP进行数据传输，UDP在拿到数据后给到QUIC，由QUIC组装，如果一个资源完整了，就交给QUIC的上层处理，不完整，也就是有一个资源的数据包丢失，那QUIC会要求重传这个丢失的包，因此只会影响到这个资源，不会影响到其他资源的数据包被应用层处理 连接迁移 WiFi切换到4G，4G切换WiFi都不需要重新建立连接，原因在于QUIC用一个connection ID来标志连接，而TCP是用client ip+client port+server ip+server port来标志的，因此当切换网络时，client ip变化了，导致TCP连接失效 天然集成TLS1.3更安全 TLS 1.3相比于 1.2 有了更快的连接速度和更高的安全性： 引入了新的密钥协商机制（PSK），支持 0-RTT 数据传输，在建立连接时节省了往返时间； 废弃了 3DES、RC4、AES-CBC 等加密组件，废弃了 SHA1、MD5 等哈希算法； 以下是QUIC和HTTP&#x2F;3各个部分的最新官方IETF草案列表: HTTP&#x2F;3: Hypertext Transfer Protocol (HTTP) over QUIC 不变性：Version-Independent Properties of QUIC 传输层: QUIC: A UDP-Based Multiplexed and Secure Transport 自动恢复: QUIC Loss Detection and Congestion Control TLS: Using Transport Layer Security (TLS) to Secure QUIC QPACK: QPACK: Header Compression for HTTP over QUIC 与HTTP&#x2F;2的比较HTTP&#x2F;3面向QUIC设计，QUIC是一个自己处理数据流的传输层协议。HTTP&#x2F;2面向TCP设计，因此数据流在HTTP层处理。 相似之处 这两个协议为客户端提供了几乎相同的功能集。 两者都提供数据流 两者都提供服务器推送 两者都有头部压缩 QPACK与HPACK的设计非常类似 两者都通过单一连接上的数据流提供复用 两者都提供数据流的优先度设置 不同之处 两个协议的主要不同点在于细节，不同之处主要由HTTP&#x2F;3使用的QUIC带来： 0-RTT握手： QUIC 协议中，对于先前已连接过一个服务器的客户端可能缓存来自该连接的某些参数，并在之后与该服务器建立一个无需等待握手完成就可以立即传输信息的0-RTT连接，从而减少建立新连接所必需的 时间。 得益于QUIC，HTTP&#x2F;3的握手速度比TCP+TLS快得多。 HTTP&#x2F;3不存在明文的不安全版本。尽管在互联网上很少见，HTTP&#x2F;2还是可以不配合 HTTPS来实现和使用。 HTTP&#x2F;3 使用现状如何?截止到 2021 年 8 月份，据W3Tech统计目前全球有将近21%的网址支持 HTTP&#x2F;3访问，相比之下目前 HTTP&#x2F;2约有 46%的占比。 关于HTTP&#x2F;3的一些常见批评主要包含： UDP永远不会通 很多企业、运营商和组织对53端口（DNS）以外的UDP流量进行拦截或者限流，因为这些流 量近来常被滥用于攻击。特别是一些现有的UDP协议和实现易受放大攻击（ampliﬁcation attack）威胁，攻击者可以控制无辜的主机向受害者投放发送大量的流量。 QUIC内置了对放大攻击的缓解处理。它要求初始数据包不小于1200字节，并且协议中限制，服务器在未收到客户端回复的情况下，不能发送超过请求大小三倍的响应内容。 QUIC太吃CPU、内核处理UDP慢 TCP和TLS长期以来的成熟发展、改进，以及得到硬件协助，造成UDP看上去比较慢。我们有理由期望这会随着时间得到改善。问题在于，这额外的CPU占用会对部署者带来多大的影响。 只有Google在弄 QUIC 最早确实是 Google提出、实施的，后续交由 IETE 进行了标准化。但是这个批评其实站不住脚，Google通过大规模的部署证明，通过UDP部署这种协议可以正常运行且表现良好，这为IETF带来了初始的规范。后面Mozilla、Fastly、Cloudﬂare、Akamai、微软、 Facebook、苹果等等很多公司的员工也参与进来，共同推进互联网的传输层协议。 gQUIC 和 iQUIC的差异问题 2021 年 6 月正式定稿了QUIC协议，我们有理由相信后续HTTP&#x2F;3相关升级工作也会得到稳步推进。 结语至此HTTP系列文章已经全部完结，从 HTTP 1.x到 HTTP&#x2F;3 协议的升级过程中，我们能够看到面对复杂和不稳定的网络环境，Google 及全球各大 IT 公司的童鞋们联合在一起贡献自己的力量，为不断提高网络应用程序的性能而努力~ 文档资料 QUIC - 维基百科 HTTP&#x2F;3 - explained【简体中文】 TLS1.3 VS TLS1.2，让你明白TLS1.3的强大 如何看待 HTTP&#x2F;3 - 知乎 HTTP&#x2F;3: the past, the present, and the future","categories":[{"name":"开发","slug":"开发","permalink":"https://coolzeng.com/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"网络编程","slug":"网络编程","permalink":"https://coolzeng.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"}]},{"title":"关于HTTP/2 的那些事","slug":"关于HTTP-2-的那些事","date":"2022-04-08T14:07:27.000Z","updated":"2022-08-06T05:10:57.297Z","comments":true,"path":"posts/http2-overview/","permalink":"https://coolzeng.com/posts/http2-overview/","excerpt":"前言作为客户端研发童鞋，HTTP 协议想必大家都算比较熟悉了，下面几个简单问题应该可以轻松回答：HTTP 的响应码有哪些？HTTP 301&#x2F;302分别是做什么的？Cookie 和 Session 是做什么的？哪些请求是“幂等”？… 但是对于 HTTP&#x2F;2 往往了解比较少，本文主要基于 HTTP&#x2F;2协议来回答几个问题： HTTP&#x2F;1.x有哪些主要问题？ 为什么不用 HTTP&#x2F;2.0的命名？ HTTP&#x2F;2是什么？ HTTP&#x2F;2的兼容性怎么样？ HTTP&#x2F;2有哪些关键特性？ HTTP&#x2F;2使用现状如何?","text":"前言作为客户端研发童鞋，HTTP 协议想必大家都算比较熟悉了，下面几个简单问题应该可以轻松回答：HTTP 的响应码有哪些？HTTP 301&#x2F;302分别是做什么的？Cookie 和 Session 是做什么的？哪些请求是“幂等”？… 但是对于 HTTP&#x2F;2 往往了解比较少，本文主要基于 HTTP&#x2F;2协议来回答几个问题： HTTP&#x2F;1.x有哪些主要问题？ 为什么不用 HTTP&#x2F;2.0的命名？ HTTP&#x2F;2是什么？ HTTP&#x2F;2的兼容性怎么样？ HTTP&#x2F;2有哪些关键特性？ HTTP&#x2F;2使用现状如何? 已经清楚答案的童鞋请出门左拐(￣.￣)(￣.￣) HTTP&#x2F;1.x有哪些主要问题？ header 冗余 HTTP&#x2F;1.x 头字段通常是重复且冗长的，而且每次网络请求都需要带上一些重复的信息（e.g cookie、UserAgent等），导致不必要的网络流量以及导致初始TCP拥塞窗口被快速的填满。当在新的 TCP 连接上发出多个请求时，这可能导致过多的延迟。 队头阻塞（head-of-line blocking） HTTP&#x2F;1.0 在给定的 TCP 连接上一次只允许一个请求未完成。HTTP&#x2F;1.1 添加了请求流水线操作(request pipelining)，但这只是部分地解决了请求并发性，并且仍然受到队首阻塞的影响。因此，需要发出许多请求的 HTTP&#x2F;1.0 和 HTTP&#x2F;1.1 客户端使用多个连接到服务器以实现并发，从而减少延迟。 为什么不用 HTTP&#x2F;2.0的命名？HTTP&#x2F;2 是由 IETF 的 HTTP 工作组开发的，该工作组维护 HTTP 协议。它由许多 HTTP 实现、用户、网络运营商和 HTTP 专家组成。 他们认为以前的“1.0”“1.1”造成了很多的混乱和误解，让人在实际的使用中难以区分差异，所以就决定 HTTP 协议不再使用小版本号（minor version），只使用大版本号（major version），从今往后 HTTP 协议不会出现 HTTP&#x2F;2.0、2.1，只会有“HTTP&#x2F;2”“HTTP&#x2F;3”…… 这样就可以明确无误地辨别出协议版本的“跃进程度”，让协议在一段较长的时期内保持稳定，每当发布新版本的 HTTP 协议都会有本质的不同，绝不会有“零敲碎打”的小改良。 HTTP&#x2F;2是什么？早年 Google 的童鞋为了优化 HTTP&#x2F;1.1 协议，在实验室捣鼓了 SPDY协议，后面与HTTP 工作组一起合作参与了 HTTP&#x2F;2的协议制定，下面是关于 HTTP&#x2F;2的一些关键时间点： 2012 年 3 月: 征集 HTTP&#x2F;2 建议 2012 年 11 月: 第一个 HTTP&#x2F;2 草案（基于 SPDY） 2014 年 8 月: HTTP&#x2F;2 草案 17 和 HPACK 草案 12 发布 2014 年 8 月: 工作组最后一次征集 HTTP&#x2F;2 建议 2015 年 2 月: IESG 批准 HTTP&#x2F;2 和 HPACK 草案 2015 年 5 月: RFC 7540 (HTTP&#x2F;2) 和 RFC 7541 (HPACK) 发布 这里主要介绍HTTP&#x2F;2的几个重点内容：scheme&amp; 端口号、建连过程和协议格式。 scheme&amp;端口号 HTTP&#x2F;2 使用 HTTP&#x2F;1.1 使用的相同 “http” 和 “https” URI scheme，HTTP&#x2F;2 共享相同的默认端口号: “http” URI 为 80，”https” URI 为 443。 建连过程 HTTP&#x2F;2 的初始请求是通过 HTTP&#x2F;1.1的请求来进行升级的，这样如果服务器不支持 HTTP&#x2F;2就可以继续使用 HTTP&#x2F;1.1来进行通信（这个和 WebSocket 建连过程类似） 123456789GET / HTTP/1.1Host: server.example.comConnection: Upgrade, HTTP2-SettingsUpgrade: h2cHTTP2-Settings: &lt;base64url encoding of HTTP/2 SETTINGS payload&gt; 如何服务器不支持 HTTP&#x2F;2，则返回 HTTP&#x2F;1.1的响应: 1234HTTP/1.1 200 OKContent-Length: 243Content-Type: text/html... 如何服务器支持 HTTP&#x2F;2，则通过 101(交换协议)响应接受升级: 12345678HTTP/1.1 101 Switching ProtocolsConnection: UpgradeUpgrade: h2c[ HTTP/2 connection ... 协议格式 在 HTTP&#x2F;1.1 中，头信息是文本编码(ASCII编码)，数据包体可以是二进制也可以是文本。和 HTTP&#x2F;1.x最大的区别：HTTP&#x2F;2 是一个彻彻底底的二进制协议，头信息和数据包体都是二进制的，统称为“帧”。使用二进制作为协议实现方式的好处，更加灵活。在 HTTP&#x2F;1.1 中的一个消息是由 Start Line + header + body 组成的，而 HTTP&#x2F;2 中一个消息是由 HEADER frame + 若干个 DATA frame 组成的，如下图： 关于 HTTP&#x2F;2 不同类型帧（总共 10 种）的内容太多了，这里就不赘述了感兴趣的童鞋可以参见《HTTP&#x2F;2 中的帧定义》 HTTP&#x2F;2的兼容性怎么样？HTTP&#x2F;2 最大限度的兼容 HTTP&#x2F;1.1 原有行为： 在应用层上修改，基于并充分挖掘 TCP 协议性能。 客户端向服务端发送 request 请求的模型没有变化。 scheme 没有发生变化，没有 http2:&#x2F;&#x2F; 使用 HTTP&#x2F;1.X 的客户端和服务器可以无缝的通过代理方式转接到 HTTP&#x2F;2 上。 不识别 HTTP&#x2F;2 的代理服务器可以将请求降级到 HTTP&#x2F;1.X。 HTTP&#x2F;2有哪些关键特性？ 头部压缩信息：一些重复信息（如 Cookie&#x2F;UserAgent&#x2F;Accept&#x2F;Server等 ）在 HTTP&#x2F;1.x中每次都需要传输到服务器。为了减小网络开销、提高传输效率，主要通过2个手段进行优化： 头信息专门的“HPACK”算法压缩后再发送 客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了 基于二进制流的“帧”：在 HTTP&#x2F;2 中定义了 10 种不同类型的帧 消息是由 HEADER frame + 若干个 DATA frame 组成 多路复用：解决了原来的序列和阻塞机制 乱序请求：HTTP&#x2F;2 把每个 request 和 response 的数据包称为一个数据流(stream)，每个数据流都有自己全局唯一的编号。每个数据包在传输过程中都需要标记它属于哪个数据流 ID，客户端发出的数据流，ID 一律为奇数，服务器发出的，ID 为偶数。 优先级排序：可以对请求进行优先级排序，使更多重要请求更快地完成，从而进一步提高性能。 请求可取消：数据流在发送中的任意时刻，客户端和服务器都可以发送信号(RST_STREAM 帧)，取消这个数据流。HTTP&#x2F;1.1 中想要取消数据流的唯一方法，就是关闭 TCP 连接。而 HTTP&#x2F;2 可以取消某一次请求，同时保证 TCP 连接还打开着，可以被其他请求使用。 服务端主动推送：允许服务器推测性地将数据发送到需要这些数据的客户端，通过牺牲一些网络流量来抵消潜在的延迟。服务器通过合成请求来完成此操作，并将其作为 PUSH_PROMISE 帧发送。然后，服务器能够在单独的流上发送对合成请求的响应。 HTTP&#x2F;2 使用现状如何?在浏览器中，Edge，Safari，Firefox 和 Chrome 的最新版本都支持 HTTP&#x2F;2。其他基于 Blink 的浏览器也将支持 HTTP&#x2F;2（例如 Opera 和 Yandex Browser）。有关更多详细信息，请参见这里。 还有几种可用的服务器（包括 Akamai，Google 和 Twitter 的主要站点提供的 beta 支持），以及许多可以部署和测试的开源实现。 HTTP&#x2F;3是什么?请听下回分解Y(^o^)Y 结语HTTP 协议作是大家日常开发接触最多的网络协议，其不同版本的改进和背后的设计思路值得仔细品读~~ 文档资料 《HTTP&#x2F;2基础教程》中文版 HTTP&#x2F;2 简介 - Web Fundamentals 《HTTP 协议》 [译] HTTP&#x2F;2 常见问题解答 - 掘金 《HTTP&#x2F;2 中的帧定义》","categories":[{"name":"开发","slug":"开发","permalink":"https://coolzeng.com/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"网络编程","slug":"网络编程","permalink":"https://coolzeng.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"}]},{"title":"《人生战术本》- 里弗斯教练帮助他人“成为更好的人”","slug":"《人生战术本》- 里弗斯教练帮助他人“成为更好的人”","date":"2022-04-05T06:36:16.000Z","updated":"2022-08-06T08:40:55.196Z","comments":true,"path":"posts/the-palybook/","permalink":"https://coolzeng.com/posts/the-palybook/","excerpt":"本文内容节选自 Netflix 20 年推出的纪录片《人生战术本》（The Playbook）第一季第一集，主人公是拥有 22 年 NBA 执教经验的主教练道格·里弗斯。","text":"本文内容节选自 Netflix 20 年推出的纪录片《人生战术本》（The Playbook）第一季第一集，主人公是拥有 22 年 NBA 执教经验的主教练道格·里弗斯。 “我是里弗斯，我是人，我也会犯错”，开场白非常的平易近人，让人倍感亲切~ 做你自己喜欢的事情，你才不会觉得累。 几十年来，里弗斯起床到篮球场去训练，但是他不喜欢用“训练”这个词，当被人问到去做什么的时候，他总是喜欢说去“打篮球”。里弗斯小时候被问到成长以后想变成一个什么样的人，第一次他在黑板上面写到“成为一名 NBA球员”但是被老师给擦掉了，然后对他说道“降低预期，现实一点”，于是当里弗斯第二次在黑板上面写到“我想成为一名 NBA 球员”，老师让他直接回家请家长了“那你收拾好自己的东西回家想想吧”。 回到家里，里弗斯的爸爸这样对他说“你在学校没有好好听老师讲课，你总是把事情搞砸、喜欢胡闹，你以后当不了职业球员”，最终里弗斯不仅成为了 NBA球员，到目前为止也在 NBA执教了 20 多年，这一切出自于他对篮球的喜爱和坚持吧 凯尔特人第十八冠的故事 -不会熄灭的灯和“乌班图”的生活方式 他和队员都在一起践行“乌班图”的生活方式，在团队中相信他人、成就他人，最终形成一个“共同体”。 在比赛前夕里弗斯的父亲去世了，他离开团队飞回老家参加父亲的葬礼，当里弗斯和家人在电视机前面观看比赛的时候，中场休息时间收到了加内特打过来的电话，加内特说道“当你难过的时候，我们也感到很难过”，里弗斯谈到此情此景的时候都会感到很激动。那场比赛在的最后 7 秒钟，皮尔斯把球传给了雷·阿伦，由雷·阿伦投入了制胜三分最终帮助球队完成逆转，我们通过电视转播能够看到凯尔特人逆转比赛、看到赢得胜利之后队员们欢快的庆祝，但是背后的故事也挺让人感动。 有一场比赛胜利之后，记者问加内特“今晚你非常注重防守，你觉得自己在防守方面有哪些地方做的比较好？”，“不是我，而是我们。我在我应该在的位置，而我的队友们也在他们应该在的位置（这样才能不失位）。我们需要靠这种积极的补位来赢得比赛”，加内特给出了这样的回答。 有一天里弗斯在球馆上方的 17 块总冠军旗帜旁边打了一个灯光，寓意“不会熄灭的灯”，当天训练介绍之后他询问球员们今天球馆有什么不同的地方，只有托尼·阿伦发现在球馆上方多出了一块光。“是的，灯不会熄灭，我们的焦点就在那里，我们比赛就是为了这个”，“每天、每次练习，他们都看到那盏灯照着墙”，激发队员们“我们是波士顿凯尔特人队，我们就是要赢”。 里弗斯谈到自己的偶像是拳王阿里，“直觉上大家会觉得冠军是不被击打的，但是事实其实是相反的，冠军会被一次次的击打，就看你能挨多少次打，同时还要向前进，直到取得胜利”。 一个好的教练，需要让自己的队员相信自己能够赢得下一场比赛。里弗斯小的时候的目标就是击败自己的哥哥，哥哥比他健壮、力量更强，从最开始32：0到 32：4，然后到 32：8，通过自己持续练习、一步步成长起来最终击败了哥哥。 一开始里弗斯认为自己作为主教练的职责是带领团队赢得一场场的胜利，后面能够通过指导队员、看着他们逐渐成熟起来、“打出来”也是一种喜悦或者说幸福。不过，他也有收到过一些忠告“不要和团队成员走得太近了，因为总有人会让你失望”。但是里弗斯认为教练的职责就是指导他们，让他们成为更好的球员、更好的人、更好的队友、变得坚强、有热情，学会面对赢输。 19 年CBA的 官方纪录片《敢梦敢当》里面，看到了杜峰作为球队主教练的成长，也看到了他不为人知的一面：一个有血有肉的人、体贴他人、关注成长、激励队员。在竞技体育里面，一个团队要想在顶级舞台上面想要夺得冠军，背后一定是付出了巨大的努力，除了日复一日的练习，研究对手的强弱点，还需要一名优秀的教练，给大家带来前进的方向，激励团队里面的每一个人成为更好的自己。 《人生战术本》分享了传奇教练在运动和生活中取得成功所遵循的规则。通过感人的深度访谈，每位教练都透露了他们个人生活和职业生涯中的关键时刻，这些时刻最终帮助他们形成了自己的教练哲学。 B站链接：https://www.bilibili.com/video/BV1WA411J76h","categories":[{"name":"分享","slug":"分享","permalink":"https://coolzeng.com/categories/%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"分享","slug":"分享","permalink":"https://coolzeng.com/tags/%E5%88%86%E4%BA%AB/"}]},{"title":"iOS ReactNative私有库指南","slug":"iOS-ReactNative私有库指南","date":"2018-10-20T14:11:52.000Z","updated":"2022-08-06T08:40:55.195Z","comments":true,"path":"posts/react-native-private-repo/","permalink":"https://coolzeng.com/posts/react-native-private-repo/","excerpt":"创建RN私有库为了加速RN的下载和方便集成，我把RN(0.56.0)做成私有pod放到了gitlab的私有源中，参考《使用Cocoapods创建私有podspec》、《私有Pods集成react-native库》。","text":"创建RN私有库为了加速RN的下载和方便集成，我把RN(0.56.0)做成私有pod放到了gitlab的私有源中，参考《使用Cocoapods创建私有podspec》、《私有Pods集成react-native库》。 开始之前，需要搞清楚两个概念： cocoapods 是通过spec repos + pod source code repo 来进行代码版本管理，cocoapods 的master spec repo来管理所有的第三方库 spec，每个 spec 中都包含了对于 pod 的 source code pod。 私有源仓库：类似于 cocoapods 官方来管理 specs 的仓库，用来管理私有库的 spec，下文中使用YOUR_SPECS_REPO来指代。同时，这个 repo 也有自己的 git 地址，下文使用YOUR_SPECS_GIT 私有 pod 代码仓库：存放私有库 source code 的 repo。 下面是具体的操作步骤： 创建私有ReactNative repo 把 github 上的源码 clone 下来，然后 push 到自己的私有库 git 中 仓库代码是github源码 修复0.56.0中WebSocket问题 创建&amp;修改 podspec.json 切换到对应的tag commit: 如v0.56.0，下面的yoga和React需要保存version一致。 然后按照《私有Pods集成react-native库》中生成和修改了yoga.podspec.json、React.podspec.json，需要修改yoga.podspec.json的source_files和public_header_files 123pod ipc spec React.podspec &gt;&gt; React.podspec.jsoncd ReactCommon/yogapod ipc spec yoga.podspec &gt;&gt; yoga.podspec.json 修改yoga.podspec.json123&quot;git&quot;: &quot;YOUR_RN_GIT&quot;&quot;source_files&quot;: &quot;ReactCommon/yoga/**/*.&#123;cpp,h&#125;&quot;,&quot;public_header_files&quot;: &quot;ReactCommon/yoga/**/&#123;Yoga,YGEnums,YGMacros&#125;.h&quot; lint &amp; push podspec.json 需要注意的是，修改后的podspec.json文件，需要进行lint校验、上传到私有源，下面是yoga的方法 12pod spec lint yoga.podspec.json --no-clean --verbose --allow-warningspod repo push YOUR_SPECS_REPO yoga.podspec.json --allow-warnings 通过上面的方法可以吧RN和yoga添加到私有源中，但是我们pod install的时候，还是会报错 Folly在RN中被CxxBridge、jschelpers等subspecs依赖，Folly.podspec文件本身在RN源码目录third-party-podspecs中，需要把Folly.podspec也上传到私有源中，否则pod install会出现错误 由于Folly在cocoapods公共源中已经没有维护，但是有志愿者维护了一个folly-ios的pod，需要我们添加到私有源中，添加方法和上面类似 1pod repo push YOUR_SPECS_REPO Folly.podspec --allow-warnings 类似的，我们也需要把React.podspec.json文件提交到私有源中：12pod spec lint React.podspec.json --no-clean --fail-fast --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.gitpod repo push YOUR_SPECS_REPO React.podspec.json --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.git 最终，我们总共需要添加了三个私有repo：RN&#x2F;Folly&#x2F;yoga 创建离线js bundle包使用下面命令生成js bundle: 1react-native bundle --dev true --entry-file index.ios.js --bundle-output ios/main.jsbundle --platform ios 通过–dev参数(true&#x2F;false)控制生成debug&#x2F;release包 如何维护RN版本同步Github上的ReactNative源码，在sourceTree中，添加remote: 切换到当前的分支(0.57-stable)，可以从github上面拉取最新代码（使用rebase）更新podspec.json 123pod ipc spec React.podspec &gt;&gt; React.podspec.jsoncd ReactCommon/yogapod ipc spec yoga.podspec &gt;&gt; yoga.podspec.json 创建RN私有库的中已经提供了需要修改的地方。 lint &amp; push podspec.json，或者直接在私有源中进行修改。 RN代码有bug怎么办？从RN 0.56.0到RN 0.57.3，都没有解决websocket crash问题。 解决方法： 查看github issue，寻找问题解决方法。已web socket为例，已经用人提了PR 把PR中的源代码下载到本地，然后本地进行验证。验证通过后，则commit &amp;&amp; push到当前tag 所在的分支 由于更新了RN源码，我们需要修改私有库中tag对应的commit： 删除之前的tag（0.57.3），在最新的commit中来添加新tag（0.57.3) 在React.podspec.json中，使用branch替代tag 1234&quot;source&quot;: &#123; &quot;git&quot;: &quot;YOUR_RN_GIT&quot;, &quot;branch&quot;: &quot;0.57-stable&quot; &#125;, 专治疑难杂症RN 0.56.0 问题： com.squareup.SocketRocket.NetworkThread(18): EXC_BAD_ACCESS 解决的PR:https://github.com/facebook/react-native/pull/19489 WebSocket registerEvents is undefined when running master 解决方法：https://stackoverflow.com/a/52486616 RN 0.57.3 问题： Unable to resolve module schedule/tracking 参考资料： swift cocoapods Could not build Objective-C module ‘React’ 含泪导入React-native 0.54到Swift原生项目 React Native 0.50.0 集成遇到的问题 《使用Cocoapods创建私有podspec》 《私有Pods集成react-native库》 What’s the difference between ‘pod spec lint’ and ‘pod lib lint’?","categories":[{"name":"开发","slug":"开发","permalink":"https://coolzeng.com/categories/%E5%BC%80%E5%8F%91/"},{"name":"ReactNative","slug":"开发/ReactNative","permalink":"https://coolzeng.com/categories/%E5%BC%80%E5%8F%91/ReactNative/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"https://coolzeng.com/tags/iOS/"},{"name":"ReactNative","slug":"ReactNative","permalink":"https://coolzeng.com/tags/ReactNative/"}]},{"title":"Xcode 10 beta 版本迁移指南","slug":"Xcode-10-beta-版本迁移指南","date":"2018-06-21T12:15:29.000Z","updated":"2022-08-06T08:40:55.194Z","comments":true,"path":"posts/xcode-10-migrate/","permalink":"https://coolzeng.com/posts/xcode-10-migrate/","excerpt":"今天的主角就是开发者接触最多的 Xcode 10 beta，详细内容可以参考 WWDC 18 Session ，同时可以看下 Xcode 10 的 release note, 官方文档永远是学习新内容的第一手资料。 Xcode 10 beta 在 WWDC 18后就对开发者开放下载了，WWDC 18的新内容不多，Apple 今年把主要精力放在 Bugfix和性能优化上面，还这几年欠下来的技术债，关于 iOS 11的诟病一直不绝入耳，不得不说，Apple 今年的决策还是比较明智的。","text":"今天的主角就是开发者接触最多的 Xcode 10 beta，详细内容可以参考 WWDC 18 Session ，同时可以看下 Xcode 10 的 release note, 官方文档永远是学习新内容的第一手资料。 Xcode 10 beta 在 WWDC 18后就对开发者开放下载了，WWDC 18的新内容不多，Apple 今年把主要精力放在 Bugfix和性能优化上面，还这几年欠下来的技术债，关于 iOS 11的诟病一直不绝入耳，不得不说，Apple 今年的决策还是比较明智的。 我们项目现在是 OC 和 Swift 混编，Xcode 版本是9.4.1，swift 4，平时用公司的 iMac Late 2013编译感觉有点吃力，用自己的 MBP 14则编译速度足够去喝杯咖啡，享受人生。 我尝试把自己的主力机（iPhone 7）升级到 iOS 12后，内心抑制不住冲动把14年的 iPhone 6也升级下 iOS 12试试，重新体会到了之前 iOS 的那种流畅，真的是老泪纵横。平时 iPhone 6只能沦为测试手机，跑跑单元测试啥的。 升级了 iOS 12后，Xcode 9已经不能进行调试了，本着生命不息，折腾不止的精神，顺带体验了一下 Xcode 10的各种新功能，总结了一下升级 Xcode 10过程中踩的坑。 Xcode 10 beta 版本迁移指南： 指定 swift版本：4.1，Xcode 10使用的是 swift 4.2版本，而 Xcode 9.4则使用 Swift 4.1,基本改动不大，为了兼容 Xcode 9，这里统一使用 Swift 4.1。 podfile设置如下: config.build_settings[&#39;SWIFT_VERSION&#39;] = &#39;4.1&#39; 12345678910111213141516 ​- xcode 项目设置： - **SWIFT_VERSION**为 swift 4- xcode command tool设置: 使用 Xcode 10 - sudo xcode-select --switch /Applications/Xcode-beta.app - xcodebuild -version可以查看 - ``` - Xcode 10.0 - Build version 10L176w ​ 更新部分 pod 库： RACObjcBridge&#x2F;RACObjc升级到3.1.0，之前是3.0.0版本，swift 版本导致需要升级。 删除 Tencent SDK pod spec 中的s.resource_bundle字段，参见 xcode 10 beta release note。多个相同的输入文件导致冲突，这个也是 xcode 10新增的功能，为了加快编译速度，对编译依赖检测得很严格。 使用 Carthage 的话，则需要指定手动指定 Swift 版本： carthage update –platform iOS –toolchain com.apple.dt.toolchain.Swift_4_1 –no-use-binaries REPO_NAME 更新 swift lint: disable identifier_name 参见False positive for rule identifier_name in Xcode 10 beta 其他错误： Command CompileC failed with a nonzero exit code 整个升级过程中，需要注意的几点： 及时清理 DerivedData目录，由于整个编译过程中会产生众多的中间文件，非常容易导致编译依赖检测出错。 更新 carthage framework和使用 pod install 重新编译第三方库。 New Build System: Xcode 9.4引入了 preview 版本，Xcode 10则是默认开启，开启后，编译速度确认有所提升，但是也会导致一些比较奇怪的编译问题，上面只是记录了笔者遇到的几个问题。 完成升级后，Xcode 9.4和 Xcode 10 beta 可以共存，笔者使用 Xcode 10 beta，其他开发同事继续使用 Xcode 9。","categories":[{"name":"开发","slug":"开发","permalink":"https://coolzeng.com/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"https://coolzeng.com/tags/iOS/"}]},{"title":"Cocoapods采坑记 - Podfile.lock 冲突问题","slug":"Cocoapods采坑记-Podfile-lock-冲突问题","date":"2018-01-10T14:00:43.000Z","updated":"2022-08-06T08:40:55.194Z","comments":true,"path":"posts/podfile_lock_conflict/","permalink":"https://coolzeng.com/posts/podfile_lock_conflict/","excerpt":"故事的开端是这样的：我们的项目中使用了FBRetainCycleDetector这个第三方库来检查内存泄露，在升级到某一个版本后，出现部分同事的 podfile.lock中FBRetainCycleDetector的checksum 值不一致，每次都需要运行 pod install 来更新 podfile.lock,然后git push 到仓库。其他的同事又出现 podfile.lock 冲突，需要运行 pod install 更新，然后push到 git 仓库。","text":"故事的开端是这样的：我们的项目中使用了FBRetainCycleDetector这个第三方库来检查内存泄露，在升级到某一个版本后，出现部分同事的 podfile.lock中FBRetainCycleDetector的checksum 值不一致，每次都需要运行 pod install 来更新 podfile.lock,然后git push 到仓库。其他的同事又出现 podfile.lock 冲突，需要运行 pod install 更新，然后push到 git 仓库。 喜剧上演多次后，我们采取少数服从多数的原则，让出现冲突的同事git push 的时候手动去掉 podfile.lock。 podfile.lock冲突 Podfile.lock 不一致的原因：Podfile.lock和Manifest.lock： 项目中集成 cocoapods 的时候，运行 pod install 后，项目根目录中会生成Podfile.lock，而Pods目录中会有Manifest.lock。 Xcode 编译项目的时候，会执行 Build Phases 中的[CP] Check Pods Manifest.lock 脚本，这个脚本会比对Podfile.lock和Manifest.lock，如果两个文件不相同就会报错。 xcode编译脚本 pod check失败 Podfile.lock是什么： Podfile.lock 文件主要包含三个块：PODS、DEPENDENCIES、SPEC CHECKSUMS，用来记录每个pod的版本号、依赖的其他库和每个库对应的podspec.json文件的 checksum(SHA-1算法)。通过这些信息可以确保多人协作的时候，大家使用的是相同版本的第三方库。 在我们的项目中遇到的是 podfile.lock 中 checksum 部分的冲突，其实就是由于FBRetainCycleDetector.podspec.json文件的checksum不一致。 通过对比了有冲突的同事 mac 中生产的FBRetainCycleDetector.podspec.json文件，发现主要是repuires_arc 字段中的文件列表顺序不同。 在找到问题产生的原因后，就着手解决问题： 一开始怀疑是MAC的 locale 不同导致文件的排序不一致，因为之前使用翻译脚本来做文件排序的时候，也出现过类似的问题。 1system(&quot;LANG=zh_CN.utf-8 sort $tmpFileOut | uniq &gt;&gt; $fileNameOut”); 但是在设置了 locale环境变量之后，问题还是没有解决。 前两天，在FBRetainCycleDetector的 issues 列表中，发现也有人遇到了相同的问题，更加可喜的是，这个小伙子提了一个 PR 修复了这个问题，其实只有一行代码： PR 代码 问题是如何解决的：在运行 pod install 后，生成FBRetainCycleDetector.podspec.json文件中， repuires_arc字段是需要设置-fno-objc-arc的文件列表，但是不知道某种原因，出现文件路径排序在不同电脑上不同，从而导致最后FBRetainCycleDetector.podspec.json的CHECKSUMS(SHA-1) 值不一致。 使用 sort 方法后，解决了文件排序问题。Cheers! 参考资料： http://guides.cocoapods.org/making/specs-and-specs-repo.html http://guides.cocoapods.org/syntax/podspec.html cocopods在更新过程中产生Podfile.lock 和 Manifest.lock: No such file or directory","categories":[{"name":"开发","slug":"开发","permalink":"https://coolzeng.com/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"https://coolzeng.com/tags/iOS/"},{"name":"cocoapods","slug":"cocoapods","permalink":"https://coolzeng.com/tags/cocoapods/"}]},{"title":"Xcode问题锦集","slug":"Xcode问题锦集","date":"2017-08-12T12:59:56.000Z","updated":"2022-08-06T08:40:55.195Z","comments":true,"path":"posts/xcode-tips/","permalink":"https://coolzeng.com/posts/xcode-tips/","excerpt":"Xcode 是 iOS开发人员的利器，偶尔也会变为“猪队友”，下面是本人在开发中积累的一些遇到的问题和解决方案。","text":"Xcode 是 iOS开发人员的利器，偶尔也会变为“猪队友”，下面是本人在开发中积累的一些遇到的问题和解决方案。 代码提示不起作用：This fix from apple dev forums works for me. I have had autocomplete issues with Xcode 6.1&#x2F;Yosemite. Quit Xcode. Restart the computer (this is to clear any in-memory caches). Delete the contents of the DerivedData folder (~&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData), precisely run,a) cd ~&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData&#x2F;b) **rm -rf *** (Try this if Steps 1-3 dont really work as it rebuilds the cache later on restart which takes time) Delete the contents of folder ~&#x2F;Library&#x2F;Caches&#x2F;com.apple.dt.Xcode, i.e.,a) cd ~&#x2F;Library&#x2F;Caches&#x2F;com.apple.dt.Xcodeb) **rm -rf *** Now launch Xcode once more… Logic Testing Unavailable：Logic Testing on iOS devices is not supported. You can run logic tests on the Simulator.http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supportedLogic test need a framework which has not installed with iOS device. Set a Host Application for Unit Test can resolve this issue: App will run first and Uint Test run. $(inherited) in xcode: inherited值的是xcode设置项的继承关系。 每个项目都有PROJECT的设置与TARGETS设置，TARGETS一般情况下就是继承自PROJECT “Xcode 6.3: Can not verify build to install on device” $(inherited) can be used to inherit build settings from the project level to the target level. When you define library or header search paths at the project level you can use $(inherited) in the target build settings to use these search paths in the search paths of the project targets. Verify Xcode: spctl –assess –verbose &#x2F;Applications&#x2F;Xcode.app Xcode显示模拟器时，使用的是UUID，而不是系统型号 http://stackoverflow.com/questions/26533025/xcode-using-guid-instead-of-ios-version-number-in-simulator-selection 在Xcode-&gt;Devices里，选中重复的模拟器，右键菜单“删除”，即可。 iPhone Simulator没有网络 http://stackoverflow.com/questions/13542706/iphone-simulator-cannot-connect-to-internet iOS Simulator (menu, top left) &gt; Reset Content and Settings… fixed it for me. Note this will delete all the apps and associated data you have on the simulator. ineligible device 当前iOS版本比xcode版本高，就会出现这种情况，如iOS 9.1 就不能在Xcode 7上面进行调试，而只能在xcode 7.1进行调试。 更新xcode版本后，出现插件不兼容的问题 fix-xcode-upgrade-plugin-invalid find ~&#x2F;Library&#x2F;Application\\ Support&#x2F;Developer&#x2F;Shared&#x2F;Xcode&#x2F;Plug-ins -name Info.plist -maxdepth 3 | xargs -I{} defaults write {} DVTPlugInCompatibilityUUIDs -array-add defaults read /Applications/Xcode.app/Contents/Info.plist DVTPlugInCompatibilityUUID 检查代码中的FIXME、TODO、ERROR http://krakendev.io/blog/generating-warnings-in-xcode Xcode 7.3(Swift 2.2) Release配置出现Crash： 在Debug和Staging配置环境下的build没有问题，但是Release编译出来的build会出现crash: unrecognised selector sent to instance 尝试方法 《iOS开发调试技巧》 解决方法： 在Swift Compiler -&gt; Code Generation选择,使用Fast [-O]，而不能使用Fast, Whole Module Optimization 查看所有的Simulator： xcrun simctl list devices Xcode 注释功能不起作用： 重启 Xcode,重启 MAC 运行：sudo usr&#x2F;libexec&#x2F;xpccachectl 重命名 Xcode，然后打开，恢复后，重新改名为 Xcode 使用 Code Snippet Xcode开发技巧之code snippets(代码片段) &lt;#type#&gt;占位符 Xcode中的代码片段默认放在下面的目录中：~&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;UserData&#x2F;CodeSnippets","categories":[{"name":"开发","slug":"开发","permalink":"https://coolzeng.com/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"https://coolzeng.com/tags/iOS/"}]},{"title":"Swift 与 OC 混编小技巧","slug":"Swift-与-OC-混编小技巧","date":"2017-01-07T14:43:35.000Z","updated":"2022-08-06T08:40:55.194Z","comments":true,"path":"posts/swift-oc-mix/","permalink":"https://coolzeng.com/posts/swift-oc-mix/","excerpt":"Swift 与 OC交织在一起缠绵的爱情故事，在接下来的几年里将伴随着 iOS 开发人员，下面我们起来看看他们的恩怨纠葛。","text":"Swift 与 OC交织在一起缠绵的爱情故事，在接下来的几年里将伴随着 iOS 开发人员，下面我们起来看看他们的恩怨纠葛。 Swift 和ObjC混编： Apple的文档 Swift中调用OC： 在 Swift 中调用 OC 的代码时，需要使用到 bridging header 文件来把 OC 的类暴露给 swift 手动添加 bridging header 的步骤，直接把 finder 中的代码文件夹拖拽到 xcode 中: [图1-1] 如上图，需要选中“Create groups”，这样就可以在 xcode代码浏览目录中添加一个 group 图1-2 但是，这样的操作不会让 Xcode 自动为我们创建 bridging header 文件，需要手动在 Xcode 中添加 header 文件，这里要注意命名规范，必须是“ModuleName-Bridging-Header.h”，然后设置编译选项 图1-3 图1-4 自动添加bridging header 的步骤 其实 xcode 可以自动添加桥接头文件，只是需要我们在刚开始的时候，拖拽一个 OC 的源文件(包含.h 和.m 文件)，而不是拖拽整个源代码的目录到 xcode 中 图2-1 图2-2 下面是拖拽 OC 源代码后的项目浏览结构，xcode自动创建一个 ModuleName-Bridging-Header.h 的头文件，并且设置好了编译选项： 图2-3 图2-4 OC中调用Swift：** OC来调用 Swift 的时候，需要依赖一个 Swift 默认提供的“ModuleName-swift.h”文件，这个文件是隐藏的，不需要也不能够由开发者来提供，但是可以使用#include包含到 OC 代码中，这个 OC头文件中可以看到 swift 类、结构体、常量的定义。 图3-1 图3-2 需要注意的是，只有继承自 NSObject 的swift类才能被 OC 调用，在 swift.h 文件中是看不到纯 swift类的定义。 Swift使用OC中的宏 可以参考这个提问 有哪些问题： Swift 只能使用OC 中常量的宏定义，如 #define MAX_WIDTH 100 #define Name_KeyPath @“Name_KeyPath” 而不同使用函数调用的宏，如 #define SCREEN_WIDTH [[[UIScreen mainScreen] bounds] width] #define DBQuerySuccess YES 解决方法： 在 OC 文件中创建一个Constant类，使用类方法(screenWidth)来包装现有的宏定义 @objc 关键字的作用 当 swift 中要使用 OC 的一些特性的时候，如 runtime，@objc 关键字用来 提供这个功能。 源代码 具体的使用，可以参见 Github上的代码","categories":[{"name":"开发","slug":"开发","permalink":"https://coolzeng.com/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"https://coolzeng.com/tags/iOS/"}]},{"title":"iOS 网络安全之SSL Pinning","slug":"iOS-网络安全之SSL-Pinning","date":"2016-12-27T03:33:56.000Z","updated":"2022-08-06T08:36:36.707Z","comments":true,"path":"posts/ios-ssl-pinning/","permalink":"https://coolzeng.com/posts/ios-ssl-pinning/","excerpt":"前言：Apple要求所有的 App 在2017年1月必须强制使用 ATS(Application Transport Security)，即 App 必须使用 HTTPS，而不能使用 HTTP 网络协议。这是Apple 在 app 安全领域做出的一个重大的举动，HTTP 由于使用明文进行传输，存在很大的安全隐患，网络请求容易被拦截和篡改。HTTPS 在安全性上相较于 HTTP 有很大的提升，依然存在一些问题：如 MITT(Man-In-The-Middle)中间人攻击和2014年 SSL 的心脏出血漏洞。网络安全的问题看似离我们很远，其实就发生在我们身边，对我们的日常生活也会有很大的影响，特别是在移动互联网的浪潮下，人手一台手机的情况下，大家普遍使用支付宝和微信支付来进行支付，能够联网的智能家居产品越来越多的走入到普通家庭中，网络安全是一个需要引起重视的问题。而在网络传输过程中起到安全保障作用的，就是我们今天要讲的 SSL&#x2F;TLS，当然主要是集中在 iOS 客户端。","text":"前言：Apple要求所有的 App 在2017年1月必须强制使用 ATS(Application Transport Security)，即 App 必须使用 HTTPS，而不能使用 HTTP 网络协议。这是Apple 在 app 安全领域做出的一个重大的举动，HTTP 由于使用明文进行传输，存在很大的安全隐患，网络请求容易被拦截和篡改。HTTPS 在安全性上相较于 HTTP 有很大的提升，依然存在一些问题：如 MITT(Man-In-The-Middle)中间人攻击和2014年 SSL 的心脏出血漏洞。网络安全的问题看似离我们很远，其实就发生在我们身边，对我们的日常生活也会有很大的影响，特别是在移动互联网的浪潮下，人手一台手机的情况下，大家普遍使用支付宝和微信支付来进行支付，能够联网的智能家居产品越来越多的走入到普通家庭中，网络安全是一个需要引起重视的问题。而在网络传输过程中起到安全保障作用的，就是我们今天要讲的 SSL&#x2F;TLS，当然主要是集中在 iOS 客户端。 0x00 - 什么是 SSL&#x2F;TLSSSL(Secure Sockets Layer 安全套接层)及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。SSL为Netscape所研发，用以保障在Internet上数据传输的安全，利用数据加密(Encryption)的技术，可确保数据在网络上的传输过程中不会被截取及窃听。SSL协议位于TCP&#x2F;IP协议与各种应用层协议之间，为数据通讯提供安全支持。 — 摘自《互动百科》 从上面的定义可以看出 SSL 是一个加密层，主要用于信息加密、验证。 SSL 主要提供下面三个服务： 认证用户和服务器，确保数据发送到正确的客户机和服务器； 加密数据以防止数据中途被窃听； 维护数据的完整性，确保数据在传输过程中不被改变。 0x01 - 什么是 HTTPSHTTPS（Hypertext Transfer Protocol Secure 安全超文本传输协议） 是由 Netscape 开发并内置于其浏览器中，用于对数据进行压缩和解压操作，并返回网络上传送回的结果，HTTPS 实际上运用了 Netscape 的完全套接字层（SSL）作为 HTTP 应用层的子层。 0x02 - SSL Pinning 是什么当前主流的各大网站 Google、Facebook 等都使用 HTTPS 来保障数据的安全性和私密性，但是在 HTTPS 协议也存在一定的问题，其中广为人知是 MIIT（中间人工具），攻击者在客户端和服务器中进行伪装和欺骗，从而获取敏感信息。 SSL Pinning 是一个业界预防 MIIT 攻击的解决方案，其主要思想是在客户端绑定（Pin）服务器SSL 证书的核心信息，这个解决方案代价小，易于实施，因此被普遍使用。 0x03 - 在 iOS 中如何使用 SSL PinningiOS 中的 SSL Pinning 主要有三种形式： 直接使用 NSURLSession 配合AFNetworking 使用 配合 Alamofire 使用 NSURLSession 是 iOS 系统提供的类，AFNetworking 和 Alamofire 识别是 ObjC和 Swift 编写的第三方库，具体实施步骤，可以参考这篇 blog。 参考文章： SSL - 互动百科 SSL - 百度百科 How to make your iOS apps more secure with SSL pinning iOS环境下的中间人攻击风险浅析","categories":[{"name":"开发","slug":"开发","permalink":"https://coolzeng.com/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"https://coolzeng.com/tags/iOS/"}]},{"title":"iOS多线程开发笔记","slug":"iOS多线程开发笔记","date":"2016-11-15T13:51:37.000Z","updated":"2022-08-06T08:40:55.195Z","comments":true,"path":"posts/ios-thread-tips/","permalink":"https://coolzeng.com/posts/ios-thread-tips/","excerpt":"[TOC] GCD、NSOperation和多线程编程推荐阅读五星： iOS 并发编程之 Operation Queues GCD 深入理解：第一部分 iOS并发编程对比总结,NSThread,NSOperation,GCD - iOS 四星： NSOperation in NShipster 深入浅出 Cocoa 多线程编程之 block 与 dispatch quene GCD使用经验与技巧浅谈","text":"[TOC] GCD、NSOperation和多线程编程推荐阅读五星： iOS 并发编程之 Operation Queues GCD 深入理解：第一部分 iOS并发编程对比总结,NSThread,NSOperation,GCD - iOS 四星： NSOperation in NShipster 深入浅出 Cocoa 多线程编程之 block 与 dispatch quene GCD使用经验与技巧浅谈 多线程编程概念基本概念、术语： 进程（Precess）：进程是操作系统管理和分配资源的最小单位，每个进程都有自己的内存空间、系统资源，至少有一个主线程和多个辅助线程。在iOS中，每个App运行的时候，都有对应的进程。 线程（Thread）：线程则是操作系统具体的执行单元，代码的执行是在线程来完成的。在iOS中，线程的底层实现是基于POSIX thread API的，也就是我们常说的pthread。 任务（Task）：任务是我们抽象出来的需要执行的工作，一般指代一段代码。 同步 vs 异步 同步是指函数的调用会阻塞当前的线程，必须等待函数返回才能继续执行接下来的代码。 异步函数的调用则不会阻塞当前线程，函数调用之后立刻返回，一般通过回调函数来处理函数的执行结果。 异步函数能够有效的完成一些耗时的任务，而不必影响代码的执行流，能够提高代码的处理效率。 串行 vs 并发 串行指的是在同一个时间只能有一个任务在执行。 并发指的是在同一个时间可以有多个任务一起执行。 并发一般用于多核编程，通过高效的利用多核的优势，把不同的任务分配到各个执行单元来提高效率。 Dispatch Queue vs Operation Queue GCD和NSOperation&#x2F;NSOperationQueue是iOS上面来处理多线程开发的工具，对应的概念分别是Dispatch Queue和Operation Queue。 iOS并发编程模型 在其他的操作系统中，我们往往需要手动创建线程、管理线程的生命周期，在不需要的时候负责销毁线程和线程使用的资源，更加痛苦的是需要使用线程锁、信号量、代码临界区等手段完成线程的同步工作，这些操作往往容易出错而且繁杂。 iOS通过抽象出队列的概念，让开发者更加关注于任务的安排和调度，而从线程的管理工作中解脱出来。在很多时候，iOS把一些繁杂且容易出错的工作（ARC代替MRC）抽离到底层中，能够让开发者把注意力更多地放到真正的任务上，这也是iOS能够吸引广大开发者的原因之一吧。 NSThread vs GCD vs NSOperation，它们到底是什么？三种解决方案 NSThread：一个封装pthread API的线程对象，需要进行线程创建、销毁和处理线程同步，是最接近系统底层的解决方案。 GCD：苹果基于C语言开发的，一个用于多核编程的解决方案，是一个轻量级的、以FIFO的顺序来执行并发任务的库。 NSOperation：建立在GCD的基础上，面向对象的解决方案，比GCD更加灵活，也更加强大。 它们具体是什么？ NSThread: Cocoa对于pthread API的封装，提供了一套面向对象的接口，需要开发者自行管理线程的生命周期、处理线程同步。大多是的时候，我们是不需要直接使用这些底层的对象，而是使用GCD或者NSOperation等更加高级的接口。 关于Operation对象 NSOperation对象本身是一个抽象类，不能直接使用。要么使用系统预定义的两个子类NSInvocationOperation和NSBlockOperation或者定义它的子类。 NSInvocationOperation:可以使用object和selector来创建一个NSInvocationOperation，非常的方便和灵活。当代码中已经有相关的处理逻辑方法时，建议直接使用NSInvocationOperation来进行替代。 NSBlockOperation：可以使用NSBlockOperation来并发的执行一个或者多个block，只有当所有的block都执行完毕，NSBlockOperation才算执行完成，有点像dispatch_group的概念。 所有的Operation都有下面的特性： 支持在 operation 之间建立依赖关系，只有当一个 operation 所依赖的所有 operation 都执行完成时，这个 operation 才能开始执行； 支持一个可选的 completion block ，这个 block 将会在 operation 的主任务执行完成时被调用，在任务被取消的时候也会执行； 支持通过 KVO 来观察 operation 执行状态的变化，Operation正是通过KVO通知来实现依赖运行，所以我们需要在自定义的子类中的处理好KVO的属性； 支持设置执行的优先级，从而影响 operation 之间的相对执行顺序； 支持取消操作，可以允许我们停止正在执行的 operation 。 GCD队列： 以FIFO顺序执行任务的队列调度系统，先入队列的任务一定先执行。 两种类型的队列： 串行队列（Serial Queue）:同一时间内只能有一个任务正在被执行。 并发队列（Concurrent Queue）:同一时间内可以有多个任务同时被执行。 iOS默认提供5个队列： 主队列（Main Queue）：应用程序主线程应用的队列，用于更新UI，属于串行队列。 四个全局队列： 按照队列优先级排序，分别是：High、Default、Low、Background。 这四个全局队列是由系统提供的，在所有的App中共享，当然也包含了Apple的应用。 并发队列中任务的执行顺序： 由于队列的并发数是有系统根据当前的资源动态管理的，我们不知道也不能够设置队列中任务执行的时机和所需时长。 只有当位于队列前面的任务执行完毕、出队列后，才会执行后面的任务，但是当前并发执行的任务数量我们不得而知。 自定义队列： 我们可以自定义串行或者并发队列来完成任务的执行和调度。 各自的优势和劣势 优势： NSThread： 能够执行实时任务。其他两者都是由系统管理的队列，不能保证实时性。 GCD： 可以非常简洁的完成简单异步任务的调用，如在主线程更新UI，延迟执行。 只需要把任务分发到队列之后，不需要管理任务的调度情况。 NSOperation： 给任务添加依赖 取消或者暂停一个正在执行的任务 有一个可选的completionBlock 可以通过KVO来查看任务的执行情况 可以给任务设置优先级，从而影响任务的执行顺序 短板： NSThread：需要进行线程的创建、销毁，以及处理线程同步的问题，过于繁杂，而且容易出错。 GCD: 对于任务的管理不够：如不能取消任务、设置依赖和优先级等。 NSOperation: 相比于GCD，会增加系统的额外开销。 多线程代码中，需要注意哪些问题？ 有了GCD来调度block，我们为什么还需要NSBlockOperation? 现有代码已经在使用OperationQueue，而我们不想使用Dispatch Queue的时候，NSBlockOperation提供了一个面向对象的封装。 当我们需要dispatch queue不能提供的功能时，如KVO观察Operation状态变化、设置operation之间依赖等。 NSInvocationOperation的灵活性是什么意思？ 我们可以通过上下文来改变selector和object对象。 如何定义一个非并发的operation？ 对于非并发的operation，我们只需要实现main方法和能够正常响应取消事件。 其他复杂的工作如KVO通知、依赖设置等工作NSOperation类的start方法已经帮我们提供了默认实现。 简单实现： 提供一个自定义的初始化方法 重写main方法 如何实现一个并发的operation？ 一般我们不需要实现并发的operation，当operation和operation queue一起使用的时候，Operation Queue会为非并发的operation创建单独的线程。 默认情况下，operation是同步执行的，也就是我们直接使用start方法的时候，它是在调用者的线程中执行的。 Operation的isConcurrent属性表明一个operation是否支持并发。 配置并发的Operation：只有当我们需要手动执行operation，并且希望支持并发执行，需要重写下面的方法。 start：必须，配置任务执行的线程和其他资源，但是一定不能调用父类的实现。 main：可选，一般用来执行具体的任务，而start方法更多是用来配置初始环境，当然也可以用来执行具体的任务。 isExecuting和isFinished：必须，并发的Operation需要自己来配置环境，同时还需要向外界来传递状态的变化，而isExecuting和isFinished这两个状态的变化需要使用KVO来通知外部。 isConcurrent：必须，用来标识一个Operation是否支持并发。 如何完成自定义operation的cancel操作？ 在下面这几个关键点的检查isCancelled属性 在真正开始执行operaiton之前 至少在一次循环之中需要检查一次，如果单次循环耗时较长，则需要更加频繁的检查 在任何相对比较容易终止Operation的地方 需要注意的是虽然Operation支持取消操作，但是并不是立刻就可以被终止的，而是在下一个isCancelled的检查点。 在我们自定义Operation子类的时候，即使operation是被cancel了，我们仍然需要设置isFinished方法为true，因为在设置operation依赖的时候，它们的operation就是通过KVO来观察isFinished方法来判断时候可以执行的，如果在cancel的时候，没有设置isFinished方法，那么其他的operation将永远不会执行。 如何定制Operation对象的执行行为： 在Operation添加到Operation Queue之前，我们可以配置Operation的一些行为。 配置依赖关系 依赖关系是在Operation之间的，与是否在同一个Operation Queue没有关系，也就是说，我们在位于不同的Operation Queue中的Operation之间设置依赖。 注意不要产生依赖循环。 在把operation添加到Operation Queue之前就需要配置好依赖，在添加后设置的依赖可能无效。 修改operation在队列中的优先级 Operation在队列中的执行顺序取决于isReady状态和队列优先级。 isReady受它所依赖的operation状态的影响，只有当依赖的所有operation都变为isFinished的时候，isReady状态才为true。 queuePriority只能作用与相同队列中的operation，并且队列优先级只有当isReady为true的时候，才会决定operation的执行顺序。 isReady为FALSE的时候，isReady为true的低队列优先级的operation也会先执行。 一个串行的 operation queue 与一个串行的 dispatch queue是一样的么？ 两者都是在同一时间内只能有一个任务被执行，但是在任务的执行顺序上是不同的： dispatch queue 的执行顺序一直是 FIFO 的 operation queue中的operation执行的顺序取决于isReady和queuePriority状态。 如何用GCD实现一个线程安全的单例？ ObjC Swift","categories":[{"name":"开发","slug":"开发","permalink":"https://coolzeng.com/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"https://coolzeng.com/tags/iOS/"},{"name":"多线程","slug":"多线程","permalink":"https://coolzeng.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"使用hexo+github page搭建个人博客","slug":"使用hexo-github-page搭建个人博客","date":"2016-11-12T06:36:16.000Z","updated":"2022-08-06T08:40:55.196Z","comments":true,"path":"posts/hexo_build/","permalink":"https://coolzeng.com/posts/hexo_build/","excerpt":"我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。 2018年2月18日更新：域名绑定和https 访问问题。","text":"我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。 2018年2月18日更新：域名绑定和https 访问问题。 首先简单介绍下github page和hexo： Github Page: 使用github repo的静态网页工具，可以无缝地与github一起使用，每个github帐号都有400M的免费空间来存放博客文件，具体的使用说明可以参看github page网站 hexo:一个node.js的框架，使用npm进行安装和配置，能够快速的搭建静态博客。主要特点是搭建快速、支持markdown编辑、一键部署、本地预览。 使用github page+hexo主要是考虑到能够快速搭建、维护方便、技术栈匹配。 下面来说具体的搭建步骤，这里使用MAC的开发环境： 配置github repo： 新建一个username.github.io的仓库，注意一定要使用自己的github用户名 设置ssh key：参见github ssh教程 这里需要说明的是：github page默认使用的是master分支，在master分支中的index.html文件会被解析并且作为网页的入口。 安装Hexo命令行工具hexo-cli 参考官方教程 安装git、Node.js等工具 安装hexo-cli命令行工具：npm install -g hexo-cli hexo-cli是hexo的命令行工具，用于执行hexo init Setup Hexo: 命令行为：hexo init 使用hexo的模板生成项目，下面几个文件比较重要： package.json: Node js用于指定依赖包的配置文件，在不清楚的情况下，不要随意修改。 _config.yml: hexo的配置文件，可以设置网站title、主题、字体、制定域名等。 source: Blog的源文件目录，使用hexo new生成的md文件存放在这个目录中。 scaffolds：模板文件，hexo new使用它来生成新的模板md。 themes：主题目录，设置网站版式。 写Blog： hexo new post_title：生成新的模板文件。 注意：这里使用hexo命令和上面的hexo init不是同一个命令，这个hexo是在setup过程中下载的npm包，需要在Blog这个目录中使用才有效。 生成的文件在source&#x2F;_post目录中，使用markdown编辑器来写博客。 本机调试： 在写blog的过程中，可以直接在本机进行预览：hexo serve 默认使用4000端口，还可以设置其他的端口 生成Blog文件： 生成编译后的blog：hexo generate 生成后的文件存放在public目录中 也可以使用下面的命令直接完成发布: hexo generate —deploy 发布blog： 使用hexo deploy完成发布 第一次发布之前，需要修改_config.yml文件，参见：hexo deploy 最后要说下Troubleshooting和需要注意的地方: hexo new不起作用 我们需要另外开一个branch来进行blog的写作（如source分支），然后使用hexo deploy到master分支上面。在不同的分支进行切换的时候，由于.gitignore文件不一样，导致我们可能在master分支上面删除了一些source分支上面重要的文件，如node_modules目录，则需要我们在切换到source分支的时候，重新下载npm包：npm i hexo deploy失败 需要安装hexo-deployer-git包，参考 hexo deploy master分支的使用方法 master分支上面不要放文件，这个分支在使用hexo deploy之后自动更新，所以会覆盖我们自己的文件。 使用source分支来进行写作 上面提高了不能使用master分支，那么就需要我们使用别的分支来进行hexo的搭建和写作，我个人使用source分支，当然你也可以取一个自己喜欢的名字。 — 2018年2月18日更新： 绑定域名：绑定域名主要分为3个步骤：申请域名、Github Page 设置域名、域名解析 申请域名 国内：万网、新网 国内域名申请有一些繁杂的手续和步骤，特别是域名备案。 国外：GoDaddy、namecheap、name、enom 国外的域名则相对操作简单很多，一般只需要提供联系方式即可，主要注意的是：Godaddy没有提供免费的域名信息保护功能，需要付费购买，否者别人可以通过 whois 查到域名持有者的信息。 设置 Github Page 的域名 Github Page提供域名比对的功能，只需要在网站的根目录中添加 CNAME（全部大写）文件，填写自己申请的域名（一般是顶级域名）即可，不需要带 https:&#x2F;&#x2F;（如 baidu.com，而不是 http://www.baidu.com），github page 会自动把 www的请求重定向到顶级域名下。 使用 hexo 搭建起来的博客，则是在 source 目录中，来添加 CNAME 文件，然后部署到 github 上面（命令行为 hexo d -g）。 域名解析 申请好的域名，一般由提供商来进行解析（把域名映射为 IP 地址），我们这里不适用 Godaddy 提供的域名解析（NameServer） 服务，而是使用 NDSPod 作为我们的域名解析商。 申请 NDSPod 账户 在 NDSPod 添加域名、添加 A&#x2F;CNAME 记录 A 记录 CNAME 记录 在 Godaddy 绑定 DNSPod的域名解析地址 wait a moment HTTPS问题： github page 的 ssl证书绑定的是 github.io 的域名。如果在 chrome 中使用 https 访问自定义的域名，会提示NET::ERR_CERT_COMMON_NAME_INVALID。 CloudFlare 来做域名解析，开启 ssl 为 Flexble 之后，可以让chrome和 CloudFlare 之间使用 https访问，而CloudFlare 与 github page 中继续使用 http 来访问。 参考文章：在GitHub Pages上使用CloudFlare https CDN","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://coolzeng.com/tags/hexo/"}]},{"title":"git常用手册","slug":"git常用手册","date":"2016-11-11T08:26:14.000Z","updated":"2022-08-06T08:40:55.195Z","comments":true,"path":"posts/git_manual/","permalink":"https://coolzeng.com/posts/git_manual/","excerpt":"Git 是每个开发童鞋必须掌握的工具，本文记录博主日常开发使用 git时，遇到的问题和常用的解决方法：","text":"Git 是每个开发童鞋必须掌握的工具，本文记录博主日常开发使用 git时，遇到的问题和常用的解决方法： No submodule mapping found in .gitmodules for path ‘Frameworks&#x2F;XXX’ 参考：http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule $git submodule $git rm ‘Frameworks&#x2F;XXX’ 检查非法的branch名字 A branch name can not: Have a path component that begins with “.” Have a double dot “..” Have an ASCII control character, “~”, “^”, “:” or SP, anywhere End with a “&#x2F;“ - End with “.lock” Contain a “&quot; (backslash 拉取其他分支代码到当前分支：Git pull rebase 当我们需要从别的分支上面拉取代码，并且希望被拉取的commit能够很好地rebase到当前分支,我们就需要用到pull rebase 示例：从develop拉取代码到当前分支： 确保本地分支代码和develop都已经push到origin git pull –rebase origin develop 把develop分支代码拉取到当前分支，此时会发现当前分支和develop分支代码并没有rebase,还是在两条不同的线上 拉取完成后会发现如下的一些提示： On branch feature&#x2F;music Your branch and ‘origin&#x2F;feature&#x2F;xxx’ have diverged, and have 9 and 6 different commits each, respectively. (use “git pull” to merge the remote branch into yours) nothing to commit, working directory clean git push -f 把本地分支和develop分支强行push到origin git push 会导致错误，因为使用pull rebase操作会生成两个不同的分支（Your branch and ‘origin&#x2F;feature&#x2F;music’ have diverged） Git分支管理策略 1.推荐阅读 《Git分支管理策略 - 阮一峰的网络日志》 git workflow: 1. 只需要保留master和develop分支。 2. 日常开发时，从develop上面开一个feature分支，完成开发后，按需merge到develop分支中，merge成功后，可以删除feature分支。 3. 发布前，使用release分支 4. 产品上线后，使用从master分支fork出hotfix分支，完成bug修复后，merge到master和develop分支。 Github pull request 《Mort | Pull Request的正确打开方式（如何在GitHub上贡献开源项目）》 – 原文404，可以参考转载 Github Repo Migration: Github fork repo Github import repo Git 修改commit message: git commit –amend -m “New commit message” 查找commit message: git log –oneline | grep PATTERN 多个github账号的管理： https://gist.github.com/jexchan/2351996 本人常年使用公司和个人的Github帐号，在正确配置github帐号后，可以用命令行进行帐号切换。 清除git缓存： 有的时候会出现.gitignore文件不起作用的情况，需要清理git缓存： $ git rm –cached -r FOLDER_NAME $ git add . $ git commit -m “COMMIT_MSG”","categories":[{"name":"开发","slug":"开发","permalink":"https://coolzeng.com/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"git","slug":"git","permalink":"https://coolzeng.com/tags/git/"}]}],"categories":[{"name":"AI","slug":"AI","permalink":"https://coolzeng.com/categories/AI/"},{"name":"开发","slug":"开发","permalink":"https://coolzeng.com/categories/%E5%BC%80%E5%8F%91/"},{"name":"分享","slug":"分享","permalink":"https://coolzeng.com/categories/%E5%88%86%E4%BA%AB/"},{"name":"ReactNative","slug":"开发/ReactNative","permalink":"https://coolzeng.com/categories/%E5%BC%80%E5%8F%91/ReactNative/"}],"tags":[{"name":"LLM, GPT","slug":"LLM-GPT","permalink":"https://coolzeng.com/tags/LLM-GPT/"},{"name":"网络编程","slug":"网络编程","permalink":"https://coolzeng.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"},{"name":"分享","slug":"分享","permalink":"https://coolzeng.com/tags/%E5%88%86%E4%BA%AB/"},{"name":"iOS","slug":"iOS","permalink":"https://coolzeng.com/tags/iOS/"},{"name":"ReactNative","slug":"ReactNative","permalink":"https://coolzeng.com/tags/ReactNative/"},{"name":"cocoapods","slug":"cocoapods","permalink":"https://coolzeng.com/tags/cocoapods/"},{"name":"多线程","slug":"多线程","permalink":"https://coolzeng.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"name":"hexo","slug":"hexo","permalink":"https://coolzeng.com/tags/hexo/"},{"name":"git","slug":"git","permalink":"https://coolzeng.com/tags/git/"}]}