{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"source/about/index/about.jpg","path":"about/index/about.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"66edeb7095877978bb2cb6244a8b141dcb8e54b0","modified":1540051158935},{"_id":"source/.DS_Store","hash":"6974ddb0953597b845d10c3aec9016f9ed161fbb","modified":1540126449517},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1540051159050},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1540051159051},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1540051159053},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1540051159053},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1540051159055},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1540051159054},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1540051159056},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1540051159056},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1540051159058},{"_id":"themes/next/_config.yml","hash":"90507cd2b50dd322603fcf7511948d5b8a74b873","modified":1540051159058},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1540051159059},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1540051159113},{"_id":"source/_posts/.DS_Store","hash":"4716ef55ae145fa26e4ff2108ee9274212490a00","modified":1540126475934},{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题.md","hash":"5249085a63fae17b087140091d9d4e6ff91b8998","modified":1540051158936},{"_id":"source/_posts/Swift-与-OC-混编小技巧.md","hash":"0a6d7e1133ca1cdabc48caa75b93e22a2fcc132e","modified":1540051158947},{"_id":"source/_posts/Xcode-10-beta-版本迁移指南.md","hash":"bf15ab31037e9a829c4601c8f792799b44bb1691","modified":1540051158978},{"_id":"source/_posts/Xcode问题锦集.md","hash":"bfd2b152f8fd9570cda7dec2c244f9a2e2a44170","modified":1540051158980},{"_id":"source/_posts/git常用手册.md","hash":"0906102755844d6d87ea894ee12cab70926574ef","modified":1540051158981},{"_id":"source/_posts/iOS-ReactNative私有库指南.md","hash":"2d015b4658b9f07b9ced2519cc1b55525af2990a","modified":1540134889909},{"_id":"source/_posts/iOS-网络安全之SSL-Pinning.md","hash":"5267eb17ac18e170cf7ffd06b7cd28a66a48bf1e","modified":1540051158997},{"_id":"source/_posts/iOS多线程开发笔记.md","hash":"8c9d65e1d12097b3dd4b5263b0e4b5f4cf556a1e","modified":1540051158998},{"_id":"source/_posts/使用hexo-github-page搭建个人博客.md","hash":"5ba387b1ff055eb50b6c6b81de2c6a42b134ea25","modified":1540051159000},{"_id":"source/_posts/最靠谱的『科学上网』方式-VPS-搭建SSR-服务端教程.md","hash":"284cc6fc1e02d8dde222c8834a1eb56062d29381","modified":1540051159001},{"_id":"source/about/index.md","hash":"6a54c6f47ff651bc00f3057c23bc5c05da5ebb30","modified":1540051159002},{"_id":"source/categories/index.md","hash":"baf6940fe06732c4ad01162e39f72ca1542cd76a","modified":1540051159011},{"_id":"source/tags/index.md","hash":"9213ab3eeb261e9474694b6890c3b0d7e91ba0ea","modified":1540051159012},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1540051159052},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1540051159052},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1540051159060},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1540051159061},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1540051159062},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1540051159063},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1540051159064},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1540051159065},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1540051159065},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1540051159066},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1540051159067},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1540051159067},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1540051159069},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1540051159070},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1540051159070},{"_id":"themes/next/layout/_layout.swig","hash":"7a1e4443c3ba1e08c20e64ddbf0b8255d034dab0","modified":1540051159073},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1540051159110},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1540051159108},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1540051159109},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1540051159110},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1540051159111},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1540051159112},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1540051159114},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1540051159112},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1540051159259},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1540051159257},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1540051159258},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540051159192},{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题/xcode编译脚本.png","hash":"a24f4bdddecb046cc52f00353f576fab3ec93a08","modified":1540051158945},{"_id":"source/_posts/Swift-与-OC-混编小技巧/1-2.jpg","hash":"1e1a40a332ff12b69aab3b6e3806dc175096ead7","modified":1540051158951},{"_id":"source/_posts/Swift-与-OC-混编小技巧/1-4.jpg","hash":"d284d21052e998fcd7131c8c80bd8ffbae6a04b8","modified":1540051158956},{"_id":"source/_posts/iOS-ReactNative私有库指南/Folly-error.png","hash":"e09723201336c810b50361e5ea9003a7fbf49cfc","modified":1540051158984},{"_id":"source/_posts/iOS-ReactNative私有库指南/schedule-error.png","hash":"e7299dbda9de438b10b08df73f6ae92d72f09bec","modified":1540051158985},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1540051159073},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1540051159074},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1540051159072},{"_id":"themes/next/layout/_macro/post.swig","hash":"f12f108c1f8e91cc55d49805d42c1fd96cdf51a6","modified":1540051159075},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1540051159076},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b8aaa008aafe4c6e325f7513719e1c251430883e","modified":1540051159076},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1540051159077},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1540051159078},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a3ef28678467c45ee9416b41b943252e8036285","modified":1540051159078},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1540051159082},{"_id":"themes/next/layout/_partials/header.swig","hash":"f3627f51810bc906e4020a3fef61bc3629b63581","modified":1540051159082},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1a43dde8c7bc53891be26b915a172b1f01e6bc26","modified":1540051159079},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1540051159080},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1540051159083},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1540051159084},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1540051159090},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1540051159090},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1540051159091},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1540051159108},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1540051159115},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1540051159115},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1540051159117},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1540051159118},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1540051159192},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1540051159193},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1540051159193},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1540051159194},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1540051159195},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1540051159195},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1540051159195},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1540051159196},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1540051159196},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1540051159196},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1540051159197},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1540051159197},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1540051159198},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1540051159197},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1540051159198},{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题/PR 代码.png","hash":"3c3856f9ed5da8f086261f5cbb7a334e8a8ceceb","modified":1540051158937},{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题/pod check失败.png","hash":"94361f3d548b22f394720b93b10028545e67d91d","modified":1540051158940},{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题/podfile.lock冲突.png","hash":"6cd42dfc40d0891669d91397bcdf634abf50a24a","modified":1540051158942},{"_id":"source/_posts/Swift-与-OC-混编小技巧/1-3.jpg","hash":"ab75eb468e151df45f1acba034d397ddc4e94201","modified":1540051158953},{"_id":"source/_posts/Swift-与-OC-混编小技巧/2-1.jpg","hash":"7e19fdf921806c0d7316b3805dea2f793966f048","modified":1540051158958},{"_id":"source/_posts/Swift-与-OC-混编小技巧/2-2.jpg","hash":"f9ed4e23edea49136a670a9e36a21b37c8f98f8d","modified":1540051158962},{"_id":"source/_posts/Swift-与-OC-混编小技巧/2-4.jpg","hash":"f5a6f1dee7100b615ee9c872783f5d9aec462796","modified":1540051158969},{"_id":"source/_posts/Swift-与-OC-混编小技巧/3-1.jpg","hash":"5094b32061cf3d2f061bc1e630601a84888f590a","modified":1540051158972},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540051159092},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540051159092},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540051159167},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540051159167},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540051159168},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540051159190},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540051159191},{"_id":"themes/next/source/images/avatar.png","hash":"906a4d55cb83de145bb3b93919f60fa1a23ad40e","modified":1540051159194},{"_id":"source/_posts/Swift-与-OC-混编小技巧/1-1.jpg","hash":"fba535825c73786818367e57db00728f880d93dc","modified":1540051158950},{"_id":"source/_posts/Swift-与-OC-混编小技巧/2-3.jpg","hash":"2446606321acdb002199b8c58a86ad9d770cf933","modified":1540051158965},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1540051159071},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1540051159072},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1540051159080},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1540051159081},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1540051159084},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1540051159085},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1540051159086},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1540051159087},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1540051159087},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1540051159088},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1540051159089},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1540051159092},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1540051159093},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1540051159094},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"82a2ac14d4200480a36bf10abcc3cc554ad744d6","modified":1540051159100},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1540051159104},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1540051159104},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1540051159105},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1540051159106},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1540051159107},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1540051159166},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1540051159168},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1540051159168},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1540051159189},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c5b28519b446c2af1e8754a6ae4d766823e6b348","modified":1540051159190},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3f0d6aa424f434e82ea507f740eeff110f996269","modified":1540051159191},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1540051159198},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1540051159199},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1540051159199},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1540051159199},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1540051159200},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1540051159200},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1540051159200},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1540051159201},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1540051159201},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1540051159215},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1540051159215},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1540051159216},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1540051159216},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1540051159219},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1540051159219},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1540051159220},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1540051159221},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1540051159221},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1540051159241},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1540051159245},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1540051159245},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1540051159246},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1540051159247},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1540051159248},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1540051159251},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1540051159250},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1540051159248},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1540051159256},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1540051159257},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1540051159256},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1540051159242},{"_id":"source/_posts/Swift-与-OC-混编小技巧/3-2.jpg","hash":"83c3d92a3b50ccad2194a9e83406cda073c1e882","modified":1540051158977},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1540051159095},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1540051159095},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1540051159096},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1540051159097},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1540051159098},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1540051159098},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1540051159099},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1540051159101},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1540051159101},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1540051159103},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1540051159119},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1540051159120},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1540051159121},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1540051159120},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1540051159136},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1540051159152},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1540051159161},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1540051159162},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1540051159163},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1540051159165},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1540051159164},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1540051159166},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1540051159169},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1540051159170},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1540051159171},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1540051159172},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1540051159175},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1540051159176},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1540051159176},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1540051159180},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1540051159181},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1540051159181},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1540051159182},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1540051159183},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1540051159184},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1540051159185},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"7b206cd8921bc042f8e37a74aea1abc8a5ec8ab4","modified":1540051159186},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1540051159186},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1540051159187},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1540051159188},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1540051159188},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1540051159200},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1540051159206},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1540051159206},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1540051159207},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1540051159207},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1540051159207},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1540051159208},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1540051159210},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1540051159211},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1540051159212},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1540051159218},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1540051159217},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1540051159222},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1540051159222},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1540051159223},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1540051159248},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1540051159249},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1540051159229},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1540051159226},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1540051159252},{"_id":"source/about/index/about.jpg","hash":"c9eee5ba90690376767a38d8d7586aa392bee2a0","modified":1540051159008},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1540051159240},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1540051159239},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1540051159124},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1540051159124},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1540051159126},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1540051159122},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1540051159126},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1540051159127},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1540051159129},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1540051159128},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1540051159130},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1540051159131},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1540051159132},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1540051159131},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1540051159135},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1540051159132},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1540051159139},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1540051159139},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1540051159138},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"5357db10656b260f8b332c67bb06e486bc64a4ad","modified":1540051159140},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1540051159141},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1540051159140},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1540051159142},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1540051159142},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1540051159143},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1540051159143},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1540051159144},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1540051159145},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1540051159146},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1540051159146},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1540051159147},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1540051159148},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1540051159149},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1540051159148},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1540051159150},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1540051159150},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1540051159151},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1540051159152},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1540051159153},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1540051159154},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1540051159154},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1540051159155},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1540051159157},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1540051159156},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1540051159157},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1540051159158},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1540051159159},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"5433b6bc9d8f0c4685e760b326445ac51245b0a8","modified":1540051159161},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1540051159160},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1540051159177},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1540051159178},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1540051159183},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1540051159208},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1540051159208},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1540051159209},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1540051159209},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1540051159210},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1540051159210},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1540051159235},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1540051159205},{"_id":"source/_posts/iOS-ReactNative私有库指南/sourcetree.png","hash":"36ce36d2c2f1f3ade3fe9ad70b054fc0655da9a8","modified":1540051158993},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1540051159233}],"Category":[{"name":"开发","_id":"cjnj0jygp0004kxu0raz1mo2b"},{"name":"ReactNative","parent":"cjnj0jygp0004kxu0raz1mo2b","_id":"cjnj0jyh8000mkxu0eg8l9dxv"}],"Data":[],"Page":[{"title":"简介","date":"2017-08-12T14:04:39.000Z","_content":"\n## [Who am I]{% asset_img about.jpg %}\n\n曾浩，男，90后，iOS开发攻城狮，目前就职于[深圳真时科技](http://pacewear.cn/)，担任 iOS 团队 Leader，负责Pacewear 智能手表 iOS App开发和团队管理工作。\n\n老东家有：\n\n- [Misfit](http://www.misfit.com/) - 来自硅谷的智能硬件创业公司，于2015年被 Fossil Group 以2.6亿美金收购。\n- [VTech](http://www.vtech.com/) - 香港最大的电子儿童玩具和电话设备制造商。\n\n主要作品有：\n\n- [Misfit Home App](https://itunes.apple.com/us/app/misfit-home/id965264934?mt=8) - Misfit 智能灯泡 BOLT iOS App\n- [Misfit App](https://itunes.apple.com/us/app/misfit/id564157241?mt=8) - Misfit 智能手环 iOS App\n- [Learning Lodge](http://www.vtechda.com/downloadpage/) - 儿童学习系统客户端(C/S 架构，支持 PC 和 MAC 双平台)\n\n欢迎关注我的微博：@[貉子的微博](http://weibo.com/zenghao0708)和我的 [Github](https://www.github.com/zenghao0708)\n\n","source":"about/index.md","raw":"---\ntitle: 简介\ndate: 2017-08-12 22:04:39\n---\n\n## [Who am I]{% asset_img about.jpg %}\n\n曾浩，男，90后，iOS开发攻城狮，目前就职于[深圳真时科技](http://pacewear.cn/)，担任 iOS 团队 Leader，负责Pacewear 智能手表 iOS App开发和团队管理工作。\n\n老东家有：\n\n- [Misfit](http://www.misfit.com/) - 来自硅谷的智能硬件创业公司，于2015年被 Fossil Group 以2.6亿美金收购。\n- [VTech](http://www.vtech.com/) - 香港最大的电子儿童玩具和电话设备制造商。\n\n主要作品有：\n\n- [Misfit Home App](https://itunes.apple.com/us/app/misfit-home/id965264934?mt=8) - Misfit 智能灯泡 BOLT iOS App\n- [Misfit App](https://itunes.apple.com/us/app/misfit/id564157241?mt=8) - Misfit 智能手环 iOS App\n- [Learning Lodge](http://www.vtechda.com/downloadpage/) - 儿童学习系统客户端(C/S 架构，支持 PC 和 MAC 双平台)\n\n欢迎关注我的微博：@[貉子的微博](http://weibo.com/zenghao0708)和我的 [Github](https://www.github.com/zenghao0708)\n\n","updated":"2018-10-20T15:59:19.002Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjnj0jygl0001kxu03vhsjy7h","content":"<h2 id=\"Who-am-I\"><a href=\"#Who-am-I\" class=\"headerlink\" title=\"[Who am I]\"></a>[Who am I]</h2><p>曾浩，男，90后，iOS开发攻城狮，目前就职于<a href=\"http://pacewear.cn/\" target=\"_blank\" rel=\"noopener\">深圳真时科技</a>，担任 iOS 团队 Leader，负责Pacewear 智能手表 iOS App开发和团队管理工作。</p>\n<p>老东家有：</p>\n<ul>\n<li><a href=\"http://www.misfit.com/\" target=\"_blank\" rel=\"noopener\">Misfit</a> - 来自硅谷的智能硬件创业公司，于2015年被 Fossil Group 以2.6亿美金收购。</li>\n<li><a href=\"http://www.vtech.com/\" target=\"_blank\" rel=\"noopener\">VTech</a> - 香港最大的电子儿童玩具和电话设备制造商。</li>\n</ul>\n<p>主要作品有：</p>\n<ul>\n<li><a href=\"https://itunes.apple.com/us/app/misfit-home/id965264934?mt=8\" target=\"_blank\" rel=\"noopener\">Misfit Home App</a> - Misfit 智能灯泡 BOLT iOS App</li>\n<li><a href=\"https://itunes.apple.com/us/app/misfit/id564157241?mt=8\" target=\"_blank\" rel=\"noopener\">Misfit App</a> - Misfit 智能手环 iOS App</li>\n<li><a href=\"http://www.vtechda.com/downloadpage/\" target=\"_blank\" rel=\"noopener\">Learning Lodge</a> - 儿童学习系统客户端(C/S 架构，支持 PC 和 MAC 双平台)</li>\n</ul>\n<p>欢迎关注我的微博：@<a href=\"http://weibo.com/zenghao0708\" target=\"_blank\" rel=\"noopener\">貉子的微博</a>和我的 <a href=\"https://www.github.com/zenghao0708\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Who-am-I\"><a href=\"#Who-am-I\" class=\"headerlink\" title=\"[Who am I]\"></a>[Who am I]</h2><p>曾浩，男，90后，iOS开发攻城狮，目前就职于<a href=\"http://pacewear.cn/\" target=\"_blank\" rel=\"noopener\">深圳真时科技</a>，担任 iOS 团队 Leader，负责Pacewear 智能手表 iOS App开发和团队管理工作。</p>\n<p>老东家有：</p>\n<ul>\n<li><a href=\"http://www.misfit.com/\" target=\"_blank\" rel=\"noopener\">Misfit</a> - 来自硅谷的智能硬件创业公司，于2015年被 Fossil Group 以2.6亿美金收购。</li>\n<li><a href=\"http://www.vtech.com/\" target=\"_blank\" rel=\"noopener\">VTech</a> - 香港最大的电子儿童玩具和电话设备制造商。</li>\n</ul>\n<p>主要作品有：</p>\n<ul>\n<li><a href=\"https://itunes.apple.com/us/app/misfit-home/id965264934?mt=8\" target=\"_blank\" rel=\"noopener\">Misfit Home App</a> - Misfit 智能灯泡 BOLT iOS App</li>\n<li><a href=\"https://itunes.apple.com/us/app/misfit/id564157241?mt=8\" target=\"_blank\" rel=\"noopener\">Misfit App</a> - Misfit 智能手环 iOS App</li>\n<li><a href=\"http://www.vtechda.com/downloadpage/\" target=\"_blank\" rel=\"noopener\">Learning Lodge</a> - 儿童学习系统客户端(C/S 架构，支持 PC 和 MAC 双平台)</li>\n</ul>\n<p>欢迎关注我的微博：@<a href=\"http://weibo.com/zenghao0708\" target=\"_blank\" rel=\"noopener\">貉子的微博</a>和我的 <a href=\"https://www.github.com/zenghao0708\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n"},{"title":"categories","date":"2017-08-12T14:59:23.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-08-12 22:59:23\ntype: \"categories\"\n---\n","updated":"2018-10-20T15:59:19.011Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjnj0jygo0003kxu0ovq9r766","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2016-11-16T08:21:04.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-16 16:21:04\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-10-20T15:59:19.012Z","path":"tags/index.html","layout":"page","_id":"cjnj0jym4001ckxu0eu2os1ht","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Cocoapods采坑记 - Podfile.lock 冲突问题","date":"2018-01-10T14:00:43.000Z","_content":"\n## **故事的开端是这样的：**\n\n我们的项目中使用了[FBRetainCycleDetector](https://github.com/facebook/FBRetainCycleDetector)这个第三方库来检查内存泄露，在升级到某一个版本后，出现部分同事的 podfile.lock中FBRetainCycleDetector的checksum 值不一致，每次都需要运行 pod install 来更新 podfile.lock,然后git push 到仓库。其他的同事又出现 podfile.lock 冲突，需要运行 pod install 更新，然后push到 git 仓库。\n\n<!-- more -->\n\n喜剧上演多次后，我们采取少数服从多数的原则，让出现冲突的同事git push 的时候手动去掉 podfile.lock。\n\npodfile.lock冲突{% asset_img podfile.lock冲突.png %}\n\n## **Podfile.lock 不一致的原因：**\n\n**Podfile.lock和Manifest.lock：**\n\n- 项目中集成 cocoapods 的时候，运行 pod install 后，项目根目录中会生成Podfile.lock，而Pods目录中会有Manifest.lock。\n- Xcode 编译项目的时候，会执行 Build Phases 中的[CP] Check Pods Manifest.lock 脚本，这个脚本会比对Podfile.lock和Manifest.lock，**如果两个文件不相同就会报错**。\n\nxcode编译脚本{% asset_img xcode编译脚本.png %}\n\npod check失败{% asset_img \"pod check失败.png\" %}\n\n**Podfile.lock是什么：**\n\n- Podfile.lock 文件主要包含三个块：PODS、DEPENDENCIES、SPEC CHECKSUMS，用来记录每个pod的版本号、依赖的其他库和每个库对应的podspec.json文件的 checksum(SHA-1算法)。通过这些信息可以确保多人协作的时候，大家使用的是相同版本的第三方库。\n\n在我们的项目中遇到的是 podfile.lock 中 checksum 部分的冲突，其实就是由于FBRetainCycleDetector.podspec.json文件的checksum不一致。\n\n通过对比了有冲突的同事 mac 中生产的FBRetainCycleDetector.podspec.json文件，发现主要是repuires_arc 字段中的文件列表顺序不同。\n\n------\n\n在找到问题产生的原因后，就着手解决问题：\n\n一开始怀疑是MAC的 locale 不同导致文件的排序不一致，因为之前使用翻译脚本来做文件排序的时候，也出现过类似的问题。\n\n```shell\nsystem(\"LANG=zh_CN.utf-8 sort $tmpFileOut | uniq >> $fileNameOut”);\n```\n\n但是在设置了 locale环境变量之后，问题还是没有解决。\n\n前两天，在FBRetainCycleDetector的 issues 列表中，发现也有人遇到了[相同的问题](https://github.com/facebook/FBRetainCycleDetector/issues/52)，更加可喜的是，这个小伙子提了一个 [PR](https://github.com/facebook/FBRetainCycleDetector/pull/53/files) 修复了这个问题，其实只有一行代码：\n\nPR 代码{% asset_img \"PR 代码.png\" %}\n\n## **问题是如何解决的：**\n\n在运行 pod install 后，生成FBRetainCycleDetector.podspec.json文件中， repuires_arc字段是需要设置-fno-objc-arc的文件列表，但是不知道某种原因，出现文件路径排序在不同电脑上不同，从而导致最后FBRetainCycleDetector.podspec.json的CHECKSUMS(SHA-1) 值不一致。\n\n**使用 sort 方法后，解决了文件排序问题。Cheers!** \n\n参考资料：\n\n- <http://guides.cocoapods.org/making/specs-and-specs-repo.html>\n- <http://guides.cocoapods.org/syntax/podspec.html>\n- [cocopods在更新过程中产生Podfile.lock 和 Manifest.lock: No such file or directory](https://www.jianshu.com/p/9285be04310c)","source":"_posts/Cocoapods采坑记-Podfile-lock-冲突问题.md","raw":"---\ntitle: Cocoapods采坑记 - Podfile.lock 冲突问题\ndate: 2018-01-10 22:00:43\ncategories: 开发\ntags:\n  - iOS\n  - cocoapods\n---\n\n## **故事的开端是这样的：**\n\n我们的项目中使用了[FBRetainCycleDetector](https://github.com/facebook/FBRetainCycleDetector)这个第三方库来检查内存泄露，在升级到某一个版本后，出现部分同事的 podfile.lock中FBRetainCycleDetector的checksum 值不一致，每次都需要运行 pod install 来更新 podfile.lock,然后git push 到仓库。其他的同事又出现 podfile.lock 冲突，需要运行 pod install 更新，然后push到 git 仓库。\n\n<!-- more -->\n\n喜剧上演多次后，我们采取少数服从多数的原则，让出现冲突的同事git push 的时候手动去掉 podfile.lock。\n\npodfile.lock冲突{% asset_img podfile.lock冲突.png %}\n\n## **Podfile.lock 不一致的原因：**\n\n**Podfile.lock和Manifest.lock：**\n\n- 项目中集成 cocoapods 的时候，运行 pod install 后，项目根目录中会生成Podfile.lock，而Pods目录中会有Manifest.lock。\n- Xcode 编译项目的时候，会执行 Build Phases 中的[CP] Check Pods Manifest.lock 脚本，这个脚本会比对Podfile.lock和Manifest.lock，**如果两个文件不相同就会报错**。\n\nxcode编译脚本{% asset_img xcode编译脚本.png %}\n\npod check失败{% asset_img \"pod check失败.png\" %}\n\n**Podfile.lock是什么：**\n\n- Podfile.lock 文件主要包含三个块：PODS、DEPENDENCIES、SPEC CHECKSUMS，用来记录每个pod的版本号、依赖的其他库和每个库对应的podspec.json文件的 checksum(SHA-1算法)。通过这些信息可以确保多人协作的时候，大家使用的是相同版本的第三方库。\n\n在我们的项目中遇到的是 podfile.lock 中 checksum 部分的冲突，其实就是由于FBRetainCycleDetector.podspec.json文件的checksum不一致。\n\n通过对比了有冲突的同事 mac 中生产的FBRetainCycleDetector.podspec.json文件，发现主要是repuires_arc 字段中的文件列表顺序不同。\n\n------\n\n在找到问题产生的原因后，就着手解决问题：\n\n一开始怀疑是MAC的 locale 不同导致文件的排序不一致，因为之前使用翻译脚本来做文件排序的时候，也出现过类似的问题。\n\n```shell\nsystem(\"LANG=zh_CN.utf-8 sort $tmpFileOut | uniq >> $fileNameOut”);\n```\n\n但是在设置了 locale环境变量之后，问题还是没有解决。\n\n前两天，在FBRetainCycleDetector的 issues 列表中，发现也有人遇到了[相同的问题](https://github.com/facebook/FBRetainCycleDetector/issues/52)，更加可喜的是，这个小伙子提了一个 [PR](https://github.com/facebook/FBRetainCycleDetector/pull/53/files) 修复了这个问题，其实只有一行代码：\n\nPR 代码{% asset_img \"PR 代码.png\" %}\n\n## **问题是如何解决的：**\n\n在运行 pod install 后，生成FBRetainCycleDetector.podspec.json文件中， repuires_arc字段是需要设置-fno-objc-arc的文件列表，但是不知道某种原因，出现文件路径排序在不同电脑上不同，从而导致最后FBRetainCycleDetector.podspec.json的CHECKSUMS(SHA-1) 值不一致。\n\n**使用 sort 方法后，解决了文件排序问题。Cheers!** \n\n参考资料：\n\n- <http://guides.cocoapods.org/making/specs-and-specs-repo.html>\n- <http://guides.cocoapods.org/syntax/podspec.html>\n- [cocopods在更新过程中产生Podfile.lock 和 Manifest.lock: No such file or directory](https://www.jianshu.com/p/9285be04310c)","slug":"Cocoapods采坑记-Podfile-lock-冲突问题","published":1,"updated":"2018-10-20T15:59:18.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnj0jygg0000kxu0ped3sxun","content":"<h2 id=\"故事的开端是这样的：\"><a href=\"#故事的开端是这样的：\" class=\"headerlink\" title=\"故事的开端是这样的：\"></a><strong>故事的开端是这样的：</strong></h2><p>我们的项目中使用了<a href=\"https://github.com/facebook/FBRetainCycleDetector\" target=\"_blank\" rel=\"noopener\">FBRetainCycleDetector</a>这个第三方库来检查内存泄露，在升级到某一个版本后，出现部分同事的 podfile.lock中FBRetainCycleDetector的checksum 值不一致，每次都需要运行 pod install 来更新 podfile.lock,然后git push 到仓库。其他的同事又出现 podfile.lock 冲突，需要运行 pod install 更新，然后push到 git 仓库。</p>\n<a id=\"more\"></a>\n<p>喜剧上演多次后，我们采取少数服从多数的原则，让出现冲突的同事git push 的时候手动去掉 podfile.lock。</p>\n<p>podfile.lock冲突<img src=\"/2018/01/10/Cocoapods采坑记-Podfile-lock-冲突问题/podfile.lock冲突.png\"></p>\n<h2 id=\"Podfile-lock-不一致的原因：\"><a href=\"#Podfile-lock-不一致的原因：\" class=\"headerlink\" title=\"Podfile.lock 不一致的原因：\"></a><strong>Podfile.lock 不一致的原因：</strong></h2><p><strong>Podfile.lock和Manifest.lock：</strong></p>\n<ul>\n<li>项目中集成 cocoapods 的时候，运行 pod install 后，项目根目录中会生成Podfile.lock，而Pods目录中会有Manifest.lock。</li>\n<li>Xcode 编译项目的时候，会执行 Build Phases 中的[CP] Check Pods Manifest.lock 脚本，这个脚本会比对Podfile.lock和Manifest.lock，<strong>如果两个文件不相同就会报错</strong>。</li>\n</ul>\n<p>xcode编译脚本<img src=\"/2018/01/10/Cocoapods采坑记-Podfile-lock-冲突问题/xcode编译脚本.png\"></p>\n<p>pod check失败<img src=\"/2018/01/10/Cocoapods采坑记-Podfile-lock-冲突问题/pod%20check失败.png\"></p>\n<p><strong>Podfile.lock是什么：</strong></p>\n<ul>\n<li>Podfile.lock 文件主要包含三个块：PODS、DEPENDENCIES、SPEC CHECKSUMS，用来记录每个pod的版本号、依赖的其他库和每个库对应的podspec.json文件的 checksum(SHA-1算法)。通过这些信息可以确保多人协作的时候，大家使用的是相同版本的第三方库。</li>\n</ul>\n<p>在我们的项目中遇到的是 podfile.lock 中 checksum 部分的冲突，其实就是由于FBRetainCycleDetector.podspec.json文件的checksum不一致。</p>\n<p>通过对比了有冲突的同事 mac 中生产的FBRetainCycleDetector.podspec.json文件，发现主要是repuires_arc 字段中的文件列表顺序不同。</p>\n<hr>\n<p>在找到问题产生的原因后，就着手解决问题：</p>\n<p>一开始怀疑是MAC的 locale 不同导致文件的排序不一致，因为之前使用翻译脚本来做文件排序的时候，也出现过类似的问题。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">system(\"LANG=zh_CN.utf-8 sort $tmpFileOut | uniq &gt;&gt; $fileNameOut”);</span><br></pre></td></tr></table></figure>\n<p>但是在设置了 locale环境变量之后，问题还是没有解决。</p>\n<p>前两天，在FBRetainCycleDetector的 issues 列表中，发现也有人遇到了<a href=\"https://github.com/facebook/FBRetainCycleDetector/issues/52\" target=\"_blank\" rel=\"noopener\">相同的问题</a>，更加可喜的是，这个小伙子提了一个 <a href=\"https://github.com/facebook/FBRetainCycleDetector/pull/53/files\" target=\"_blank\" rel=\"noopener\">PR</a> 修复了这个问题，其实只有一行代码：</p>\n<p>PR 代码<img src=\"/2018/01/10/Cocoapods采坑记-Podfile-lock-冲突问题/PR%20代码.png\"></p>\n<h2 id=\"问题是如何解决的：\"><a href=\"#问题是如何解决的：\" class=\"headerlink\" title=\"问题是如何解决的：\"></a><strong>问题是如何解决的：</strong></h2><p>在运行 pod install 后，生成FBRetainCycleDetector.podspec.json文件中， repuires_arc字段是需要设置-fno-objc-arc的文件列表，但是不知道某种原因，出现文件路径排序在不同电脑上不同，从而导致最后FBRetainCycleDetector.podspec.json的CHECKSUMS(SHA-1) 值不一致。</p>\n<p><strong>使用 sort 方法后，解决了文件排序问题。Cheers!</strong> </p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"http://guides.cocoapods.org/making/specs-and-specs-repo.html\" target=\"_blank\" rel=\"noopener\">http://guides.cocoapods.org/making/specs-and-specs-repo.html</a></li>\n<li><a href=\"http://guides.cocoapods.org/syntax/podspec.html\" target=\"_blank\" rel=\"noopener\">http://guides.cocoapods.org/syntax/podspec.html</a></li>\n<li><a href=\"https://www.jianshu.com/p/9285be04310c\" target=\"_blank\" rel=\"noopener\">cocopods在更新过程中产生Podfile.lock 和 Manifest.lock: No such file or directory</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"故事的开端是这样的：\"><a href=\"#故事的开端是这样的：\" class=\"headerlink\" title=\"故事的开端是这样的：\"></a><strong>故事的开端是这样的：</strong></h2><p>我们的项目中使用了<a href=\"https://github.com/facebook/FBRetainCycleDetector\" target=\"_blank\" rel=\"noopener\">FBRetainCycleDetector</a>这个第三方库来检查内存泄露，在升级到某一个版本后，出现部分同事的 podfile.lock中FBRetainCycleDetector的checksum 值不一致，每次都需要运行 pod install 来更新 podfile.lock,然后git push 到仓库。其他的同事又出现 podfile.lock 冲突，需要运行 pod install 更新，然后push到 git 仓库。</p>","more":"<p>喜剧上演多次后，我们采取少数服从多数的原则，让出现冲突的同事git push 的时候手动去掉 podfile.lock。</p>\n<p>podfile.lock冲突<img src=\"/2018/01/10/Cocoapods采坑记-Podfile-lock-冲突问题/podfile.lock冲突.png\"></p>\n<h2 id=\"Podfile-lock-不一致的原因：\"><a href=\"#Podfile-lock-不一致的原因：\" class=\"headerlink\" title=\"Podfile.lock 不一致的原因：\"></a><strong>Podfile.lock 不一致的原因：</strong></h2><p><strong>Podfile.lock和Manifest.lock：</strong></p>\n<ul>\n<li>项目中集成 cocoapods 的时候，运行 pod install 后，项目根目录中会生成Podfile.lock，而Pods目录中会有Manifest.lock。</li>\n<li>Xcode 编译项目的时候，会执行 Build Phases 中的[CP] Check Pods Manifest.lock 脚本，这个脚本会比对Podfile.lock和Manifest.lock，<strong>如果两个文件不相同就会报错</strong>。</li>\n</ul>\n<p>xcode编译脚本<img src=\"/2018/01/10/Cocoapods采坑记-Podfile-lock-冲突问题/xcode编译脚本.png\"></p>\n<p>pod check失败<img src=\"/2018/01/10/Cocoapods采坑记-Podfile-lock-冲突问题/pod%20check失败.png\"></p>\n<p><strong>Podfile.lock是什么：</strong></p>\n<ul>\n<li>Podfile.lock 文件主要包含三个块：PODS、DEPENDENCIES、SPEC CHECKSUMS，用来记录每个pod的版本号、依赖的其他库和每个库对应的podspec.json文件的 checksum(SHA-1算法)。通过这些信息可以确保多人协作的时候，大家使用的是相同版本的第三方库。</li>\n</ul>\n<p>在我们的项目中遇到的是 podfile.lock 中 checksum 部分的冲突，其实就是由于FBRetainCycleDetector.podspec.json文件的checksum不一致。</p>\n<p>通过对比了有冲突的同事 mac 中生产的FBRetainCycleDetector.podspec.json文件，发现主要是repuires_arc 字段中的文件列表顺序不同。</p>\n<hr>\n<p>在找到问题产生的原因后，就着手解决问题：</p>\n<p>一开始怀疑是MAC的 locale 不同导致文件的排序不一致，因为之前使用翻译脚本来做文件排序的时候，也出现过类似的问题。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">system(\"LANG=zh_CN.utf-8 sort $tmpFileOut | uniq &gt;&gt; $fileNameOut”);</span><br></pre></td></tr></table></figure>\n<p>但是在设置了 locale环境变量之后，问题还是没有解决。</p>\n<p>前两天，在FBRetainCycleDetector的 issues 列表中，发现也有人遇到了<a href=\"https://github.com/facebook/FBRetainCycleDetector/issues/52\" target=\"_blank\" rel=\"noopener\">相同的问题</a>，更加可喜的是，这个小伙子提了一个 <a href=\"https://github.com/facebook/FBRetainCycleDetector/pull/53/files\" target=\"_blank\" rel=\"noopener\">PR</a> 修复了这个问题，其实只有一行代码：</p>\n<p>PR 代码<img src=\"/2018/01/10/Cocoapods采坑记-Podfile-lock-冲突问题/PR%20代码.png\"></p>\n<h2 id=\"问题是如何解决的：\"><a href=\"#问题是如何解决的：\" class=\"headerlink\" title=\"问题是如何解决的：\"></a><strong>问题是如何解决的：</strong></h2><p>在运行 pod install 后，生成FBRetainCycleDetector.podspec.json文件中， repuires_arc字段是需要设置-fno-objc-arc的文件列表，但是不知道某种原因，出现文件路径排序在不同电脑上不同，从而导致最后FBRetainCycleDetector.podspec.json的CHECKSUMS(SHA-1) 值不一致。</p>\n<p><strong>使用 sort 方法后，解决了文件排序问题。Cheers!</strong> </p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"http://guides.cocoapods.org/making/specs-and-specs-repo.html\" target=\"_blank\" rel=\"noopener\">http://guides.cocoapods.org/making/specs-and-specs-repo.html</a></li>\n<li><a href=\"http://guides.cocoapods.org/syntax/podspec.html\" target=\"_blank\" rel=\"noopener\">http://guides.cocoapods.org/syntax/podspec.html</a></li>\n<li><a href=\"https://www.jianshu.com/p/9285be04310c\" target=\"_blank\" rel=\"noopener\">cocopods在更新过程中产生Podfile.lock 和 Manifest.lock: No such file or directory</a></li>\n</ul>"},{"title":"Swift 与 OC 混编小技巧","date":"2017-01-07T14:43:35.000Z","_content":"\nSwift 与 OC交织在一起缠绵的爱情故事，在接下来的几年里将伴随着 iOS 开发人员，下面我们起来看看他们的恩怨纠葛。\n\n<!-- more -->\n\n**Swift 和ObjC混编：**\n\n- **[Apple的文档](https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216-CH2-ID0)**\n\n- **Swift中调用OC：**\n\n  - 在 Swift 中调用 OC 的代码时，需要使用到 bridging header 文件来把 OC 的类暴露给 swift\n\n  - 手动添加 bridging header 的步骤，直接把 finder 中的代码文件夹拖拽到 xcode 中:\n\n    [图1-1]{% asset_img 1-1.jpg %}\n\n    如上图，需要选中“**Create groups**”，这样就可以在 xcode代码浏览目录中添加一个 group\n\n    图1-2 {% asset_img 1-2.jpg %}\n\n    但是，这样的操作不会让 Xcode 自动为我们创建 bridging header 文件，需要手动在 Xcode 中**添加 header 文件**，这里要注意命名规范，必须是“ModuleName-Bridging-Header.h”，然后设置**编译选项**\n\n    图1-3{% asset_img 1-3.jpg %}\n\n    图1-4{% asset_img 1-4.jpg %}\n\n  - **自动添加bridging header 的步骤**\n\n    - 其实 xcode 可以自动添加桥接头文件，只是需要我们在刚开始的时候，**拖拽一个 OC 的源文件**(包含.h 和.m 文件)，而不是拖拽整个源代码的目录到 xcode 中\n\n      图2-1{% asset_img 2-1.jpg %}\n\n      图2-2{% asset_img 2-2.jpg %}\n\n    - 下面是拖拽 OC 源代码后的项目浏览结构，xcode自动创建一个 ModuleName-Bridging-Header.h 的头文件，并且设置好了编译选项：\n\n      图2-3{% asset_img 2-3.jpg %}\n\n      图2-4{% asset_img 2-4.jpg %}\n\n- OC中调用Swift：**\n\n  - OC来调用 Swift 的时候，需要依赖一个 Swift **默认提供**的“ModuleName-swift.h”文件，这个文件是隐藏的，**不需要也不能够由开发者来提供**，但是可以使用\\#include包含到 OC 代码中，这个 OC头文件中可以看到 swift 类、结构体、常量的定义。\n\n    图3-1{% asset_img 3-1.jpg %}\n\n    图3-2{% asset_img 3-2.jpg %}\n\n  - 需要注意的是，只有**继承自 NSObject 的swift类才能被 OC 调用**，在 swift.h 文件中是看不到纯 swift类的定义。\n\n- **Swift使用OC中的宏**\n\n  - 可以参考[这个提问](http://stackoverflow.com/questions/24325477/how-to-use-a-objective-c-define-from-swift)\n  - 有哪些问题：\n    - Swift 只能使用OC 中常量的宏定义，如\n      - \\#define MAX_WIDTH  100\n      - \\#define Name_KeyPath @“Name_KeyPath”\n    - 而不同使用函数调用的宏，如\n      - \\#define SCREEN_WIDTH  [[[UIScreen mainScreen] bounds] width]\n      - \\#define DBQuerySuccess YES\n  - 解决方法：\n    - 在 OC 文件中创建一个Constant类，使用类方法(screenWidth)来包装现有的宏定义\n\n- **@objc 关键字的作用**\n\n  - 当 swift 中要使用 OC 的一些特性的时候，如 runtime，@objc 关键字用来 提供这个功能。\n\n- 源代码\n\n  - 具体的使用，可以参见 Github上的[代码](https://github.com/zenghao0708/SwiftOCMixing)","source":"_posts/Swift-与-OC-混编小技巧.md","raw":"---\ntitle: Swift 与 OC 混编小技巧\ndate: 2017-01-07 22:43:35\ntags: iOS\ncategories: 开发\n---\n\nSwift 与 OC交织在一起缠绵的爱情故事，在接下来的几年里将伴随着 iOS 开发人员，下面我们起来看看他们的恩怨纠葛。\n\n<!-- more -->\n\n**Swift 和ObjC混编：**\n\n- **[Apple的文档](https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216-CH2-ID0)**\n\n- **Swift中调用OC：**\n\n  - 在 Swift 中调用 OC 的代码时，需要使用到 bridging header 文件来把 OC 的类暴露给 swift\n\n  - 手动添加 bridging header 的步骤，直接把 finder 中的代码文件夹拖拽到 xcode 中:\n\n    [图1-1]{% asset_img 1-1.jpg %}\n\n    如上图，需要选中“**Create groups**”，这样就可以在 xcode代码浏览目录中添加一个 group\n\n    图1-2 {% asset_img 1-2.jpg %}\n\n    但是，这样的操作不会让 Xcode 自动为我们创建 bridging header 文件，需要手动在 Xcode 中**添加 header 文件**，这里要注意命名规范，必须是“ModuleName-Bridging-Header.h”，然后设置**编译选项**\n\n    图1-3{% asset_img 1-3.jpg %}\n\n    图1-4{% asset_img 1-4.jpg %}\n\n  - **自动添加bridging header 的步骤**\n\n    - 其实 xcode 可以自动添加桥接头文件，只是需要我们在刚开始的时候，**拖拽一个 OC 的源文件**(包含.h 和.m 文件)，而不是拖拽整个源代码的目录到 xcode 中\n\n      图2-1{% asset_img 2-1.jpg %}\n\n      图2-2{% asset_img 2-2.jpg %}\n\n    - 下面是拖拽 OC 源代码后的项目浏览结构，xcode自动创建一个 ModuleName-Bridging-Header.h 的头文件，并且设置好了编译选项：\n\n      图2-3{% asset_img 2-3.jpg %}\n\n      图2-4{% asset_img 2-4.jpg %}\n\n- OC中调用Swift：**\n\n  - OC来调用 Swift 的时候，需要依赖一个 Swift **默认提供**的“ModuleName-swift.h”文件，这个文件是隐藏的，**不需要也不能够由开发者来提供**，但是可以使用\\#include包含到 OC 代码中，这个 OC头文件中可以看到 swift 类、结构体、常量的定义。\n\n    图3-1{% asset_img 3-1.jpg %}\n\n    图3-2{% asset_img 3-2.jpg %}\n\n  - 需要注意的是，只有**继承自 NSObject 的swift类才能被 OC 调用**，在 swift.h 文件中是看不到纯 swift类的定义。\n\n- **Swift使用OC中的宏**\n\n  - 可以参考[这个提问](http://stackoverflow.com/questions/24325477/how-to-use-a-objective-c-define-from-swift)\n  - 有哪些问题：\n    - Swift 只能使用OC 中常量的宏定义，如\n      - \\#define MAX_WIDTH  100\n      - \\#define Name_KeyPath @“Name_KeyPath”\n    - 而不同使用函数调用的宏，如\n      - \\#define SCREEN_WIDTH  [[[UIScreen mainScreen] bounds] width]\n      - \\#define DBQuerySuccess YES\n  - 解决方法：\n    - 在 OC 文件中创建一个Constant类，使用类方法(screenWidth)来包装现有的宏定义\n\n- **@objc 关键字的作用**\n\n  - 当 swift 中要使用 OC 的一些特性的时候，如 runtime，@objc 关键字用来 提供这个功能。\n\n- 源代码\n\n  - 具体的使用，可以参见 Github上的[代码](https://github.com/zenghao0708/SwiftOCMixing)","slug":"Swift-与-OC-混编小技巧","published":1,"updated":"2018-10-20T15:59:18.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnj0jygm0002kxu05bo5sed8","content":"<p>Swift 与 OC交织在一起缠绵的爱情故事，在接下来的几年里将伴随着 iOS 开发人员，下面我们起来看看他们的恩怨纠葛。</p>\n<a id=\"more\"></a>\n<p><strong>Swift 和ObjC混编：</strong></p>\n<ul>\n<li><p><strong><a href=\"https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216-CH2-ID0\" target=\"_blank\" rel=\"noopener\">Apple的文档</a></strong></p>\n</li>\n<li><p><strong>Swift中调用OC：</strong></p>\n<ul>\n<li><p>在 Swift 中调用 OC 的代码时，需要使用到 bridging header 文件来把 OC 的类暴露给 swift</p>\n</li>\n<li><p>手动添加 bridging header 的步骤，直接把 finder 中的代码文件夹拖拽到 xcode 中:</p>\n<p>[图1-1]<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/1-1.jpg\"></p>\n<p>如上图，需要选中“<strong>Create groups</strong>”，这样就可以在 xcode代码浏览目录中添加一个 group</p>\n<p>图1-2 <img src=\"/2017/01/07/Swift-与-OC-混编小技巧/1-2.jpg\"></p>\n<p>但是，这样的操作不会让 Xcode 自动为我们创建 bridging header 文件，需要手动在 Xcode 中<strong>添加 header 文件</strong>，这里要注意命名规范，必须是“ModuleName-Bridging-Header.h”，然后设置<strong>编译选项</strong></p>\n<p>图1-3<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/1-3.jpg\"></p>\n<p>图1-4<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/1-4.jpg\"></p>\n</li>\n<li><p><strong>自动添加bridging header 的步骤</strong></p>\n<ul>\n<li><p>其实 xcode 可以自动添加桥接头文件，只是需要我们在刚开始的时候，<strong>拖拽一个 OC 的源文件</strong>(包含.h 和.m 文件)，而不是拖拽整个源代码的目录到 xcode 中</p>\n<p>图2-1<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/2-1.jpg\"></p>\n<p>图2-2<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/2-2.jpg\"></p>\n</li>\n<li><p>下面是拖拽 OC 源代码后的项目浏览结构，xcode自动创建一个 ModuleName-Bridging-Header.h 的头文件，并且设置好了编译选项：</p>\n<p>图2-3<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/2-3.jpg\"></p>\n<p>图2-4<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/2-4.jpg\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>OC中调用Swift：**</p>\n<ul>\n<li><p>OC来调用 Swift 的时候，需要依赖一个 Swift <strong>默认提供</strong>的“ModuleName-swift.h”文件，这个文件是隐藏的，<strong>不需要也不能够由开发者来提供</strong>，但是可以使用#include包含到 OC 代码中，这个 OC头文件中可以看到 swift 类、结构体、常量的定义。</p>\n<p>图3-1<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/3-1.jpg\"></p>\n<p>图3-2<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/3-2.jpg\"></p>\n</li>\n<li><p>需要注意的是，只有<strong>继承自 NSObject 的swift类才能被 OC 调用</strong>，在 swift.h 文件中是看不到纯 swift类的定义。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>Swift使用OC中的宏</strong></p>\n<ul>\n<li>可以参考<a href=\"http://stackoverflow.com/questions/24325477/how-to-use-a-objective-c-define-from-swift\" target=\"_blank\" rel=\"noopener\">这个提问</a></li>\n<li>有哪些问题：<ul>\n<li>Swift 只能使用OC 中常量的宏定义，如<ul>\n<li>#define MAX_WIDTH  100</li>\n<li>#define Name_KeyPath @“Name_KeyPath”</li>\n</ul>\n</li>\n<li>而不同使用函数调用的宏，如<ul>\n<li>#define SCREEN_WIDTH  [[[UIScreen mainScreen] bounds] width]</li>\n<li>#define DBQuerySuccess YES</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>解决方法：<ul>\n<li>在 OC 文件中创建一个Constant类，使用类方法(screenWidth)来包装现有的宏定义</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>@objc 关键字的作用</strong></p>\n<ul>\n<li>当 swift 中要使用 OC 的一些特性的时候，如 runtime，@objc 关键字用来 提供这个功能。</li>\n</ul>\n</li>\n<li><p>源代码</p>\n<ul>\n<li>具体的使用，可以参见 Github上的<a href=\"https://github.com/zenghao0708/SwiftOCMixing\" target=\"_blank\" rel=\"noopener\">代码</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Swift 与 OC交织在一起缠绵的爱情故事，在接下来的几年里将伴随着 iOS 开发人员，下面我们起来看看他们的恩怨纠葛。</p>","more":"<p><strong>Swift 和ObjC混编：</strong></p>\n<ul>\n<li><p><strong><a href=\"https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216-CH2-ID0\" target=\"_blank\" rel=\"noopener\">Apple的文档</a></strong></p>\n</li>\n<li><p><strong>Swift中调用OC：</strong></p>\n<ul>\n<li><p>在 Swift 中调用 OC 的代码时，需要使用到 bridging header 文件来把 OC 的类暴露给 swift</p>\n</li>\n<li><p>手动添加 bridging header 的步骤，直接把 finder 中的代码文件夹拖拽到 xcode 中:</p>\n<p>[图1-1]<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/1-1.jpg\"></p>\n<p>如上图，需要选中“<strong>Create groups</strong>”，这样就可以在 xcode代码浏览目录中添加一个 group</p>\n<p>图1-2 <img src=\"/2017/01/07/Swift-与-OC-混编小技巧/1-2.jpg\"></p>\n<p>但是，这样的操作不会让 Xcode 自动为我们创建 bridging header 文件，需要手动在 Xcode 中<strong>添加 header 文件</strong>，这里要注意命名规范，必须是“ModuleName-Bridging-Header.h”，然后设置<strong>编译选项</strong></p>\n<p>图1-3<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/1-3.jpg\"></p>\n<p>图1-4<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/1-4.jpg\"></p>\n</li>\n<li><p><strong>自动添加bridging header 的步骤</strong></p>\n<ul>\n<li><p>其实 xcode 可以自动添加桥接头文件，只是需要我们在刚开始的时候，<strong>拖拽一个 OC 的源文件</strong>(包含.h 和.m 文件)，而不是拖拽整个源代码的目录到 xcode 中</p>\n<p>图2-1<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/2-1.jpg\"></p>\n<p>图2-2<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/2-2.jpg\"></p>\n</li>\n<li><p>下面是拖拽 OC 源代码后的项目浏览结构，xcode自动创建一个 ModuleName-Bridging-Header.h 的头文件，并且设置好了编译选项：</p>\n<p>图2-3<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/2-3.jpg\"></p>\n<p>图2-4<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/2-4.jpg\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>OC中调用Swift：**</p>\n<ul>\n<li><p>OC来调用 Swift 的时候，需要依赖一个 Swift <strong>默认提供</strong>的“ModuleName-swift.h”文件，这个文件是隐藏的，<strong>不需要也不能够由开发者来提供</strong>，但是可以使用#include包含到 OC 代码中，这个 OC头文件中可以看到 swift 类、结构体、常量的定义。</p>\n<p>图3-1<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/3-1.jpg\"></p>\n<p>图3-2<img src=\"/2017/01/07/Swift-与-OC-混编小技巧/3-2.jpg\"></p>\n</li>\n<li><p>需要注意的是，只有<strong>继承自 NSObject 的swift类才能被 OC 调用</strong>，在 swift.h 文件中是看不到纯 swift类的定义。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>Swift使用OC中的宏</strong></p>\n<ul>\n<li>可以参考<a href=\"http://stackoverflow.com/questions/24325477/how-to-use-a-objective-c-define-from-swift\" target=\"_blank\" rel=\"noopener\">这个提问</a></li>\n<li>有哪些问题：<ul>\n<li>Swift 只能使用OC 中常量的宏定义，如<ul>\n<li>#define MAX_WIDTH  100</li>\n<li>#define Name_KeyPath @“Name_KeyPath”</li>\n</ul>\n</li>\n<li>而不同使用函数调用的宏，如<ul>\n<li>#define SCREEN_WIDTH  [[[UIScreen mainScreen] bounds] width]</li>\n<li>#define DBQuerySuccess YES</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>解决方法：<ul>\n<li>在 OC 文件中创建一个Constant类，使用类方法(screenWidth)来包装现有的宏定义</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>@objc 关键字的作用</strong></p>\n<ul>\n<li>当 swift 中要使用 OC 的一些特性的时候，如 runtime，@objc 关键字用来 提供这个功能。</li>\n</ul>\n</li>\n<li><p>源代码</p>\n<ul>\n<li>具体的使用，可以参见 Github上的<a href=\"https://github.com/zenghao0708/SwiftOCMixing\" target=\"_blank\" rel=\"noopener\">代码</a></li>\n</ul>\n</li>\n</ul>"},{"title":"Xcode 10 beta 版本迁移指南","date":"2018-06-21T12:15:29.000Z","_content":"\n今天的主角就是开发者接触最多的 Xcode 10 beta，详细内容可以参考 [WWDC 18 Session](https://developer.apple.com/videos/play/wwdc2018/408/) ，同时可以看下 Xcode 10 的 [release note](https://developerbetas.com/wp-content/uploads/2018/06/Xcode_10_Beta_Release_Notes.pdf), 官方文档永远是学习新内容的第一手资料。\n\n\n\nXcode 10 beta 在 WWDC 18后就对[开发者开放下载](https://developer.apple.com/xcode/)了，WWDC 18的新内容不多，Apple 今年把主要精力放在 Bugfix和性能优化上面，还这几年欠下来的技术债，关于 iOS 11的诟病一直不绝入耳，不得不说，Apple 今年的决策还是比较明智的。\n\n<!-- more -->\n\n我们项目现在是 OC 和 Swift 混编，Xcode 版本是9.4.1，swift 4，平时用公司的 iMac Late 2013编译感觉有点吃力，用自己的 MBP 14则编译速度足够去喝杯咖啡，享受人生。\n\n\n\n我尝试把自己的主力机（iPhone 7）升级到 iOS 12后，内心抑制不住冲动把14年的 iPhone 6也升级下 iOS 12试试，重新体会到了之前 iOS 的那种流畅，真的是老泪纵横。平时 iPhone 6只能沦为测试手机，跑跑单元测试啥的。\n\n\n\n升级了 iOS 12后，Xcode 9已经不能进行调试了，本着生命不息，折腾不止的精神，顺带体验了一下 Xcode 10的各种新功能，总结了一下升级 Xcode 10过程中踩的坑。\n\n\n\n- Xcode 10 beta 版本迁移指南：\n\n  - > **指定 swift版本**：4.1，Xcode 10使用的是 swift 4.2版本，而 Xcode 9.4则使用 Swift 4.1,基本改动不大，为了兼容 Xcode 9，这里统一使用 Swift 4.1。\n\n    - podfile设置如下:\n\n      - ```\n        config.build_settings['SWIFT_VERSION'] = '4.1'\n        ```\n\n        ​\n\n    - xcode 项目设置：\n\n      - **SWIFT_VERSION**为 swift 4\n\n    - xcode command tool设置: 使用 Xcode 10\n\n      - sudo xcode-select --switch /Applications/Xcode-beta.app\n\n      - xcodebuild -version可以查看\n\n        - ```\n          - Xcode 10.0\n          - Build version 10L176w\n          ```\n\n          ​\n\n  - > 更新部分 pod 库：\n\n    - RACObjcBridge/RACObjc升级到3.1.0，之前是3.0.0版本，swift 版本导致需要升级。\n    - 删除 Tencent SDK pod spec 中的s.resource_bundle字段，参见 xcode 10 beta release note。多个相同的输入文件导致冲突，这个也是 xcode 10新增的功能，为了加快编译速度，对编译依赖检测得很严格。\n    - 使用 Carthage 的话，则需要指定手动指定 Swift 版本：\n      - carthage update --platform iOS --toolchain com.apple.dt.toolchain.Swift_4_1 --no-use-binaries REPO_NAME\n\n  - > 更新 swift lint: disable identifier_name\n\n    - 参见[False positive for rule identifier_name in Xcode 10 beta](https://github.com/realm/SwiftLint/issues/2231)\n\n  - > 其他错误：\n\n    - [Command CompileC failed with a nonzero exit code](https://github.com/mapbox/mapbox-gl-native/issues/12084)\n\n整个升级过程中，需要注意的几点：\n\n- 及时清理 DerivedData目录，由于整个编译过程中会产生众多的中间文件，非常容易导致编译依赖检测出错。\n- 更新 carthage framework和使用 pod install 重新编译第三方库。\n- New Build System: Xcode 9.4引入了 preview 版本，Xcode 10则是默认开启，开启后，编译速度确认有所提升，但是也会导致一些比较奇怪的编译问题，上面只是记录了笔者遇到的几个问题。\n- 完成升级后，Xcode 9.4和 Xcode 10 beta 可以共存，笔者使用 Xcode 10 beta，其他开发同事继续使用 Xcode 9。","source":"_posts/Xcode-10-beta-版本迁移指南.md","raw":"---\ntitle: Xcode 10 beta 版本迁移指南\ndate: 2018-06-21 20:15:29\ncategories: 开发\ntags: \n- iOS\n---\n\n今天的主角就是开发者接触最多的 Xcode 10 beta，详细内容可以参考 [WWDC 18 Session](https://developer.apple.com/videos/play/wwdc2018/408/) ，同时可以看下 Xcode 10 的 [release note](https://developerbetas.com/wp-content/uploads/2018/06/Xcode_10_Beta_Release_Notes.pdf), 官方文档永远是学习新内容的第一手资料。\n\n\n\nXcode 10 beta 在 WWDC 18后就对[开发者开放下载](https://developer.apple.com/xcode/)了，WWDC 18的新内容不多，Apple 今年把主要精力放在 Bugfix和性能优化上面，还这几年欠下来的技术债，关于 iOS 11的诟病一直不绝入耳，不得不说，Apple 今年的决策还是比较明智的。\n\n<!-- more -->\n\n我们项目现在是 OC 和 Swift 混编，Xcode 版本是9.4.1，swift 4，平时用公司的 iMac Late 2013编译感觉有点吃力，用自己的 MBP 14则编译速度足够去喝杯咖啡，享受人生。\n\n\n\n我尝试把自己的主力机（iPhone 7）升级到 iOS 12后，内心抑制不住冲动把14年的 iPhone 6也升级下 iOS 12试试，重新体会到了之前 iOS 的那种流畅，真的是老泪纵横。平时 iPhone 6只能沦为测试手机，跑跑单元测试啥的。\n\n\n\n升级了 iOS 12后，Xcode 9已经不能进行调试了，本着生命不息，折腾不止的精神，顺带体验了一下 Xcode 10的各种新功能，总结了一下升级 Xcode 10过程中踩的坑。\n\n\n\n- Xcode 10 beta 版本迁移指南：\n\n  - > **指定 swift版本**：4.1，Xcode 10使用的是 swift 4.2版本，而 Xcode 9.4则使用 Swift 4.1,基本改动不大，为了兼容 Xcode 9，这里统一使用 Swift 4.1。\n\n    - podfile设置如下:\n\n      - ```\n        config.build_settings['SWIFT_VERSION'] = '4.1'\n        ```\n\n        ​\n\n    - xcode 项目设置：\n\n      - **SWIFT_VERSION**为 swift 4\n\n    - xcode command tool设置: 使用 Xcode 10\n\n      - sudo xcode-select --switch /Applications/Xcode-beta.app\n\n      - xcodebuild -version可以查看\n\n        - ```\n          - Xcode 10.0\n          - Build version 10L176w\n          ```\n\n          ​\n\n  - > 更新部分 pod 库：\n\n    - RACObjcBridge/RACObjc升级到3.1.0，之前是3.0.0版本，swift 版本导致需要升级。\n    - 删除 Tencent SDK pod spec 中的s.resource_bundle字段，参见 xcode 10 beta release note。多个相同的输入文件导致冲突，这个也是 xcode 10新增的功能，为了加快编译速度，对编译依赖检测得很严格。\n    - 使用 Carthage 的话，则需要指定手动指定 Swift 版本：\n      - carthage update --platform iOS --toolchain com.apple.dt.toolchain.Swift_4_1 --no-use-binaries REPO_NAME\n\n  - > 更新 swift lint: disable identifier_name\n\n    - 参见[False positive for rule identifier_name in Xcode 10 beta](https://github.com/realm/SwiftLint/issues/2231)\n\n  - > 其他错误：\n\n    - [Command CompileC failed with a nonzero exit code](https://github.com/mapbox/mapbox-gl-native/issues/12084)\n\n整个升级过程中，需要注意的几点：\n\n- 及时清理 DerivedData目录，由于整个编译过程中会产生众多的中间文件，非常容易导致编译依赖检测出错。\n- 更新 carthage framework和使用 pod install 重新编译第三方库。\n- New Build System: Xcode 9.4引入了 preview 版本，Xcode 10则是默认开启，开启后，编译速度确认有所提升，但是也会导致一些比较奇怪的编译问题，上面只是记录了笔者遇到的几个问题。\n- 完成升级后，Xcode 9.4和 Xcode 10 beta 可以共存，笔者使用 Xcode 10 beta，其他开发同事继续使用 Xcode 9。","slug":"Xcode-10-beta-版本迁移指南","published":1,"updated":"2018-10-20T15:59:18.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnj0jygs0006kxu06jn5tu5p","content":"<p>今天的主角就是开发者接触最多的 Xcode 10 beta，详细内容可以参考 <a href=\"https://developer.apple.com/videos/play/wwdc2018/408/\" target=\"_blank\" rel=\"noopener\">WWDC 18 Session</a> ，同时可以看下 Xcode 10 的 <a href=\"https://developerbetas.com/wp-content/uploads/2018/06/Xcode_10_Beta_Release_Notes.pdf\" target=\"_blank\" rel=\"noopener\">release note</a>, 官方文档永远是学习新内容的第一手资料。</p>\n<p>Xcode 10 beta 在 WWDC 18后就对<a href=\"https://developer.apple.com/xcode/\" target=\"_blank\" rel=\"noopener\">开发者开放下载</a>了，WWDC 18的新内容不多，Apple 今年把主要精力放在 Bugfix和性能优化上面，还这几年欠下来的技术债，关于 iOS 11的诟病一直不绝入耳，不得不说，Apple 今年的决策还是比较明智的。</p>\n<a id=\"more\"></a>\n<p>我们项目现在是 OC 和 Swift 混编，Xcode 版本是9.4.1，swift 4，平时用公司的 iMac Late 2013编译感觉有点吃力，用自己的 MBP 14则编译速度足够去喝杯咖啡，享受人生。</p>\n<p>我尝试把自己的主力机（iPhone 7）升级到 iOS 12后，内心抑制不住冲动把14年的 iPhone 6也升级下 iOS 12试试，重新体会到了之前 iOS 的那种流畅，真的是老泪纵横。平时 iPhone 6只能沦为测试手机，跑跑单元测试啥的。</p>\n<p>升级了 iOS 12后，Xcode 9已经不能进行调试了，本着生命不息，折腾不止的精神，顺带体验了一下 Xcode 10的各种新功能，总结了一下升级 Xcode 10过程中踩的坑。</p>\n<ul>\n<li><p>Xcode 10 beta 版本迁移指南：</p>\n<ul>\n<li><blockquote>\n<p><strong>指定 swift版本</strong>：4.1，Xcode 10使用的是 swift 4.2版本，而 Xcode 9.4则使用 Swift 4.1,基本改动不大，为了兼容 Xcode 9，这里统一使用 Swift 4.1。</p>\n</blockquote>\n<ul>\n<li><p>podfile设置如下:</p>\n<ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.build_settings[&apos;SWIFT_VERSION&apos;] = &apos;4.1&apos;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n</li>\n<li><p>xcode 项目设置：</p>\n<ul>\n<li><strong>SWIFT_VERSION</strong>为 swift 4</li>\n</ul>\n</li>\n<li><p>xcode command tool设置: 使用 Xcode 10</p>\n<ul>\n<li><p>sudo xcode-select –switch /Applications/Xcode-beta.app</p>\n</li>\n<li><p>xcodebuild -version可以查看</p>\n<ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Xcode 10.0</span><br><span class=\"line\">- Build version 10L176w</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><blockquote>\n<p>更新部分 pod 库：</p>\n</blockquote>\n<ul>\n<li>RACObjcBridge/RACObjc升级到3.1.0，之前是3.0.0版本，swift 版本导致需要升级。</li>\n<li>删除 Tencent SDK pod spec 中的s.resource_bundle字段，参见 xcode 10 beta release note。多个相同的输入文件导致冲突，这个也是 xcode 10新增的功能，为了加快编译速度，对编译依赖检测得很严格。</li>\n<li>使用 Carthage 的话，则需要指定手动指定 Swift 版本：<ul>\n<li>carthage update –platform iOS –toolchain com.apple.dt.toolchain.Swift_4_1 –no-use-binaries REPO_NAME</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><blockquote>\n<p>更新 swift lint: disable identifier_name</p>\n</blockquote>\n<ul>\n<li>参见<a href=\"https://github.com/realm/SwiftLint/issues/2231\" target=\"_blank\" rel=\"noopener\">False positive for rule identifier_name in Xcode 10 beta</a></li>\n</ul>\n</li>\n<li><blockquote>\n<p>其他错误：</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/mapbox/mapbox-gl-native/issues/12084\" target=\"_blank\" rel=\"noopener\">Command CompileC failed with a nonzero exit code</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>整个升级过程中，需要注意的几点：</p>\n<ul>\n<li>及时清理 DerivedData目录，由于整个编译过程中会产生众多的中间文件，非常容易导致编译依赖检测出错。</li>\n<li>更新 carthage framework和使用 pod install 重新编译第三方库。</li>\n<li>New Build System: Xcode 9.4引入了 preview 版本，Xcode 10则是默认开启，开启后，编译速度确认有所提升，但是也会导致一些比较奇怪的编译问题，上面只是记录了笔者遇到的几个问题。</li>\n<li>完成升级后，Xcode 9.4和 Xcode 10 beta 可以共存，笔者使用 Xcode 10 beta，其他开发同事继续使用 Xcode 9。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>今天的主角就是开发者接触最多的 Xcode 10 beta，详细内容可以参考 <a href=\"https://developer.apple.com/videos/play/wwdc2018/408/\" target=\"_blank\" rel=\"noopener\">WWDC 18 Session</a> ，同时可以看下 Xcode 10 的 <a href=\"https://developerbetas.com/wp-content/uploads/2018/06/Xcode_10_Beta_Release_Notes.pdf\" target=\"_blank\" rel=\"noopener\">release note</a>, 官方文档永远是学习新内容的第一手资料。</p>\n<p>Xcode 10 beta 在 WWDC 18后就对<a href=\"https://developer.apple.com/xcode/\" target=\"_blank\" rel=\"noopener\">开发者开放下载</a>了，WWDC 18的新内容不多，Apple 今年把主要精力放在 Bugfix和性能优化上面，还这几年欠下来的技术债，关于 iOS 11的诟病一直不绝入耳，不得不说，Apple 今年的决策还是比较明智的。</p>","more":"<p>我们项目现在是 OC 和 Swift 混编，Xcode 版本是9.4.1，swift 4，平时用公司的 iMac Late 2013编译感觉有点吃力，用自己的 MBP 14则编译速度足够去喝杯咖啡，享受人生。</p>\n<p>我尝试把自己的主力机（iPhone 7）升级到 iOS 12后，内心抑制不住冲动把14年的 iPhone 6也升级下 iOS 12试试，重新体会到了之前 iOS 的那种流畅，真的是老泪纵横。平时 iPhone 6只能沦为测试手机，跑跑单元测试啥的。</p>\n<p>升级了 iOS 12后，Xcode 9已经不能进行调试了，本着生命不息，折腾不止的精神，顺带体验了一下 Xcode 10的各种新功能，总结了一下升级 Xcode 10过程中踩的坑。</p>\n<ul>\n<li><p>Xcode 10 beta 版本迁移指南：</p>\n<ul>\n<li><blockquote>\n<p><strong>指定 swift版本</strong>：4.1，Xcode 10使用的是 swift 4.2版本，而 Xcode 9.4则使用 Swift 4.1,基本改动不大，为了兼容 Xcode 9，这里统一使用 Swift 4.1。</p>\n</blockquote>\n<ul>\n<li><p>podfile设置如下:</p>\n<ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.build_settings[&apos;SWIFT_VERSION&apos;] = &apos;4.1&apos;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n</li>\n<li><p>xcode 项目设置：</p>\n<ul>\n<li><strong>SWIFT_VERSION</strong>为 swift 4</li>\n</ul>\n</li>\n<li><p>xcode command tool设置: 使用 Xcode 10</p>\n<ul>\n<li><p>sudo xcode-select –switch /Applications/Xcode-beta.app</p>\n</li>\n<li><p>xcodebuild -version可以查看</p>\n<ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Xcode 10.0</span><br><span class=\"line\">- Build version 10L176w</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><blockquote>\n<p>更新部分 pod 库：</p>\n</blockquote>\n<ul>\n<li>RACObjcBridge/RACObjc升级到3.1.0，之前是3.0.0版本，swift 版本导致需要升级。</li>\n<li>删除 Tencent SDK pod spec 中的s.resource_bundle字段，参见 xcode 10 beta release note。多个相同的输入文件导致冲突，这个也是 xcode 10新增的功能，为了加快编译速度，对编译依赖检测得很严格。</li>\n<li>使用 Carthage 的话，则需要指定手动指定 Swift 版本：<ul>\n<li>carthage update –platform iOS –toolchain com.apple.dt.toolchain.Swift_4_1 –no-use-binaries REPO_NAME</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><blockquote>\n<p>更新 swift lint: disable identifier_name</p>\n</blockquote>\n<ul>\n<li>参见<a href=\"https://github.com/realm/SwiftLint/issues/2231\" target=\"_blank\" rel=\"noopener\">False positive for rule identifier_name in Xcode 10 beta</a></li>\n</ul>\n</li>\n<li><blockquote>\n<p>其他错误：</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/mapbox/mapbox-gl-native/issues/12084\" target=\"_blank\" rel=\"noopener\">Command CompileC failed with a nonzero exit code</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>整个升级过程中，需要注意的几点：</p>\n<ul>\n<li>及时清理 DerivedData目录，由于整个编译过程中会产生众多的中间文件，非常容易导致编译依赖检测出错。</li>\n<li>更新 carthage framework和使用 pod install 重新编译第三方库。</li>\n<li>New Build System: Xcode 9.4引入了 preview 版本，Xcode 10则是默认开启，开启后，编译速度确认有所提升，但是也会导致一些比较奇怪的编译问题，上面只是记录了笔者遇到的几个问题。</li>\n<li>完成升级后，Xcode 9.4和 Xcode 10 beta 可以共存，笔者使用 Xcode 10 beta，其他开发同事继续使用 Xcode 9。</li>\n</ul>"},{"title":"Xcode问题锦集","date":"2017-08-12T12:59:56.000Z","_content":"\nXcode 是 iOS开发人员的利器，偶尔也会变为“猪队友”，下面是本人在开发中积累的一些遇到的问题和解决方案。\n\n<!-- more -->\n\n1. **代码提示不起作用**：\n   This fix from apple dev forums works for me. I have had autocomplete issues with Xcode 6.1/Yosemite.\n   1. Quit Xcode.\n   2. Restart the computer (this is to clear any in-memory caches).\n   3. Delete the contents of the DerivedData folder (~/Library/Developer/Xcode/DerivedData), precisely run, \n      a) **cd ~/Library/Developer/Xcode/DerivedData/** \n      b) **rm -rf ***\n   4. (Try this if Steps 1-3 dont really work as it rebuilds the cache later on restart which takes time) Delete the contents of folder ~/Library/Caches/com.apple.dt.Xcode, i.e., \n      a) **cd ~/Library/Caches/com.apple.dt.Xcode** \n      b) **rm -rf ***\n   5. Now launch Xcode once more…\n2. **Logic Testing Unavailable**：\n   Logic Testing on iOS devices is not supported. You can run logic tests on the Simulator.\n   [http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported](http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported)\n   [Log](http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported)\n   ic test need a framework which has not installed with iOS device. Set a Host Application for Unit Test can resolve this issue: App will run first and Uint Test run.\n3. **$(inherited) in xcode**:\n   1. inherited值的是xcode设置项的继承关系。\n   2. 每个项目都有PROJECT的设置与TARGETS设置，TARGETS一般情况下就是继承自PROJECT\n4. **“Xcode 6.3: Can not verify build to install on device\"**\n   1. $(inherited) can be used to inherit build settings from the project level to the target level. When you define library or header search paths at the project level you can use $(inherited) in the target build settings to use these search paths in the search paths of the project targets.\n5. **Verify Xcode:**\n   1. spctl --assess --verbose /Applications/Xcode.app\n6. **Xcode显示模拟器时，使用的是UUID，而不是系统型号**\n   1. [http://stackoverflow.com/questions/26533025/xcode-using-guid-instead-of-ios-version-number-in-simulator-selection](http://stackoverflow.com/questions/26533025/xcode-using-guid-instead-of-ios-version-number-in-simulator-selection)\n   2. 在Xcode->Devices里，选中重复的模拟器，右键菜单“删除”，即可。\n7. **iPhone Simulator没有网络**\n   1. [http://stackoverflow.com/questions/13542706/iphone-simulator-cannot-connect-to-internet](http://stackoverflow.com/questions/13542706/iphone-simulator-cannot-connect-to-internet)\n   2. iOS Simulator (menu, top left) > Reset Content and Settings... fixed it for me. Note this will delete all the apps and associated data you have on the simulator.\n8. **ineligible device**\n   1. 当前iOS版本比xcode版本高，就会出现这种情况，如iOS 9.1 就不能在Xcode 7上面进行调试，而只能在xcode 7.1进行调试。\n9. **更新xcode版本后，出现插件不兼容的问题**\n   1. [fix-xcode-upgrade-plugin-invalid](http://joeshang.github.io/2015/04/10/fix-xcode-upgrade-plugin-invalid/)\n   2. find ~/Library/Application\\ Support/Developer/Shared/Xcode/Plug-ins -name Info.plist -maxdepth 3 | xargs -I{} defaults write {} DVTPlugInCompatibilityUUIDs -array-add `defaults read /Applications/Xcode.app/Contents/Info.plist DVTPlugInCompatibilityUUID`\n10. **检查代码中的FIXME、TODO、ERROR**\n   1. [http://krakendev.io/blog/generating-warnings-in-xcode](http://krakendev.io/blog/generating-warnings-in-xcode)\n11. **Xcode 7.3(Swift 2.2) Release配置出现Crash：**\n    1. 在Debug和Staging配置环境下的build没有问题，但是Release编译出来的build会出现crash: unrecognised selector sent to instance\n    2. 尝试方法\n       1. 《[iOS开发调试技巧](http://www.jianshu.com/p/06fcd298ef4c)》\n    3. 解决方法：\n       1. 在Swift Compiler -> Code Generation选择,使用**Fast [-O]，而不能使用Fast, Whole Module Optimization**\n12. **查看所有的Simulator：**\n    1. xcrun simctl list devices\n13. **Xcode 注释功能不起作用：**\n    1. 重启 Xcode,重启 MAC\n    2. 运行：sudo usr/libexec/xpccachectl\n    3. 重命名 Xcode，然后打开，恢复后，重新改名为 Xcode\n14. **使用 Code Snippet**\n    1. [Xcode开发技巧之code snippets(代码片段)](http://blog.csdn.net/wzzvictory/article/details/12163939)\n    2. <#type#>占位符\n    3. Xcode中的代码片段默认放在下面的目录中：~/Library/Developer/Xcode/UserData/CodeSnippets","source":"_posts/Xcode问题锦集.md","raw":"---\ntitle: Xcode问题锦集\ndate: 2017-08-12 20:59:56\ntags: \n - iOS\ncategories: 开发\n\n---\n\nXcode 是 iOS开发人员的利器，偶尔也会变为“猪队友”，下面是本人在开发中积累的一些遇到的问题和解决方案。\n\n<!-- more -->\n\n1. **代码提示不起作用**：\n   This fix from apple dev forums works for me. I have had autocomplete issues with Xcode 6.1/Yosemite.\n   1. Quit Xcode.\n   2. Restart the computer (this is to clear any in-memory caches).\n   3. Delete the contents of the DerivedData folder (~/Library/Developer/Xcode/DerivedData), precisely run, \n      a) **cd ~/Library/Developer/Xcode/DerivedData/** \n      b) **rm -rf ***\n   4. (Try this if Steps 1-3 dont really work as it rebuilds the cache later on restart which takes time) Delete the contents of folder ~/Library/Caches/com.apple.dt.Xcode, i.e., \n      a) **cd ~/Library/Caches/com.apple.dt.Xcode** \n      b) **rm -rf ***\n   5. Now launch Xcode once more…\n2. **Logic Testing Unavailable**：\n   Logic Testing on iOS devices is not supported. You can run logic tests on the Simulator.\n   [http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported](http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported)\n   [Log](http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported)\n   ic test need a framework which has not installed with iOS device. Set a Host Application for Unit Test can resolve this issue: App will run first and Uint Test run.\n3. **$(inherited) in xcode**:\n   1. inherited值的是xcode设置项的继承关系。\n   2. 每个项目都有PROJECT的设置与TARGETS设置，TARGETS一般情况下就是继承自PROJECT\n4. **“Xcode 6.3: Can not verify build to install on device\"**\n   1. $(inherited) can be used to inherit build settings from the project level to the target level. When you define library or header search paths at the project level you can use $(inherited) in the target build settings to use these search paths in the search paths of the project targets.\n5. **Verify Xcode:**\n   1. spctl --assess --verbose /Applications/Xcode.app\n6. **Xcode显示模拟器时，使用的是UUID，而不是系统型号**\n   1. [http://stackoverflow.com/questions/26533025/xcode-using-guid-instead-of-ios-version-number-in-simulator-selection](http://stackoverflow.com/questions/26533025/xcode-using-guid-instead-of-ios-version-number-in-simulator-selection)\n   2. 在Xcode->Devices里，选中重复的模拟器，右键菜单“删除”，即可。\n7. **iPhone Simulator没有网络**\n   1. [http://stackoverflow.com/questions/13542706/iphone-simulator-cannot-connect-to-internet](http://stackoverflow.com/questions/13542706/iphone-simulator-cannot-connect-to-internet)\n   2. iOS Simulator (menu, top left) > Reset Content and Settings... fixed it for me. Note this will delete all the apps and associated data you have on the simulator.\n8. **ineligible device**\n   1. 当前iOS版本比xcode版本高，就会出现这种情况，如iOS 9.1 就不能在Xcode 7上面进行调试，而只能在xcode 7.1进行调试。\n9. **更新xcode版本后，出现插件不兼容的问题**\n   1. [fix-xcode-upgrade-plugin-invalid](http://joeshang.github.io/2015/04/10/fix-xcode-upgrade-plugin-invalid/)\n   2. find ~/Library/Application\\ Support/Developer/Shared/Xcode/Plug-ins -name Info.plist -maxdepth 3 | xargs -I{} defaults write {} DVTPlugInCompatibilityUUIDs -array-add `defaults read /Applications/Xcode.app/Contents/Info.plist DVTPlugInCompatibilityUUID`\n10. **检查代码中的FIXME、TODO、ERROR**\n   1. [http://krakendev.io/blog/generating-warnings-in-xcode](http://krakendev.io/blog/generating-warnings-in-xcode)\n11. **Xcode 7.3(Swift 2.2) Release配置出现Crash：**\n    1. 在Debug和Staging配置环境下的build没有问题，但是Release编译出来的build会出现crash: unrecognised selector sent to instance\n    2. 尝试方法\n       1. 《[iOS开发调试技巧](http://www.jianshu.com/p/06fcd298ef4c)》\n    3. 解决方法：\n       1. 在Swift Compiler -> Code Generation选择,使用**Fast [-O]，而不能使用Fast, Whole Module Optimization**\n12. **查看所有的Simulator：**\n    1. xcrun simctl list devices\n13. **Xcode 注释功能不起作用：**\n    1. 重启 Xcode,重启 MAC\n    2. 运行：sudo usr/libexec/xpccachectl\n    3. 重命名 Xcode，然后打开，恢复后，重新改名为 Xcode\n14. **使用 Code Snippet**\n    1. [Xcode开发技巧之code snippets(代码片段)](http://blog.csdn.net/wzzvictory/article/details/12163939)\n    2. <#type#>占位符\n    3. Xcode中的代码片段默认放在下面的目录中：~/Library/Developer/Xcode/UserData/CodeSnippets","slug":"Xcode问题锦集","published":1,"updated":"2018-10-20T15:59:18.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnj0jygt0007kxu0c1jwoxnb","content":"<p>Xcode 是 iOS开发人员的利器，偶尔也会变为“猪队友”，下面是本人在开发中积累的一些遇到的问题和解决方案。</p>\n<a id=\"more\"></a>\n<ol>\n<li><strong>代码提示不起作用</strong>：<br>This fix from apple dev forums works for me. I have had autocomplete issues with Xcode 6.1/Yosemite.<ol>\n<li>Quit Xcode.</li>\n<li>Restart the computer (this is to clear any in-memory caches).</li>\n<li>Delete the contents of the DerivedData folder (~/Library/Developer/Xcode/DerivedData), precisely run,<br>a) <strong>cd ~/Library/Developer/Xcode/DerivedData/</strong><br>b) <strong>rm -rf *</strong></li>\n<li>(Try this if Steps 1-3 dont really work as it rebuilds the cache later on restart which takes time) Delete the contents of folder ~/Library/Caches/com.apple.dt.Xcode, i.e.,<br>a) <strong>cd ~/Library/Caches/com.apple.dt.Xcode</strong><br>b) <strong>rm -rf *</strong></li>\n<li>Now launch Xcode once more…</li>\n</ol>\n</li>\n<li><strong>Logic Testing Unavailable</strong>：<br>Logic Testing on iOS devices is not supported. You can run logic tests on the Simulator.<br><a href=\"http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported</a><br><a href=\"http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported\" target=\"_blank\" rel=\"noopener\">Log</a><br>ic test need a framework which has not installed with iOS device. Set a Host Application for Unit Test can resolve this issue: App will run first and Uint Test run.</li>\n<li><strong>$(inherited) in xcode</strong>:<ol>\n<li>inherited值的是xcode设置项的继承关系。</li>\n<li>每个项目都有PROJECT的设置与TARGETS设置，TARGETS一般情况下就是继承自PROJECT</li>\n</ol>\n</li>\n<li><strong>“Xcode 6.3: Can not verify build to install on device”</strong><ol>\n<li>$(inherited) can be used to inherit build settings from the project level to the target level. When you define library or header search paths at the project level you can use $(inherited) in the target build settings to use these search paths in the search paths of the project targets.</li>\n</ol>\n</li>\n<li><strong>Verify Xcode:</strong><ol>\n<li>spctl –assess –verbose /Applications/Xcode.app</li>\n</ol>\n</li>\n<li><strong>Xcode显示模拟器时，使用的是UUID，而不是系统型号</strong><ol>\n<li><a href=\"http://stackoverflow.com/questions/26533025/xcode-using-guid-instead-of-ios-version-number-in-simulator-selection\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/26533025/xcode-using-guid-instead-of-ios-version-number-in-simulator-selection</a></li>\n<li>在Xcode-&gt;Devices里，选中重复的模拟器，右键菜单“删除”，即可。</li>\n</ol>\n</li>\n<li><strong>iPhone Simulator没有网络</strong><ol>\n<li><a href=\"http://stackoverflow.com/questions/13542706/iphone-simulator-cannot-connect-to-internet\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/13542706/iphone-simulator-cannot-connect-to-internet</a></li>\n<li>iOS Simulator (menu, top left) &gt; Reset Content and Settings… fixed it for me. Note this will delete all the apps and associated data you have on the simulator.</li>\n</ol>\n</li>\n<li><strong>ineligible device</strong><ol>\n<li>当前iOS版本比xcode版本高，就会出现这种情况，如iOS 9.1 就不能在Xcode 7上面进行调试，而只能在xcode 7.1进行调试。</li>\n</ol>\n</li>\n<li><strong>更新xcode版本后，出现插件不兼容的问题</strong><ol>\n<li><a href=\"http://joeshang.github.io/2015/04/10/fix-xcode-upgrade-plugin-invalid/\" target=\"_blank\" rel=\"noopener\">fix-xcode-upgrade-plugin-invalid</a></li>\n<li>find ~/Library/Application\\ Support/Developer/Shared/Xcode/Plug-ins -name Info.plist -maxdepth 3 | xargs -I{} defaults write {} DVTPlugInCompatibilityUUIDs -array-add <code>defaults read /Applications/Xcode.app/Contents/Info.plist DVTPlugInCompatibilityUUID</code></li>\n</ol>\n</li>\n<li><strong>检查代码中的FIXME、TODO、ERROR</strong><ol>\n<li><a href=\"http://krakendev.io/blog/generating-warnings-in-xcode\" target=\"_blank\" rel=\"noopener\">http://krakendev.io/blog/generating-warnings-in-xcode</a></li>\n</ol>\n</li>\n<li><strong>Xcode 7.3(Swift 2.2) Release配置出现Crash：</strong><ol>\n<li>在Debug和Staging配置环境下的build没有问题，但是Release编译出来的build会出现crash: unrecognised selector sent to instance</li>\n<li>尝试方法<ol>\n<li>《<a href=\"http://www.jianshu.com/p/06fcd298ef4c\" target=\"_blank\" rel=\"noopener\">iOS开发调试技巧</a>》</li>\n</ol>\n</li>\n<li>解决方法：<ol>\n<li>在Swift Compiler -&gt; Code Generation选择,使用<strong>Fast [-O]，而不能使用Fast, Whole Module Optimization</strong></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><strong>查看所有的Simulator：</strong><ol>\n<li>xcrun simctl list devices</li>\n</ol>\n</li>\n<li><strong>Xcode 注释功能不起作用：</strong><ol>\n<li>重启 Xcode,重启 MAC</li>\n<li>运行：sudo usr/libexec/xpccachectl</li>\n<li>重命名 Xcode，然后打开，恢复后，重新改名为 Xcode</li>\n</ol>\n</li>\n<li><strong>使用 Code Snippet</strong><ol>\n<li><a href=\"http://blog.csdn.net/wzzvictory/article/details/12163939\" target=\"_blank\" rel=\"noopener\">Xcode开发技巧之code snippets(代码片段)</a></li>\n<li>&lt;#type#&gt;占位符</li>\n<li>Xcode中的代码片段默认放在下面的目录中：~/Library/Developer/Xcode/UserData/CodeSnippets</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Xcode 是 iOS开发人员的利器，偶尔也会变为“猪队友”，下面是本人在开发中积累的一些遇到的问题和解决方案。</p>","more":"<ol>\n<li><strong>代码提示不起作用</strong>：<br>This fix from apple dev forums works for me. I have had autocomplete issues with Xcode 6.1/Yosemite.<ol>\n<li>Quit Xcode.</li>\n<li>Restart the computer (this is to clear any in-memory caches).</li>\n<li>Delete the contents of the DerivedData folder (~/Library/Developer/Xcode/DerivedData), precisely run,<br>a) <strong>cd ~/Library/Developer/Xcode/DerivedData/</strong><br>b) <strong>rm -rf *</strong></li>\n<li>(Try this if Steps 1-3 dont really work as it rebuilds the cache later on restart which takes time) Delete the contents of folder ~/Library/Caches/com.apple.dt.Xcode, i.e.,<br>a) <strong>cd ~/Library/Caches/com.apple.dt.Xcode</strong><br>b) <strong>rm -rf *</strong></li>\n<li>Now launch Xcode once more…</li>\n</ol>\n</li>\n<li><strong>Logic Testing Unavailable</strong>：<br>Logic Testing on iOS devices is not supported. You can run logic tests on the Simulator.<br><a href=\"http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported</a><br><a href=\"http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported\" target=\"_blank\" rel=\"noopener\">Log</a><br>ic test need a framework which has not installed with iOS device. Set a Host Application for Unit Test can resolve this issue: App will run first and Uint Test run.</li>\n<li><strong>$(inherited) in xcode</strong>:<ol>\n<li>inherited值的是xcode设置项的继承关系。</li>\n<li>每个项目都有PROJECT的设置与TARGETS设置，TARGETS一般情况下就是继承自PROJECT</li>\n</ol>\n</li>\n<li><strong>“Xcode 6.3: Can not verify build to install on device”</strong><ol>\n<li>$(inherited) can be used to inherit build settings from the project level to the target level. When you define library or header search paths at the project level you can use $(inherited) in the target build settings to use these search paths in the search paths of the project targets.</li>\n</ol>\n</li>\n<li><strong>Verify Xcode:</strong><ol>\n<li>spctl –assess –verbose /Applications/Xcode.app</li>\n</ol>\n</li>\n<li><strong>Xcode显示模拟器时，使用的是UUID，而不是系统型号</strong><ol>\n<li><a href=\"http://stackoverflow.com/questions/26533025/xcode-using-guid-instead-of-ios-version-number-in-simulator-selection\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/26533025/xcode-using-guid-instead-of-ios-version-number-in-simulator-selection</a></li>\n<li>在Xcode-&gt;Devices里，选中重复的模拟器，右键菜单“删除”，即可。</li>\n</ol>\n</li>\n<li><strong>iPhone Simulator没有网络</strong><ol>\n<li><a href=\"http://stackoverflow.com/questions/13542706/iphone-simulator-cannot-connect-to-internet\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/13542706/iphone-simulator-cannot-connect-to-internet</a></li>\n<li>iOS Simulator (menu, top left) &gt; Reset Content and Settings… fixed it for me. Note this will delete all the apps and associated data you have on the simulator.</li>\n</ol>\n</li>\n<li><strong>ineligible device</strong><ol>\n<li>当前iOS版本比xcode版本高，就会出现这种情况，如iOS 9.1 就不能在Xcode 7上面进行调试，而只能在xcode 7.1进行调试。</li>\n</ol>\n</li>\n<li><strong>更新xcode版本后，出现插件不兼容的问题</strong><ol>\n<li><a href=\"http://joeshang.github.io/2015/04/10/fix-xcode-upgrade-plugin-invalid/\" target=\"_blank\" rel=\"noopener\">fix-xcode-upgrade-plugin-invalid</a></li>\n<li>find ~/Library/Application\\ Support/Developer/Shared/Xcode/Plug-ins -name Info.plist -maxdepth 3 | xargs -I{} defaults write {} DVTPlugInCompatibilityUUIDs -array-add <code>defaults read /Applications/Xcode.app/Contents/Info.plist DVTPlugInCompatibilityUUID</code></li>\n</ol>\n</li>\n<li><strong>检查代码中的FIXME、TODO、ERROR</strong><ol>\n<li><a href=\"http://krakendev.io/blog/generating-warnings-in-xcode\" target=\"_blank\" rel=\"noopener\">http://krakendev.io/blog/generating-warnings-in-xcode</a></li>\n</ol>\n</li>\n<li><strong>Xcode 7.3(Swift 2.2) Release配置出现Crash：</strong><ol>\n<li>在Debug和Staging配置环境下的build没有问题，但是Release编译出来的build会出现crash: unrecognised selector sent to instance</li>\n<li>尝试方法<ol>\n<li>《<a href=\"http://www.jianshu.com/p/06fcd298ef4c\" target=\"_blank\" rel=\"noopener\">iOS开发调试技巧</a>》</li>\n</ol>\n</li>\n<li>解决方法：<ol>\n<li>在Swift Compiler -&gt; Code Generation选择,使用<strong>Fast [-O]，而不能使用Fast, Whole Module Optimization</strong></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><strong>查看所有的Simulator：</strong><ol>\n<li>xcrun simctl list devices</li>\n</ol>\n</li>\n<li><strong>Xcode 注释功能不起作用：</strong><ol>\n<li>重启 Xcode,重启 MAC</li>\n<li>运行：sudo usr/libexec/xpccachectl</li>\n<li>重命名 Xcode，然后打开，恢复后，重新改名为 Xcode</li>\n</ol>\n</li>\n<li><strong>使用 Code Snippet</strong><ol>\n<li><a href=\"http://blog.csdn.net/wzzvictory/article/details/12163939\" target=\"_blank\" rel=\"noopener\">Xcode开发技巧之code snippets(代码片段)</a></li>\n<li>&lt;#type#&gt;占位符</li>\n<li>Xcode中的代码片段默认放在下面的目录中：~/Library/Developer/Xcode/UserData/CodeSnippets</li>\n</ol>\n</li>\n</ol>"},{"title":"iOS ReactNative私有库指南","date":"2018-10-20T14:11:52.000Z","_content":"\n# 创建RN私有库\n\n为了加速RN的下载和方便集成，我把RN(0.56.0)做成私有pod放到了gitlab的私有源中，参考《[使用Cocoapods创建私有podspec](http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/)》、《[私有Pods集成react-native库](https://imfong.com/post/Private-Pods-Add-react-native#yoga)》。\n\n<!-- more -->\n\n开始之前，需要搞清楚两个概念：\n\ncocoapods 是通过spec repos + pod source code repo 来进行代码版本管理，cocoapods 的[master spec repo](https://github.com/CocoaPods/Specs)来管理所有的第三方库 spec，每个 spec 中都包含了对于 pod 的 source code pod。\n\n**私有源仓库：**类似于 cocoapods 官方来管理 specs 的仓库，用来管理私有库的 spec，下文中使用`YOUR_SPECS_REPO`来指代。同时，这个 repo 也有自己的 git 地址，下文使用`YOUR_SPECS_GIT`\n\n**私有 pod 代码仓库**：存放私有库 source code 的 repo。\n\n\n\n下面是具体的操作步骤：\n\n## 创建私有ReactNative repo\n\n- 把 github 上的源码 clone 下来，然后 push 到自己的私有库 git 中\n- **仓库代码是github源码**\n- 修复0.56.0中WebSocket问题\n\n## 创建&修改 podspec.json\n\n- **切换到对应的tag commit: 如v0.56.0，下面的yoga和React需要保存version一致。**\n  - 然后按照《[私有Pods集成react-native库](https://imfong.com/post/Private-Pods-Add-react-native)》中生成和修改了yoga.podspec.json、React.podspec.json，需要修改yoga.podspec.json的source_files和public_header_files\n\n```bash\npod ipc spec React.podspec >> React.podspec.json\ncd ReactCommon/yoga\npod ipc spec yoga.podspec >> yoga.podspec.json\n```\n\n- 修改yoga.podspec.json\n```ruby\n\"git\": \"YOUR_RN_GIT\"\n\"source_files\": \"ReactCommon/yoga/**/*.{cpp,h}\",\n\"public_header_files\": \"ReactCommon/yoga/**/{Yoga,YGEnums,YGMacros}.h\"\n```\n\n## lint & push podspec.json\n\n- 需要注意的是，修改后的podspec.json文件，需要进行lint校验、上传到私有源，下面是yoga的方法\n```bash\npod spec lint yoga.podspec.json --no-clean --verbose --allow-warnings\npod repo push YOUR_SPECS_REPO yoga.podspec.json --allow-warnings\n```\n\n- 通过上面的方法可以吧RN和yoga添加到私有源中，但是我们pod install的时候，还是会报错\n\n  {% asset_img Folly-error.png %}\n\n  - Folly在RN中被CxxBridge、jschelpers等subspecs依赖，Folly.podspec文件本身在RN源码目录third-party-podspecs中，需要把Folly.podspec也上传到私有源中，否则pod install会出现错误\n\n  - 由于Folly在cocoapods公共源中已经没有维护，但是有志愿者维护了一个folly-ios的pod，需要我们添加到私有源中，添加方法和上面类似\n``` bash\npod repo push YOUR_SPECS_REPO Folly.podspec --allow-warnings\n```\n- 类似的，我们也需要把React.podspec.json文件提交到私有源中：\n```bash\npod spec lint React.podspec.json --no-clean --fail-fast --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.git\npod repo push YOUR_SPECS_REPO React.podspec.json --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.git\n```\n最终，我们总共需要添加了三个私有repo：**RN/Folly/yoga**\n\n## 创建离线js bundle包\n\n使用下面命令生成js bundle:\n\n```bash\nreact-native bundle --dev true --entry-file index.ios.js --bundle-output ios/main.jsbundle --platform ios\n```\n\n通过--dev参数(true/false)控制生成debug/release包\n\n# 如何维护RN版本\n\n同步Github上的ReactNative源码，在sourceTree中，添加remote:\n{% asset_img sourcetree.png %}\n\n切换到当前的分支(0.57-stable)，可以从github上面拉取最新代码（使用rebase）\n更新podspec.json\n\n```bash\npod ipc spec React.podspec >> React.podspec.json\ncd ReactCommon/yoga\npod ipc spec yoga.podspec >> yoga.podspec.json\n```\n\n**创建RN私有库**的中已经提供了需要修改的地方。\n\n**lint & push podspec.json**，或者直接在私有源中进行修改。\n\n## RN代码有bug怎么办？\n\n从RN 0.56.0到RN 0.57.3，都没有解决websocket crash问题。\n\n解决方法：\n\n1. 查看github issue，寻找问题解决方法。已web socket为例，已经用人[提了PR](https://github.com/facebook/react-native/pull/19489)\n\n2. 把PR中的源代码下载到本地，然后本地进行验证。验证通过后，则commit && push到当前tag 所在的分支\n\n3. 由于更新了RN源码，我们需要修改私有库中tag对应的commit：\n   1. 删除之前的tag（0.57.3），在最新的commit中来添加新tag（0.57.3)\n   2. 在React.podspec.json中，使用branch替代tag\n\n```\n\"source\": {\n    \"git\": \"YOUR_RN_GIT\",\n    \"branch\": \"0.57-stable\"\n  },\n```\n\n# 专治疑难杂症\n\n## **RN 0.56.0 问题：**\n\n- [**com.squareup.SocketRocket.NetworkThread(18): EXC_BAD_ACCESS**](https://github.com/facebook/react-native/issues/21086)\n\n  - 解决的PR:<https://github.com/facebook/react-native/pull/19489>\n\n- [**WebSocket `registerEvents` is undefined when running master**](https://github.com/facebook/react-native/issues/20567)\n\n  - 解决方法：<https://stackoverflow.com/a/52486616>\n\n## **RN 0.57.3 问题：**\n\n- **Unable to resolve module `schedule/tracking`**\n\n  {% asset_img schedule-error.png %}\n\n# **参考资料：**\n\n- [swift cocoapods Could not build Objective-C module 'React'](https://github.com/facebook/react-native/issues/19892)\n\n- [含泪导入React-native 0.54到Swift原生项目](https://www.jianshu.com/p/611b49ccf351)\n\n- [React Native 0.50.0 集成遇到的问题](https://www.jianshu.com/p/57ed76e90605)\n\n- 《[使用Cocoapods创建私有podspec](http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/)》\n\n- 《[私有Pods集成react-native库](https://imfong.com/post/Private-Pods-Add-react-native#yoga)》\n\n- [What's the difference between 'pod spec lint' and 'pod lib lint'?](https://stackoverflow.com/questions/32304421/whats-the-difference-between-pod-spec-lint-and-pod-lib-lint)","source":"_posts/iOS-ReactNative私有库指南.md","raw":"---\ntitle: iOS ReactNative私有库指南\ndate: 2018-10-20 22:11:52\ncategories:\n- 开发\n- ReactNative\ntags: \n- iOS\n- ReactNative\n---\n\n# 创建RN私有库\n\n为了加速RN的下载和方便集成，我把RN(0.56.0)做成私有pod放到了gitlab的私有源中，参考《[使用Cocoapods创建私有podspec](http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/)》、《[私有Pods集成react-native库](https://imfong.com/post/Private-Pods-Add-react-native#yoga)》。\n\n<!-- more -->\n\n开始之前，需要搞清楚两个概念：\n\ncocoapods 是通过spec repos + pod source code repo 来进行代码版本管理，cocoapods 的[master spec repo](https://github.com/CocoaPods/Specs)来管理所有的第三方库 spec，每个 spec 中都包含了对于 pod 的 source code pod。\n\n**私有源仓库：**类似于 cocoapods 官方来管理 specs 的仓库，用来管理私有库的 spec，下文中使用`YOUR_SPECS_REPO`来指代。同时，这个 repo 也有自己的 git 地址，下文使用`YOUR_SPECS_GIT`\n\n**私有 pod 代码仓库**：存放私有库 source code 的 repo。\n\n\n\n下面是具体的操作步骤：\n\n## 创建私有ReactNative repo\n\n- 把 github 上的源码 clone 下来，然后 push 到自己的私有库 git 中\n- **仓库代码是github源码**\n- 修复0.56.0中WebSocket问题\n\n## 创建&修改 podspec.json\n\n- **切换到对应的tag commit: 如v0.56.0，下面的yoga和React需要保存version一致。**\n  - 然后按照《[私有Pods集成react-native库](https://imfong.com/post/Private-Pods-Add-react-native)》中生成和修改了yoga.podspec.json、React.podspec.json，需要修改yoga.podspec.json的source_files和public_header_files\n\n```bash\npod ipc spec React.podspec >> React.podspec.json\ncd ReactCommon/yoga\npod ipc spec yoga.podspec >> yoga.podspec.json\n```\n\n- 修改yoga.podspec.json\n```ruby\n\"git\": \"YOUR_RN_GIT\"\n\"source_files\": \"ReactCommon/yoga/**/*.{cpp,h}\",\n\"public_header_files\": \"ReactCommon/yoga/**/{Yoga,YGEnums,YGMacros}.h\"\n```\n\n## lint & push podspec.json\n\n- 需要注意的是，修改后的podspec.json文件，需要进行lint校验、上传到私有源，下面是yoga的方法\n```bash\npod spec lint yoga.podspec.json --no-clean --verbose --allow-warnings\npod repo push YOUR_SPECS_REPO yoga.podspec.json --allow-warnings\n```\n\n- 通过上面的方法可以吧RN和yoga添加到私有源中，但是我们pod install的时候，还是会报错\n\n  {% asset_img Folly-error.png %}\n\n  - Folly在RN中被CxxBridge、jschelpers等subspecs依赖，Folly.podspec文件本身在RN源码目录third-party-podspecs中，需要把Folly.podspec也上传到私有源中，否则pod install会出现错误\n\n  - 由于Folly在cocoapods公共源中已经没有维护，但是有志愿者维护了一个folly-ios的pod，需要我们添加到私有源中，添加方法和上面类似\n``` bash\npod repo push YOUR_SPECS_REPO Folly.podspec --allow-warnings\n```\n- 类似的，我们也需要把React.podspec.json文件提交到私有源中：\n```bash\npod spec lint React.podspec.json --no-clean --fail-fast --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.git\npod repo push YOUR_SPECS_REPO React.podspec.json --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.git\n```\n最终，我们总共需要添加了三个私有repo：**RN/Folly/yoga**\n\n## 创建离线js bundle包\n\n使用下面命令生成js bundle:\n\n```bash\nreact-native bundle --dev true --entry-file index.ios.js --bundle-output ios/main.jsbundle --platform ios\n```\n\n通过--dev参数(true/false)控制生成debug/release包\n\n# 如何维护RN版本\n\n同步Github上的ReactNative源码，在sourceTree中，添加remote:\n{% asset_img sourcetree.png %}\n\n切换到当前的分支(0.57-stable)，可以从github上面拉取最新代码（使用rebase）\n更新podspec.json\n\n```bash\npod ipc spec React.podspec >> React.podspec.json\ncd ReactCommon/yoga\npod ipc spec yoga.podspec >> yoga.podspec.json\n```\n\n**创建RN私有库**的中已经提供了需要修改的地方。\n\n**lint & push podspec.json**，或者直接在私有源中进行修改。\n\n## RN代码有bug怎么办？\n\n从RN 0.56.0到RN 0.57.3，都没有解决websocket crash问题。\n\n解决方法：\n\n1. 查看github issue，寻找问题解决方法。已web socket为例，已经用人[提了PR](https://github.com/facebook/react-native/pull/19489)\n\n2. 把PR中的源代码下载到本地，然后本地进行验证。验证通过后，则commit && push到当前tag 所在的分支\n\n3. 由于更新了RN源码，我们需要修改私有库中tag对应的commit：\n   1. 删除之前的tag（0.57.3），在最新的commit中来添加新tag（0.57.3)\n   2. 在React.podspec.json中，使用branch替代tag\n\n```\n\"source\": {\n    \"git\": \"YOUR_RN_GIT\",\n    \"branch\": \"0.57-stable\"\n  },\n```\n\n# 专治疑难杂症\n\n## **RN 0.56.0 问题：**\n\n- [**com.squareup.SocketRocket.NetworkThread(18): EXC_BAD_ACCESS**](https://github.com/facebook/react-native/issues/21086)\n\n  - 解决的PR:<https://github.com/facebook/react-native/pull/19489>\n\n- [**WebSocket `registerEvents` is undefined when running master**](https://github.com/facebook/react-native/issues/20567)\n\n  - 解决方法：<https://stackoverflow.com/a/52486616>\n\n## **RN 0.57.3 问题：**\n\n- **Unable to resolve module `schedule/tracking`**\n\n  {% asset_img schedule-error.png %}\n\n# **参考资料：**\n\n- [swift cocoapods Could not build Objective-C module 'React'](https://github.com/facebook/react-native/issues/19892)\n\n- [含泪导入React-native 0.54到Swift原生项目](https://www.jianshu.com/p/611b49ccf351)\n\n- [React Native 0.50.0 集成遇到的问题](https://www.jianshu.com/p/57ed76e90605)\n\n- 《[使用Cocoapods创建私有podspec](http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/)》\n\n- 《[私有Pods集成react-native库](https://imfong.com/post/Private-Pods-Add-react-native#yoga)》\n\n- [What's the difference between 'pod spec lint' and 'pod lib lint'?](https://stackoverflow.com/questions/32304421/whats-the-difference-between-pod-spec-lint-and-pod-lib-lint)","slug":"iOS-ReactNative私有库指南","published":1,"updated":"2018-10-21T15:14:49.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnj0jygv0008kxu08ggwuj1m","content":"<h1 id=\"创建RN私有库\"><a href=\"#创建RN私有库\" class=\"headerlink\" title=\"创建RN私有库\"></a>创建RN私有库</h1><p>为了加速RN的下载和方便集成，我把RN(0.56.0)做成私有pod放到了gitlab的私有源中，参考《<a href=\"http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/\" target=\"_blank\" rel=\"noopener\">使用Cocoapods创建私有podspec</a>》、《<a href=\"https://imfong.com/post/Private-Pods-Add-react-native#yoga\" target=\"_blank\" rel=\"noopener\">私有Pods集成react-native库</a>》。</p>\n<a id=\"more\"></a>\n<p>开始之前，需要搞清楚两个概念：</p>\n<p>cocoapods 是通过spec repos + pod source code repo 来进行代码版本管理，cocoapods 的<a href=\"https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"noopener\">master spec repo</a>来管理所有的第三方库 spec，每个 spec 中都包含了对于 pod 的 source code pod。</p>\n<p><strong>私有源仓库：</strong>类似于 cocoapods 官方来管理 specs 的仓库，用来管理私有库的 spec，下文中使用<code>YOUR_SPECS_REPO</code>来指代。同时，这个 repo 也有自己的 git 地址，下文使用<code>YOUR_SPECS_GIT</code></p>\n<p><strong>私有 pod 代码仓库</strong>：存放私有库 source code 的 repo。</p>\n<p>下面是具体的操作步骤：</p>\n<h2 id=\"创建私有ReactNative-repo\"><a href=\"#创建私有ReactNative-repo\" class=\"headerlink\" title=\"创建私有ReactNative repo\"></a>创建私有ReactNative repo</h2><ul>\n<li>把 github 上的源码 clone 下来，然后 push 到自己的私有库 git 中</li>\n<li><strong>仓库代码是github源码</strong></li>\n<li>修复0.56.0中WebSocket问题</li>\n</ul>\n<h2 id=\"创建-amp-修改-podspec-json\"><a href=\"#创建-amp-修改-podspec-json\" class=\"headerlink\" title=\"创建&amp;修改 podspec.json\"></a>创建&amp;修改 podspec.json</h2><ul>\n<li><strong>切换到对应的tag commit: 如v0.56.0，下面的yoga和React需要保存version一致。</strong><ul>\n<li>然后按照《<a href=\"https://imfong.com/post/Private-Pods-Add-react-native\" target=\"_blank\" rel=\"noopener\">私有Pods集成react-native库</a>》中生成和修改了yoga.podspec.json、React.podspec.json，需要修改yoga.podspec.json的source_files和public_header_files</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod ipc spec React.podspec &gt;&gt; React.podspec.json</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ReactCommon/yoga</span><br><span class=\"line\">pod ipc spec yoga.podspec &gt;&gt; yoga.podspec.json</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改yoga.podspec.json<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"git\"</span>: <span class=\"string\">\"YOUR_RN_GIT\"</span></span><br><span class=\"line\"><span class=\"string\">\"source_files\"</span>: <span class=\"string\">\"ReactCommon/yoga/**/*.&#123;cpp,h&#125;\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"public_header_files\"</span>: <span class=\"string\">\"ReactCommon/yoga/**/&#123;Yoga,YGEnums,YGMacros&#125;.h\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"lint-amp-push-podspec-json\"><a href=\"#lint-amp-push-podspec-json\" class=\"headerlink\" title=\"lint &amp; push podspec.json\"></a>lint &amp; push podspec.json</h2><ul>\n<li><p>需要注意的是，修改后的podspec.json文件，需要进行lint校验、上传到私有源，下面是yoga的方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec lint yoga.podspec.json --no-clean --verbose --allow-warnings</span><br><span class=\"line\">pod repo push YOUR_SPECS_REPO yoga.podspec.json --allow-warnings</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过上面的方法可以吧RN和yoga添加到私有源中，但是我们pod install的时候，还是会报错</p>\n<img src=\"/2018/10/20/iOS-ReactNative私有库指南/Folly-error.png\">\n<ul>\n<li><p>Folly在RN中被CxxBridge、jschelpers等subspecs依赖，Folly.podspec文件本身在RN源码目录third-party-podspecs中，需要把Folly.podspec也上传到私有源中，否则pod install会出现错误</p>\n</li>\n<li><p>由于Folly在cocoapods公共源中已经没有维护，但是有志愿者维护了一个folly-ios的pod，需要我们添加到私有源中，添加方法和上面类似</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod repo push YOUR_SPECS_REPO Folly.podspec --allow-warnings</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>类似的，我们也需要把React.podspec.json文件提交到私有源中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec lint React.podspec.json --no-clean --fail-fast --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.git</span><br><span class=\"line\">pod repo push YOUR_SPECS_REPO React.podspec.json --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.git</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>最终，我们总共需要添加了三个私有repo：<strong>RN/Folly/yoga</strong></p>\n<h2 id=\"创建离线js-bundle包\"><a href=\"#创建离线js-bundle包\" class=\"headerlink\" title=\"创建离线js bundle包\"></a>创建离线js bundle包</h2><p>使用下面命令生成js bundle:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native bundle --dev <span class=\"literal\">true</span> --entry-file index.ios.js --bundle-output ios/main.jsbundle --platform ios</span><br></pre></td></tr></table></figure>\n<p>通过–dev参数(true/false)控制生成debug/release包</p>\n<h1 id=\"如何维护RN版本\"><a href=\"#如何维护RN版本\" class=\"headerlink\" title=\"如何维护RN版本\"></a>如何维护RN版本</h1><p>同步Github上的ReactNative源码，在sourceTree中，添加remote:<br><img src=\"/2018/10/20/iOS-ReactNative私有库指南/sourcetree.png\"></p>\n<p>切换到当前的分支(0.57-stable)，可以从github上面拉取最新代码（使用rebase）<br>更新podspec.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod ipc spec React.podspec &gt;&gt; React.podspec.json</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ReactCommon/yoga</span><br><span class=\"line\">pod ipc spec yoga.podspec &gt;&gt; yoga.podspec.json</span><br></pre></td></tr></table></figure>\n<p><strong>创建RN私有库</strong>的中已经提供了需要修改的地方。</p>\n<p><strong>lint &amp; push podspec.json</strong>，或者直接在私有源中进行修改。</p>\n<h2 id=\"RN代码有bug怎么办？\"><a href=\"#RN代码有bug怎么办？\" class=\"headerlink\" title=\"RN代码有bug怎么办？\"></a>RN代码有bug怎么办？</h2><p>从RN 0.56.0到RN 0.57.3，都没有解决websocket crash问题。</p>\n<p>解决方法：</p>\n<ol>\n<li><p>查看github issue，寻找问题解决方法。已web socket为例，已经用人<a href=\"https://github.com/facebook/react-native/pull/19489\" target=\"_blank\" rel=\"noopener\">提了PR</a></p>\n</li>\n<li><p>把PR中的源代码下载到本地，然后本地进行验证。验证通过后，则commit &amp;&amp; push到当前tag 所在的分支</p>\n</li>\n<li><p>由于更新了RN源码，我们需要修改私有库中tag对应的commit：</p>\n<ol>\n<li>删除之前的tag（0.57.3），在最新的commit中来添加新tag（0.57.3)</li>\n<li>在React.podspec.json中，使用branch替代tag</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;source&quot;: &#123;</span><br><span class=\"line\">    &quot;git&quot;: &quot;YOUR_RN_GIT&quot;,</span><br><span class=\"line\">    &quot;branch&quot;: &quot;0.57-stable&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h1 id=\"专治疑难杂症\"><a href=\"#专治疑难杂症\" class=\"headerlink\" title=\"专治疑难杂症\"></a>专治疑难杂症</h1><h2 id=\"RN-0-56-0-问题：\"><a href=\"#RN-0-56-0-问题：\" class=\"headerlink\" title=\"RN 0.56.0 问题：\"></a><strong>RN 0.56.0 问题：</strong></h2><ul>\n<li><p><a href=\"https://github.com/facebook/react-native/issues/21086\" target=\"_blank\" rel=\"noopener\"><strong>com.squareup.SocketRocket.NetworkThread(18): EXC_BAD_ACCESS</strong></a></p>\n<ul>\n<li>解决的PR:<a href=\"https://github.com/facebook/react-native/pull/19489\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/react-native/pull/19489</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/facebook/react-native/issues/20567\" target=\"_blank\" rel=\"noopener\"><strong>WebSocket <code>registerEvents</code> is undefined when running master</strong></a></p>\n<ul>\n<li>解决方法：<a href=\"https://stackoverflow.com/a/52486616\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/a/52486616</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"RN-0-57-3-问题：\"><a href=\"#RN-0-57-3-问题：\" class=\"headerlink\" title=\"RN 0.57.3 问题：\"></a><strong>RN 0.57.3 问题：</strong></h2><ul>\n<li><p><strong>Unable to resolve module <code>schedule/tracking</code></strong></p>\n<img src=\"/2018/10/20/iOS-ReactNative私有库指南/schedule-error.png\">\n</li>\n</ul>\n<h1 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a><strong>参考资料：</strong></h1><ul>\n<li><p><a href=\"https://github.com/facebook/react-native/issues/19892\" target=\"_blank\" rel=\"noopener\">swift cocoapods Could not build Objective-C module ‘React’</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/611b49ccf351\" target=\"_blank\" rel=\"noopener\">含泪导入React-native 0.54到Swift原生项目</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/57ed76e90605\" target=\"_blank\" rel=\"noopener\">React Native 0.50.0 集成遇到的问题</a></p>\n</li>\n<li><p>《<a href=\"http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/\" target=\"_blank\" rel=\"noopener\">使用Cocoapods创建私有podspec</a>》</p>\n</li>\n<li><p>《<a href=\"https://imfong.com/post/Private-Pods-Add-react-native#yoga\" target=\"_blank\" rel=\"noopener\">私有Pods集成react-native库</a>》</p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/questions/32304421/whats-the-difference-between-pod-spec-lint-and-pod-lib-lint\" target=\"_blank\" rel=\"noopener\">What’s the difference between ‘pod spec lint’ and ‘pod lib lint’?</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"创建RN私有库\"><a href=\"#创建RN私有库\" class=\"headerlink\" title=\"创建RN私有库\"></a>创建RN私有库</h1><p>为了加速RN的下载和方便集成，我把RN(0.56.0)做成私有pod放到了gitlab的私有源中，参考《<a href=\"http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/\" target=\"_blank\" rel=\"noopener\">使用Cocoapods创建私有podspec</a>》、《<a href=\"https://imfong.com/post/Private-Pods-Add-react-native#yoga\" target=\"_blank\" rel=\"noopener\">私有Pods集成react-native库</a>》。</p>","more":"<p>开始之前，需要搞清楚两个概念：</p>\n<p>cocoapods 是通过spec repos + pod source code repo 来进行代码版本管理，cocoapods 的<a href=\"https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"noopener\">master spec repo</a>来管理所有的第三方库 spec，每个 spec 中都包含了对于 pod 的 source code pod。</p>\n<p><strong>私有源仓库：</strong>类似于 cocoapods 官方来管理 specs 的仓库，用来管理私有库的 spec，下文中使用<code>YOUR_SPECS_REPO</code>来指代。同时，这个 repo 也有自己的 git 地址，下文使用<code>YOUR_SPECS_GIT</code></p>\n<p><strong>私有 pod 代码仓库</strong>：存放私有库 source code 的 repo。</p>\n<p>下面是具体的操作步骤：</p>\n<h2 id=\"创建私有ReactNative-repo\"><a href=\"#创建私有ReactNative-repo\" class=\"headerlink\" title=\"创建私有ReactNative repo\"></a>创建私有ReactNative repo</h2><ul>\n<li>把 github 上的源码 clone 下来，然后 push 到自己的私有库 git 中</li>\n<li><strong>仓库代码是github源码</strong></li>\n<li>修复0.56.0中WebSocket问题</li>\n</ul>\n<h2 id=\"创建-amp-修改-podspec-json\"><a href=\"#创建-amp-修改-podspec-json\" class=\"headerlink\" title=\"创建&amp;修改 podspec.json\"></a>创建&amp;修改 podspec.json</h2><ul>\n<li><strong>切换到对应的tag commit: 如v0.56.0，下面的yoga和React需要保存version一致。</strong><ul>\n<li>然后按照《<a href=\"https://imfong.com/post/Private-Pods-Add-react-native\" target=\"_blank\" rel=\"noopener\">私有Pods集成react-native库</a>》中生成和修改了yoga.podspec.json、React.podspec.json，需要修改yoga.podspec.json的source_files和public_header_files</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod ipc spec React.podspec &gt;&gt; React.podspec.json</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ReactCommon/yoga</span><br><span class=\"line\">pod ipc spec yoga.podspec &gt;&gt; yoga.podspec.json</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改yoga.podspec.json<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"git\"</span>: <span class=\"string\">\"YOUR_RN_GIT\"</span></span><br><span class=\"line\"><span class=\"string\">\"source_files\"</span>: <span class=\"string\">\"ReactCommon/yoga/**/*.&#123;cpp,h&#125;\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"public_header_files\"</span>: <span class=\"string\">\"ReactCommon/yoga/**/&#123;Yoga,YGEnums,YGMacros&#125;.h\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"lint-amp-push-podspec-json\"><a href=\"#lint-amp-push-podspec-json\" class=\"headerlink\" title=\"lint &amp; push podspec.json\"></a>lint &amp; push podspec.json</h2><ul>\n<li><p>需要注意的是，修改后的podspec.json文件，需要进行lint校验、上传到私有源，下面是yoga的方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec lint yoga.podspec.json --no-clean --verbose --allow-warnings</span><br><span class=\"line\">pod repo push YOUR_SPECS_REPO yoga.podspec.json --allow-warnings</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过上面的方法可以吧RN和yoga添加到私有源中，但是我们pod install的时候，还是会报错</p>\n<img src=\"/2018/10/20/iOS-ReactNative私有库指南/Folly-error.png\">\n<ul>\n<li><p>Folly在RN中被CxxBridge、jschelpers等subspecs依赖，Folly.podspec文件本身在RN源码目录third-party-podspecs中，需要把Folly.podspec也上传到私有源中，否则pod install会出现错误</p>\n</li>\n<li><p>由于Folly在cocoapods公共源中已经没有维护，但是有志愿者维护了一个folly-ios的pod，需要我们添加到私有源中，添加方法和上面类似</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod repo push YOUR_SPECS_REPO Folly.podspec --allow-warnings</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>类似的，我们也需要把React.podspec.json文件提交到私有源中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec lint React.podspec.json --no-clean --fail-fast --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.git</span><br><span class=\"line\">pod repo push YOUR_SPECS_REPO React.podspec.json --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.git</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>最终，我们总共需要添加了三个私有repo：<strong>RN/Folly/yoga</strong></p>\n<h2 id=\"创建离线js-bundle包\"><a href=\"#创建离线js-bundle包\" class=\"headerlink\" title=\"创建离线js bundle包\"></a>创建离线js bundle包</h2><p>使用下面命令生成js bundle:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native bundle --dev <span class=\"literal\">true</span> --entry-file index.ios.js --bundle-output ios/main.jsbundle --platform ios</span><br></pre></td></tr></table></figure>\n<p>通过–dev参数(true/false)控制生成debug/release包</p>\n<h1 id=\"如何维护RN版本\"><a href=\"#如何维护RN版本\" class=\"headerlink\" title=\"如何维护RN版本\"></a>如何维护RN版本</h1><p>同步Github上的ReactNative源码，在sourceTree中，添加remote:<br><img src=\"/2018/10/20/iOS-ReactNative私有库指南/sourcetree.png\"></p>\n<p>切换到当前的分支(0.57-stable)，可以从github上面拉取最新代码（使用rebase）<br>更新podspec.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod ipc spec React.podspec &gt;&gt; React.podspec.json</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ReactCommon/yoga</span><br><span class=\"line\">pod ipc spec yoga.podspec &gt;&gt; yoga.podspec.json</span><br></pre></td></tr></table></figure>\n<p><strong>创建RN私有库</strong>的中已经提供了需要修改的地方。</p>\n<p><strong>lint &amp; push podspec.json</strong>，或者直接在私有源中进行修改。</p>\n<h2 id=\"RN代码有bug怎么办？\"><a href=\"#RN代码有bug怎么办？\" class=\"headerlink\" title=\"RN代码有bug怎么办？\"></a>RN代码有bug怎么办？</h2><p>从RN 0.56.0到RN 0.57.3，都没有解决websocket crash问题。</p>\n<p>解决方法：</p>\n<ol>\n<li><p>查看github issue，寻找问题解决方法。已web socket为例，已经用人<a href=\"https://github.com/facebook/react-native/pull/19489\" target=\"_blank\" rel=\"noopener\">提了PR</a></p>\n</li>\n<li><p>把PR中的源代码下载到本地，然后本地进行验证。验证通过后，则commit &amp;&amp; push到当前tag 所在的分支</p>\n</li>\n<li><p>由于更新了RN源码，我们需要修改私有库中tag对应的commit：</p>\n<ol>\n<li>删除之前的tag（0.57.3），在最新的commit中来添加新tag（0.57.3)</li>\n<li>在React.podspec.json中，使用branch替代tag</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;source&quot;: &#123;</span><br><span class=\"line\">    &quot;git&quot;: &quot;YOUR_RN_GIT&quot;,</span><br><span class=\"line\">    &quot;branch&quot;: &quot;0.57-stable&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h1 id=\"专治疑难杂症\"><a href=\"#专治疑难杂症\" class=\"headerlink\" title=\"专治疑难杂症\"></a>专治疑难杂症</h1><h2 id=\"RN-0-56-0-问题：\"><a href=\"#RN-0-56-0-问题：\" class=\"headerlink\" title=\"RN 0.56.0 问题：\"></a><strong>RN 0.56.0 问题：</strong></h2><ul>\n<li><p><a href=\"https://github.com/facebook/react-native/issues/21086\" target=\"_blank\" rel=\"noopener\"><strong>com.squareup.SocketRocket.NetworkThread(18): EXC_BAD_ACCESS</strong></a></p>\n<ul>\n<li>解决的PR:<a href=\"https://github.com/facebook/react-native/pull/19489\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/react-native/pull/19489</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/facebook/react-native/issues/20567\" target=\"_blank\" rel=\"noopener\"><strong>WebSocket <code>registerEvents</code> is undefined when running master</strong></a></p>\n<ul>\n<li>解决方法：<a href=\"https://stackoverflow.com/a/52486616\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/a/52486616</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"RN-0-57-3-问题：\"><a href=\"#RN-0-57-3-问题：\" class=\"headerlink\" title=\"RN 0.57.3 问题：\"></a><strong>RN 0.57.3 问题：</strong></h2><ul>\n<li><p><strong>Unable to resolve module <code>schedule/tracking</code></strong></p>\n<img src=\"/2018/10/20/iOS-ReactNative私有库指南/schedule-error.png\">\n</li>\n</ul>\n<h1 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a><strong>参考资料：</strong></h1><ul>\n<li><p><a href=\"https://github.com/facebook/react-native/issues/19892\" target=\"_blank\" rel=\"noopener\">swift cocoapods Could not build Objective-C module ‘React’</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/611b49ccf351\" target=\"_blank\" rel=\"noopener\">含泪导入React-native 0.54到Swift原生项目</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/57ed76e90605\" target=\"_blank\" rel=\"noopener\">React Native 0.50.0 集成遇到的问题</a></p>\n</li>\n<li><p>《<a href=\"http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/\" target=\"_blank\" rel=\"noopener\">使用Cocoapods创建私有podspec</a>》</p>\n</li>\n<li><p>《<a href=\"https://imfong.com/post/Private-Pods-Add-react-native#yoga\" target=\"_blank\" rel=\"noopener\">私有Pods集成react-native库</a>》</p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/questions/32304421/whats-the-difference-between-pod-spec-lint-and-pod-lib-lint\" target=\"_blank\" rel=\"noopener\">What’s the difference between ‘pod spec lint’ and ‘pod lib lint’?</a></p>\n</li>\n</ul>"},{"title":"git常用手册","date":"2016-11-11T08:26:14.000Z","_content":"\nGit 是每个开发童鞋必须掌握的工具，本文记录博主日常开发使用 git时，遇到的问题和常用的解决方法：\n\n<!-- more -->\n\n1. No submodule mapping found in .gitmodules for path 'Frameworks/XXX'\n    1. 参考：http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule\n    2. $**git submodule**\n    3. $**git rm 'Frameworks/XXX'**\n2. 检查非法的branch名字\n    1. A branch name can not:\n- Have a path component that begins with \".\"\n- Have a double dot \"..\"\n- Have an ASCII control character, \"~\", \"^\", \":\" or SP, anywhere\n- End with a \"/\" - End with \".lock\"\n- Contain a \"\\\" (backslash\n3. 拉取其他分支代码到当前分支：Git pull rebase\n    1. 当我们需要从别的分支上面拉取代码，并且希望被拉取的commit能够很好地rebase到当前分支,我们就需要用到pull rebase\n    2. 示例：从develop拉取代码到当前分支：\n        * 确保本地分支代码和develop都已经push到origin\n        * git pull --rebase origin develop\n            * 把develop分支代码拉取到当前分支，此时会发现当前分支和develop分支代码并没有rebase,还是在两条不同的线上\n            * 拉取完成后会发现如下的一些提示：\n                * On branch feature/music\n                * Your branch and 'origin/feature/xxx' have diverged,\n                * and have 9 and 6 different commits each, respectively.\n                * (use \"git pull\" to merge the remote branch into yours)\n                * nothing to commit, working directory clean\n        * git push -f\n            * 把本地分支和develop分支强行push到origin\n            * git push 会导致错误，因为使用pull rebase操作会生成两个不同的分支（Your branch and 'origin/feature/music' have diverged）\n4. Git分支管理策略\n     1.推荐阅读 《[Git分支管理策略 - 阮一峰的网络日志](http://www.ruanyifeng.com/blog/2012/07/git.html)》\n5. git workflow:\n        1. 只需要保留master和develop分支。\n        2. 日常开发时，从develop上面开一个feature分支，完成开发后，按需merge到develop分支中，merge成功后，可以删除feature分支。\n        3. 发布前，使用release分支\n        4. 产品上线后，使用从master分支fork出hotfix分支，完成bug修复后，merge到master和develop分支。\n6. Github pull request\n    1. 《Mort | Pull Request的正确打开方式（如何在GitHub上贡献开源项目）》 -- 原文404，可以参考转载\n7. Github Repo Migration:\n    1. Github fork repo\n    2. Github import repo\n8. Git 修改commit message:\n    1. git commit --amend -m \"New commit message\"\n9. 查找commit message:\n    1. git log --oneline | grep PATTERN\n10. 多个github账号的管理：\n   1. https://gist.github.com/jexchan/2351996\n   2. 本人常年使用公司和个人的Github帐号，在正确配置github帐号后，可以用命令行进行帐号切换。\n11. 清除git缓存：\n    1. 有的时候会出现.gitignore文件不起作用的情况，需要清理git缓存：\n    2. $ git rm --cached -r FOLDER_NAME\n    3. $ git add .\n    4. $ git commit -m “COMMIT_MSG\"","source":"_posts/git常用手册.md","raw":"---\ntitle: git常用手册\ndate: 2016-11-11 16:26:14\ntags: git\ncategories: 开发\n---\n\nGit 是每个开发童鞋必须掌握的工具，本文记录博主日常开发使用 git时，遇到的问题和常用的解决方法：\n\n<!-- more -->\n\n1. No submodule mapping found in .gitmodules for path 'Frameworks/XXX'\n    1. 参考：http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule\n    2. $**git submodule**\n    3. $**git rm 'Frameworks/XXX'**\n2. 检查非法的branch名字\n    1. A branch name can not:\n- Have a path component that begins with \".\"\n- Have a double dot \"..\"\n- Have an ASCII control character, \"~\", \"^\", \":\" or SP, anywhere\n- End with a \"/\" - End with \".lock\"\n- Contain a \"\\\" (backslash\n3. 拉取其他分支代码到当前分支：Git pull rebase\n    1. 当我们需要从别的分支上面拉取代码，并且希望被拉取的commit能够很好地rebase到当前分支,我们就需要用到pull rebase\n    2. 示例：从develop拉取代码到当前分支：\n        * 确保本地分支代码和develop都已经push到origin\n        * git pull --rebase origin develop\n            * 把develop分支代码拉取到当前分支，此时会发现当前分支和develop分支代码并没有rebase,还是在两条不同的线上\n            * 拉取完成后会发现如下的一些提示：\n                * On branch feature/music\n                * Your branch and 'origin/feature/xxx' have diverged,\n                * and have 9 and 6 different commits each, respectively.\n                * (use \"git pull\" to merge the remote branch into yours)\n                * nothing to commit, working directory clean\n        * git push -f\n            * 把本地分支和develop分支强行push到origin\n            * git push 会导致错误，因为使用pull rebase操作会生成两个不同的分支（Your branch and 'origin/feature/music' have diverged）\n4. Git分支管理策略\n     1.推荐阅读 《[Git分支管理策略 - 阮一峰的网络日志](http://www.ruanyifeng.com/blog/2012/07/git.html)》\n5. git workflow:\n        1. 只需要保留master和develop分支。\n        2. 日常开发时，从develop上面开一个feature分支，完成开发后，按需merge到develop分支中，merge成功后，可以删除feature分支。\n        3. 发布前，使用release分支\n        4. 产品上线后，使用从master分支fork出hotfix分支，完成bug修复后，merge到master和develop分支。\n6. Github pull request\n    1. 《Mort | Pull Request的正确打开方式（如何在GitHub上贡献开源项目）》 -- 原文404，可以参考转载\n7. Github Repo Migration:\n    1. Github fork repo\n    2. Github import repo\n8. Git 修改commit message:\n    1. git commit --amend -m \"New commit message\"\n9. 查找commit message:\n    1. git log --oneline | grep PATTERN\n10. 多个github账号的管理：\n   1. https://gist.github.com/jexchan/2351996\n   2. 本人常年使用公司和个人的Github帐号，在正确配置github帐号后，可以用命令行进行帐号切换。\n11. 清除git缓存：\n    1. 有的时候会出现.gitignore文件不起作用的情况，需要清理git缓存：\n    2. $ git rm --cached -r FOLDER_NAME\n    3. $ git add .\n    4. $ git commit -m “COMMIT_MSG\"","slug":"git常用手册","published":1,"updated":"2018-10-20T15:59:18.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnj0jygz000ckxu094l2axjc","content":"<p>Git 是每个开发童鞋必须掌握的工具，本文记录博主日常开发使用 git时，遇到的问题和常用的解决方法：</p>\n<a id=\"more\"></a>\n<ol>\n<li>No submodule mapping found in .gitmodules for path ‘Frameworks/XXX’<ol>\n<li>参考：<a href=\"http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule</a></li>\n<li>$<strong>git submodule</strong></li>\n<li>$<strong>git rm ‘Frameworks/XXX’</strong></li>\n</ol>\n</li>\n<li>检查非法的branch名字<ol>\n<li>A branch name can not:</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>Have a path component that begins with “.”</li>\n<li>Have a double dot “..”</li>\n<li>Have an ASCII control character, “~”, “^”, “:” or SP, anywhere</li>\n<li>End with a “/“ - End with “.lock”</li>\n<li>Contain a “\\” (backslash</li>\n</ul>\n<ol start=\"3\">\n<li>拉取其他分支代码到当前分支：Git pull rebase<ol>\n<li>当我们需要从别的分支上面拉取代码，并且希望被拉取的commit能够很好地rebase到当前分支,我们就需要用到pull rebase</li>\n<li>示例：从develop拉取代码到当前分支：<ul>\n<li>确保本地分支代码和develop都已经push到origin</li>\n<li>git pull –rebase origin develop<ul>\n<li>把develop分支代码拉取到当前分支，此时会发现当前分支和develop分支代码并没有rebase,还是在两条不同的线上</li>\n<li>拉取完成后会发现如下的一些提示：<ul>\n<li>On branch feature/music</li>\n<li>Your branch and ‘origin/feature/xxx’ have diverged,</li>\n<li>and have 9 and 6 different commits each, respectively.</li>\n<li>(use “git pull” to merge the remote branch into yours)</li>\n<li>nothing to commit, working directory clean</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>git push -f<ul>\n<li>把本地分支和develop分支强行push到origin</li>\n<li>git push 会导致错误，因为使用pull rebase操作会生成两个不同的分支（Your branch and ‘origin/feature/music’ have diverged）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Git分支管理策略<br>  1.推荐阅读 《<a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\" target=\"_blank\" rel=\"noopener\">Git分支管理策略 - 阮一峰的网络日志</a>》</li>\n<li>git workflow:<pre><code>1. 只需要保留master和develop分支。\n2. 日常开发时，从develop上面开一个feature分支，完成开发后，按需merge到develop分支中，merge成功后，可以删除feature分支。\n3. 发布前，使用release分支\n4. 产品上线后，使用从master分支fork出hotfix分支，完成bug修复后，merge到master和develop分支。\n</code></pre></li>\n<li>Github pull request<ol>\n<li>《Mort | Pull Request的正确打开方式（如何在GitHub上贡献开源项目）》 – 原文404，可以参考转载</li>\n</ol>\n</li>\n<li>Github Repo Migration:<ol>\n<li>Github fork repo</li>\n<li>Github import repo</li>\n</ol>\n</li>\n<li>Git 修改commit message:<ol>\n<li>git commit –amend -m “New commit message”</li>\n</ol>\n</li>\n<li>查找commit message:<ol>\n<li>git log –oneline | grep PATTERN</li>\n</ol>\n</li>\n<li>多个github账号的管理：<ol>\n<li><a href=\"https://gist.github.com/jexchan/2351996\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/jexchan/2351996</a></li>\n<li>本人常年使用公司和个人的Github帐号，在正确配置github帐号后，可以用命令行进行帐号切换。</li>\n</ol>\n</li>\n<li>清除git缓存：<ol>\n<li>有的时候会出现.gitignore文件不起作用的情况，需要清理git缓存：</li>\n<li>$ git rm –cached -r FOLDER_NAME</li>\n<li>$ git add .</li>\n<li>$ git commit -m “COMMIT_MSG”</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Git 是每个开发童鞋必须掌握的工具，本文记录博主日常开发使用 git时，遇到的问题和常用的解决方法：</p>","more":"<ol>\n<li>No submodule mapping found in .gitmodules for path ‘Frameworks/XXX’<ol>\n<li>参考：<a href=\"http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule</a></li>\n<li>$<strong>git submodule</strong></li>\n<li>$<strong>git rm ‘Frameworks/XXX’</strong></li>\n</ol>\n</li>\n<li>检查非法的branch名字<ol>\n<li>A branch name can not:</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>Have a path component that begins with “.”</li>\n<li>Have a double dot “..”</li>\n<li>Have an ASCII control character, “~”, “^”, “:” or SP, anywhere</li>\n<li>End with a “/“ - End with “.lock”</li>\n<li>Contain a “\\” (backslash</li>\n</ul>\n<ol start=\"3\">\n<li>拉取其他分支代码到当前分支：Git pull rebase<ol>\n<li>当我们需要从别的分支上面拉取代码，并且希望被拉取的commit能够很好地rebase到当前分支,我们就需要用到pull rebase</li>\n<li>示例：从develop拉取代码到当前分支：<ul>\n<li>确保本地分支代码和develop都已经push到origin</li>\n<li>git pull –rebase origin develop<ul>\n<li>把develop分支代码拉取到当前分支，此时会发现当前分支和develop分支代码并没有rebase,还是在两条不同的线上</li>\n<li>拉取完成后会发现如下的一些提示：<ul>\n<li>On branch feature/music</li>\n<li>Your branch and ‘origin/feature/xxx’ have diverged,</li>\n<li>and have 9 and 6 different commits each, respectively.</li>\n<li>(use “git pull” to merge the remote branch into yours)</li>\n<li>nothing to commit, working directory clean</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>git push -f<ul>\n<li>把本地分支和develop分支强行push到origin</li>\n<li>git push 会导致错误，因为使用pull rebase操作会生成两个不同的分支（Your branch and ‘origin/feature/music’ have diverged）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Git分支管理策略<br>  1.推荐阅读 《<a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\" target=\"_blank\" rel=\"noopener\">Git分支管理策略 - 阮一峰的网络日志</a>》</li>\n<li>git workflow:<pre><code>1. 只需要保留master和develop分支。\n2. 日常开发时，从develop上面开一个feature分支，完成开发后，按需merge到develop分支中，merge成功后，可以删除feature分支。\n3. 发布前，使用release分支\n4. 产品上线后，使用从master分支fork出hotfix分支，完成bug修复后，merge到master和develop分支。\n</code></pre></li>\n<li>Github pull request<ol>\n<li>《Mort | Pull Request的正确打开方式（如何在GitHub上贡献开源项目）》 – 原文404，可以参考转载</li>\n</ol>\n</li>\n<li>Github Repo Migration:<ol>\n<li>Github fork repo</li>\n<li>Github import repo</li>\n</ol>\n</li>\n<li>Git 修改commit message:<ol>\n<li>git commit –amend -m “New commit message”</li>\n</ol>\n</li>\n<li>查找commit message:<ol>\n<li>git log –oneline | grep PATTERN</li>\n</ol>\n</li>\n<li>多个github账号的管理：<ol>\n<li><a href=\"https://gist.github.com/jexchan/2351996\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/jexchan/2351996</a></li>\n<li>本人常年使用公司和个人的Github帐号，在正确配置github帐号后，可以用命令行进行帐号切换。</li>\n</ol>\n</li>\n<li>清除git缓存：<ol>\n<li>有的时候会出现.gitignore文件不起作用的情况，需要清理git缓存：</li>\n<li>$ git rm –cached -r FOLDER_NAME</li>\n<li>$ git add .</li>\n<li>$ git commit -m “COMMIT_MSG”</li>\n</ol>\n</li>\n</ol>"},{"title":"iOS 网络安全之SSL Pinning","date":"2016-12-27T03:33:56.000Z","_content":"\n## **前言：**\n\nApple要求所有的 App 在2017年1月必须强制使用 ATS(Application Transport Security)，即 App 必须使用 HTTPS，而不能使用 HTTP 网络协议。这是Apple 在 app 安全领域做出的一个重大的举动，HTTP 由于使用明文进行传输，存在很大的安全隐患，网络请求容易被拦截和篡改。HTTPS 在安全性上相较于 HTTP 有很大的提升，依然存在一些问题：如 [MITT](http://www.secbox.cn/hacker/7846.html)(Man-In-The-Middle)中间人攻击和2014年 SSL 的[心脏出血漏洞](http://www.ithome.com/html/soft/80224.htm)。网络安全的问题看似离我们很远，其实就发生在我们身边，对我们的日常生活也会有很大的影响，特别是在移动互联网的浪潮下，人手一台手机的情况下，大家普遍使用支付宝和微信支付来进行支付，能够联网的智能家居产品越来越多的走入到普通家庭中，网络安全是一个需要引起重视的问题。而在网络传输过程中起到安全保障作用的，就是我们今天要讲的 SSL/TLS，当然主要是集中在 iOS 客户端。\n\n<!-- more -->\n\n## **0x00 - 什么是 SSL/TLS**\n\nSSL(Secure Sockets Layer 安全套接层)及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。SSL为Netscape所研发，用以保障在Internet上数据传输的安全，利用数据加密(Encryption)的技术，可确保数据在网络上的传输过程中不会被截取及窃听。SSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。 **— 摘自《互动百科》**\n\n从上面的定义可以看出 SSL 是一个加密层，主要用于信息加密、验证。\n\nSSL 主要提供下面三个服务：\n\n1. **认证用户和服务器**，确保数据发送到正确的客户机和服务器；\n2. **加密数据**以防止数据中途被窃听；\n3. 维护**数据的完整性**，确保数据在传输过程中不被改变。\n\n## **0x01 - 什么是 HTTPS**\n\nHTTPS（Hypertext Transfer Protocol Secure 安全超文本传输协议） 是由 Netscape 开发并内置于其浏览器中，用于对数据进行压缩和解压操作，并返回网络上传送回的结果，HTTPS 实际上运用了 Netscape 的完全套接字层（SSL）作为 HTTP 应用层的子层。\n\n## **0x02 - SSL Pinning 是什么**\n\n当前主流的各大网站 Google、Facebook 等都使用 HTTPS 来保障数据的安全性和私密性，但是在 HTTPS 协议也存在一定的问题，其中广为人知是 MIIT（中间人工具），攻击者在客户端和服务器中进行伪装和欺骗，从而获取敏感信息。\n\nSSL Pinning 是一个业界预防 MIIT 攻击的解决方案，其主要思想是在客户端绑定（Pin）服务器SSL 证书的核心信息，这个解决方案代价小，易于实施，因此被普遍使用。\n\n## **0x03 - 在 iOS 中如何使用 SSL Pinning**\n\niOS 中的 SSL Pinning 主要有三种形式：\n\n1. 直接使用 NSURLSession\n2. 配合AFNetworking 使用\n3. 配合 Alamofire 使用\n\nNSURLSession 是 iOS 系统提供的类，AFNetworking 和 Alamofire 识别是 ObjC和 Swift 编写的第三方库，具体实施步骤，可以参考[这篇 blog](https://infinum.co/the-capsized-eight/how-to-make-your-ios-apps-more-secure-with-ssl-pinning)。\n\n## **参考文章：**\n\n- [SSL - 互动百科](http://www.baike.com/wiki/ssl&prd=button_doc_entry)\n- [SSL - 百度百科](http://baike.baidu.com/item/ssl)\n- [How to make your iOS apps more secure with SSL pinning](https://infinum.co/the-capsized-eight/how-to-make-your-ios-apps-more-secure-with-ssl-pinning)\n- [iOS环境下的中间人攻击风险浅析](http://www.secbox.cn/hacker/7846.html)","source":"_posts/iOS-网络安全之SSL-Pinning.md","raw":"---\ntitle: iOS 网络安全之SSL Pinning\ndate: 2016-12-27 11:33:56\ntags: \n - iOS\ncategories: 开发\n---\n\n## **前言：**\n\nApple要求所有的 App 在2017年1月必须强制使用 ATS(Application Transport Security)，即 App 必须使用 HTTPS，而不能使用 HTTP 网络协议。这是Apple 在 app 安全领域做出的一个重大的举动，HTTP 由于使用明文进行传输，存在很大的安全隐患，网络请求容易被拦截和篡改。HTTPS 在安全性上相较于 HTTP 有很大的提升，依然存在一些问题：如 [MITT](http://www.secbox.cn/hacker/7846.html)(Man-In-The-Middle)中间人攻击和2014年 SSL 的[心脏出血漏洞](http://www.ithome.com/html/soft/80224.htm)。网络安全的问题看似离我们很远，其实就发生在我们身边，对我们的日常生活也会有很大的影响，特别是在移动互联网的浪潮下，人手一台手机的情况下，大家普遍使用支付宝和微信支付来进行支付，能够联网的智能家居产品越来越多的走入到普通家庭中，网络安全是一个需要引起重视的问题。而在网络传输过程中起到安全保障作用的，就是我们今天要讲的 SSL/TLS，当然主要是集中在 iOS 客户端。\n\n<!-- more -->\n\n## **0x00 - 什么是 SSL/TLS**\n\nSSL(Secure Sockets Layer 安全套接层)及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。SSL为Netscape所研发，用以保障在Internet上数据传输的安全，利用数据加密(Encryption)的技术，可确保数据在网络上的传输过程中不会被截取及窃听。SSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。 **— 摘自《互动百科》**\n\n从上面的定义可以看出 SSL 是一个加密层，主要用于信息加密、验证。\n\nSSL 主要提供下面三个服务：\n\n1. **认证用户和服务器**，确保数据发送到正确的客户机和服务器；\n2. **加密数据**以防止数据中途被窃听；\n3. 维护**数据的完整性**，确保数据在传输过程中不被改变。\n\n## **0x01 - 什么是 HTTPS**\n\nHTTPS（Hypertext Transfer Protocol Secure 安全超文本传输协议） 是由 Netscape 开发并内置于其浏览器中，用于对数据进行压缩和解压操作，并返回网络上传送回的结果，HTTPS 实际上运用了 Netscape 的完全套接字层（SSL）作为 HTTP 应用层的子层。\n\n## **0x02 - SSL Pinning 是什么**\n\n当前主流的各大网站 Google、Facebook 等都使用 HTTPS 来保障数据的安全性和私密性，但是在 HTTPS 协议也存在一定的问题，其中广为人知是 MIIT（中间人工具），攻击者在客户端和服务器中进行伪装和欺骗，从而获取敏感信息。\n\nSSL Pinning 是一个业界预防 MIIT 攻击的解决方案，其主要思想是在客户端绑定（Pin）服务器SSL 证书的核心信息，这个解决方案代价小，易于实施，因此被普遍使用。\n\n## **0x03 - 在 iOS 中如何使用 SSL Pinning**\n\niOS 中的 SSL Pinning 主要有三种形式：\n\n1. 直接使用 NSURLSession\n2. 配合AFNetworking 使用\n3. 配合 Alamofire 使用\n\nNSURLSession 是 iOS 系统提供的类，AFNetworking 和 Alamofire 识别是 ObjC和 Swift 编写的第三方库，具体实施步骤，可以参考[这篇 blog](https://infinum.co/the-capsized-eight/how-to-make-your-ios-apps-more-secure-with-ssl-pinning)。\n\n## **参考文章：**\n\n- [SSL - 互动百科](http://www.baike.com/wiki/ssl&prd=button_doc_entry)\n- [SSL - 百度百科](http://baike.baidu.com/item/ssl)\n- [How to make your iOS apps more secure with SSL pinning](https://infinum.co/the-capsized-eight/how-to-make-your-ios-apps-more-secure-with-ssl-pinning)\n- [iOS环境下的中间人攻击风险浅析](http://www.secbox.cn/hacker/7846.html)","slug":"iOS-网络安全之SSL-Pinning","published":1,"updated":"2018-10-20T15:59:18.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnj0jyh1000dkxu0crb4sxrd","content":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a><strong>前言：</strong></h2><p>Apple要求所有的 App 在2017年1月必须强制使用 ATS(Application Transport Security)，即 App 必须使用 HTTPS，而不能使用 HTTP 网络协议。这是Apple 在 app 安全领域做出的一个重大的举动，HTTP 由于使用明文进行传输，存在很大的安全隐患，网络请求容易被拦截和篡改。HTTPS 在安全性上相较于 HTTP 有很大的提升，依然存在一些问题：如 <a href=\"http://www.secbox.cn/hacker/7846.html\" target=\"_blank\" rel=\"noopener\">MITT</a>(Man-In-The-Middle)中间人攻击和2014年 SSL 的<a href=\"http://www.ithome.com/html/soft/80224.htm\" target=\"_blank\" rel=\"noopener\">心脏出血漏洞</a>。网络安全的问题看似离我们很远，其实就发生在我们身边，对我们的日常生活也会有很大的影响，特别是在移动互联网的浪潮下，人手一台手机的情况下，大家普遍使用支付宝和微信支付来进行支付，能够联网的智能家居产品越来越多的走入到普通家庭中，网络安全是一个需要引起重视的问题。而在网络传输过程中起到安全保障作用的，就是我们今天要讲的 SSL/TLS，当然主要是集中在 iOS 客户端。</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-什么是-SSL-TLS\"><a href=\"#0x00-什么是-SSL-TLS\" class=\"headerlink\" title=\"0x00 - 什么是 SSL/TLS\"></a><strong>0x00 - 什么是 SSL/TLS</strong></h2><p>SSL(Secure Sockets Layer 安全套接层)及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。SSL为Netscape所研发，用以保障在Internet上数据传输的安全，利用数据加密(Encryption)的技术，可确保数据在网络上的传输过程中不会被截取及窃听。SSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。 <strong>— 摘自《互动百科》</strong></p>\n<p>从上面的定义可以看出 SSL 是一个加密层，主要用于信息加密、验证。</p>\n<p>SSL 主要提供下面三个服务：</p>\n<ol>\n<li><strong>认证用户和服务器</strong>，确保数据发送到正确的客户机和服务器；</li>\n<li><strong>加密数据</strong>以防止数据中途被窃听；</li>\n<li>维护<strong>数据的完整性</strong>，确保数据在传输过程中不被改变。</li>\n</ol>\n<h2 id=\"0x01-什么是-HTTPS\"><a href=\"#0x01-什么是-HTTPS\" class=\"headerlink\" title=\"0x01 - 什么是 HTTPS\"></a><strong>0x01 - 什么是 HTTPS</strong></h2><p>HTTPS（Hypertext Transfer Protocol Secure 安全超文本传输协议） 是由 Netscape 开发并内置于其浏览器中，用于对数据进行压缩和解压操作，并返回网络上传送回的结果，HTTPS 实际上运用了 Netscape 的完全套接字层（SSL）作为 HTTP 应用层的子层。</p>\n<h2 id=\"0x02-SSL-Pinning-是什么\"><a href=\"#0x02-SSL-Pinning-是什么\" class=\"headerlink\" title=\"0x02 - SSL Pinning 是什么\"></a><strong>0x02 - SSL Pinning 是什么</strong></h2><p>当前主流的各大网站 Google、Facebook 等都使用 HTTPS 来保障数据的安全性和私密性，但是在 HTTPS 协议也存在一定的问题，其中广为人知是 MIIT（中间人工具），攻击者在客户端和服务器中进行伪装和欺骗，从而获取敏感信息。</p>\n<p>SSL Pinning 是一个业界预防 MIIT 攻击的解决方案，其主要思想是在客户端绑定（Pin）服务器SSL 证书的核心信息，这个解决方案代价小，易于实施，因此被普遍使用。</p>\n<h2 id=\"0x03-在-iOS-中如何使用-SSL-Pinning\"><a href=\"#0x03-在-iOS-中如何使用-SSL-Pinning\" class=\"headerlink\" title=\"0x03 - 在 iOS 中如何使用 SSL Pinning\"></a><strong>0x03 - 在 iOS 中如何使用 SSL Pinning</strong></h2><p>iOS 中的 SSL Pinning 主要有三种形式：</p>\n<ol>\n<li>直接使用 NSURLSession</li>\n<li>配合AFNetworking 使用</li>\n<li>配合 Alamofire 使用</li>\n</ol>\n<p>NSURLSession 是 iOS 系统提供的类，AFNetworking 和 Alamofire 识别是 ObjC和 Swift 编写的第三方库，具体实施步骤，可以参考<a href=\"https://infinum.co/the-capsized-eight/how-to-make-your-ios-apps-more-secure-with-ssl-pinning\" target=\"_blank\" rel=\"noopener\">这篇 blog</a>。</p>\n<h2 id=\"参考文章：\"><a href=\"#参考文章：\" class=\"headerlink\" title=\"参考文章：\"></a><strong>参考文章：</strong></h2><ul>\n<li><a href=\"http://www.baike.com/wiki/ssl&amp;prd=button_doc_entry\" target=\"_blank\" rel=\"noopener\">SSL - 互动百科</a></li>\n<li><a href=\"http://baike.baidu.com/item/ssl\" target=\"_blank\" rel=\"noopener\">SSL - 百度百科</a></li>\n<li><a href=\"https://infinum.co/the-capsized-eight/how-to-make-your-ios-apps-more-secure-with-ssl-pinning\" target=\"_blank\" rel=\"noopener\">How to make your iOS apps more secure with SSL pinning</a></li>\n<li><a href=\"http://www.secbox.cn/hacker/7846.html\" target=\"_blank\" rel=\"noopener\">iOS环境下的中间人攻击风险浅析</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a><strong>前言：</strong></h2><p>Apple要求所有的 App 在2017年1月必须强制使用 ATS(Application Transport Security)，即 App 必须使用 HTTPS，而不能使用 HTTP 网络协议。这是Apple 在 app 安全领域做出的一个重大的举动，HTTP 由于使用明文进行传输，存在很大的安全隐患，网络请求容易被拦截和篡改。HTTPS 在安全性上相较于 HTTP 有很大的提升，依然存在一些问题：如 <a href=\"http://www.secbox.cn/hacker/7846.html\" target=\"_blank\" rel=\"noopener\">MITT</a>(Man-In-The-Middle)中间人攻击和2014年 SSL 的<a href=\"http://www.ithome.com/html/soft/80224.htm\" target=\"_blank\" rel=\"noopener\">心脏出血漏洞</a>。网络安全的问题看似离我们很远，其实就发生在我们身边，对我们的日常生活也会有很大的影响，特别是在移动互联网的浪潮下，人手一台手机的情况下，大家普遍使用支付宝和微信支付来进行支付，能够联网的智能家居产品越来越多的走入到普通家庭中，网络安全是一个需要引起重视的问题。而在网络传输过程中起到安全保障作用的，就是我们今天要讲的 SSL/TLS，当然主要是集中在 iOS 客户端。</p>","more":"<h2 id=\"0x00-什么是-SSL-TLS\"><a href=\"#0x00-什么是-SSL-TLS\" class=\"headerlink\" title=\"0x00 - 什么是 SSL/TLS\"></a><strong>0x00 - 什么是 SSL/TLS</strong></h2><p>SSL(Secure Sockets Layer 安全套接层)及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。SSL为Netscape所研发，用以保障在Internet上数据传输的安全，利用数据加密(Encryption)的技术，可确保数据在网络上的传输过程中不会被截取及窃听。SSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。 <strong>— 摘自《互动百科》</strong></p>\n<p>从上面的定义可以看出 SSL 是一个加密层，主要用于信息加密、验证。</p>\n<p>SSL 主要提供下面三个服务：</p>\n<ol>\n<li><strong>认证用户和服务器</strong>，确保数据发送到正确的客户机和服务器；</li>\n<li><strong>加密数据</strong>以防止数据中途被窃听；</li>\n<li>维护<strong>数据的完整性</strong>，确保数据在传输过程中不被改变。</li>\n</ol>\n<h2 id=\"0x01-什么是-HTTPS\"><a href=\"#0x01-什么是-HTTPS\" class=\"headerlink\" title=\"0x01 - 什么是 HTTPS\"></a><strong>0x01 - 什么是 HTTPS</strong></h2><p>HTTPS（Hypertext Transfer Protocol Secure 安全超文本传输协议） 是由 Netscape 开发并内置于其浏览器中，用于对数据进行压缩和解压操作，并返回网络上传送回的结果，HTTPS 实际上运用了 Netscape 的完全套接字层（SSL）作为 HTTP 应用层的子层。</p>\n<h2 id=\"0x02-SSL-Pinning-是什么\"><a href=\"#0x02-SSL-Pinning-是什么\" class=\"headerlink\" title=\"0x02 - SSL Pinning 是什么\"></a><strong>0x02 - SSL Pinning 是什么</strong></h2><p>当前主流的各大网站 Google、Facebook 等都使用 HTTPS 来保障数据的安全性和私密性，但是在 HTTPS 协议也存在一定的问题，其中广为人知是 MIIT（中间人工具），攻击者在客户端和服务器中进行伪装和欺骗，从而获取敏感信息。</p>\n<p>SSL Pinning 是一个业界预防 MIIT 攻击的解决方案，其主要思想是在客户端绑定（Pin）服务器SSL 证书的核心信息，这个解决方案代价小，易于实施，因此被普遍使用。</p>\n<h2 id=\"0x03-在-iOS-中如何使用-SSL-Pinning\"><a href=\"#0x03-在-iOS-中如何使用-SSL-Pinning\" class=\"headerlink\" title=\"0x03 - 在 iOS 中如何使用 SSL Pinning\"></a><strong>0x03 - 在 iOS 中如何使用 SSL Pinning</strong></h2><p>iOS 中的 SSL Pinning 主要有三种形式：</p>\n<ol>\n<li>直接使用 NSURLSession</li>\n<li>配合AFNetworking 使用</li>\n<li>配合 Alamofire 使用</li>\n</ol>\n<p>NSURLSession 是 iOS 系统提供的类，AFNetworking 和 Alamofire 识别是 ObjC和 Swift 编写的第三方库，具体实施步骤，可以参考<a href=\"https://infinum.co/the-capsized-eight/how-to-make-your-ios-apps-more-secure-with-ssl-pinning\" target=\"_blank\" rel=\"noopener\">这篇 blog</a>。</p>\n<h2 id=\"参考文章：\"><a href=\"#参考文章：\" class=\"headerlink\" title=\"参考文章：\"></a><strong>参考文章：</strong></h2><ul>\n<li><a href=\"http://www.baike.com/wiki/ssl&amp;prd=button_doc_entry\" target=\"_blank\" rel=\"noopener\">SSL - 互动百科</a></li>\n<li><a href=\"http://baike.baidu.com/item/ssl\" target=\"_blank\" rel=\"noopener\">SSL - 百度百科</a></li>\n<li><a href=\"https://infinum.co/the-capsized-eight/how-to-make-your-ios-apps-more-secure-with-ssl-pinning\" target=\"_blank\" rel=\"noopener\">How to make your iOS apps more secure with SSL pinning</a></li>\n<li><a href=\"http://www.secbox.cn/hacker/7846.html\" target=\"_blank\" rel=\"noopener\">iOS环境下的中间人攻击风险浅析</a></li>\n</ul>"},{"title":"iOS多线程开发笔记","date":"2016-11-15T13:51:37.000Z","_content":"\n[TOC]\n\n## GCD、NSOperation和多线程编程推荐阅读\n\n**五星：**\n\n1. [iOS 并发编程之 Operation Queues](http://blog.leichunfeng.com/blog/2015/07/29/ios-concurrency-programming-operation-queues/)\n2. [GCD 深入理解：第一部分](https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md#gcd-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86)\n3. [iOS并发编程对比总结,NSThread,NSOperation,GCD - iOS](http://blog.csdn.net/zyq522376829/article/details/52373154) \n\n**四星：**\n\n1. [NSOperation in NShipster](http://nshipster.cn/nsoperation/) \n2. [深入浅出 Cocoa 多线程编程之 block 与 dispatch quene](http://www.cppblog.com/kesalin/archive/2011/08/26/154411.aspx)\n3. [GCD使用经验与技巧浅谈](http://tutuge.me/2015/04/03/something-about-gcd/)\n\n<!-- more -->\n\n## 多线程编程概念\n\n### 基本概念、术语：\n\n1. 进程（Precess）：进程是操作系统管理和分配资源的最小单位，每个进程都有自己的内存空间、系统资源，至少有一个主线程和多个辅助线程。在iOS中，每个App运行的时候，都有对应的进程。\n2. 线程（Thread）：线程则是操作系统具体的执行单元，代码的执行是在线程来完成的。在iOS中，线程的底层实现是基于POSIX thread API的，也就是我们常说的pthread。\n3. 任务（Task）：任务是我们抽象出来的需要执行的工作，一般指代一段代码。\n4. 同步 vs 异步\n   1. 同步是指函数的调用会阻塞当前的线程，必须等待函数返回才能继续执行接下来的代码。\n   2. 异步函数的调用则不会阻塞当前线程，函数调用之后立刻返回，一般通过回调函数来处理函数的执行结果。\n   3. 异步函数能够有效的完成一些耗时的任务，而不必影响代码的执行流，能够提高代码的处理效率。\n5. 串行 vs 并发\n   1. 串行指的是在同一个时间只能有一个任务在执行。\n   2. 并发指的是在同一个时间可以有多个任务一起执行。\n   3. 并发一般用于多核编程，通过高效的利用多核的优势，把不同的任务分配到各个执行单元来提高效率。\n6. Dispatch Queue vs Operation Queue\n   1. GCD和NSOperation/NSOperationQueue是iOS上面来处理多线程开发的工具，对应的概念分别是Dispatch Queue和Operation Queue。\n\n### iOS并发编程模型\n\n1. 在其他的操作系统中，我们往往需要手动创建线程、管理线程的生命周期，在不需要的时候负责销毁线程和线程使用的资源，更加痛苦的是需要使用线程锁、信号量、代码临界区等手段完成线程的同步工作，这些操作往往容易出错而且繁杂。\n2. iOS通过抽象出队列的概念，让开发者更加关注于任务的安排和调度，而从线程的管理工作中解脱出来。在很多时候，iOS把一些繁杂且容易出错的工作（ARC代替MRC）抽离到底层中，能够让开发者把注意力更多地放到真正的任务上，这也是iOS能够吸引广大开发者的原因之一吧。\n\n## NSThread vs GCD vs NSOperation，它们到底是什么？ \n\n### 三种解决方案\n\n1. NSThread：一个封装pthread API的线程对象，需要进行线程创建、销毁和处理线程同步，是最接近系统底层的解决方案。\n2. GCD：苹果基于C语言开发的，一个用于多核编程的解决方案，是一个轻量级的、以FIFO的顺序来执行并发任务的库。\n3. NSOperation：建立在GCD的基础上，面向对象的解决方案，比GCD更加灵活，也更加强大。\n\n#### 它们具体是什么？\n\n1. NSThread: Cocoa对于pthread API的封装，提供了一套面向对象的接口，需要开发者自行管理线程的生命周期、处理线程同步。大多是的时候，我们是不需要直接使用这些底层的对象，而是使用GCD或者NSOperation等更加高级的接口。\n2. 关于Operation对象\n   1. NSOperation对象本身是一个抽象类，不能直接使用。要么使用系统预定义的两个子类NSInvocationOperation和NSBlockOperation或者定义它的子类。\n   2. NSInvocationOperation:可以使用**object**和**selector**来创建一个NSInvocationOperation，非常的方便和灵活。当代码中已经有相关的处理逻辑方法时，建议直接使用NSInvocationOperation来进行替代。\n   3. NSBlockOperation：可以使用NSBlockOperation来并发的执行一个或者多个block，只有当所有的block都执行完毕，NSBlockOperation才算执行完成，有点像dispatch_group的概念。\n   4. 所有的Operation都有下面的特性：\n      1. 支持在 operation 之间建立依赖关系，只有当一个 operation 所依赖的所有 operation 都执行完成时，这个 operation 才能开始执行；\n      2. 支持一个可选的 completion block ，这个 block 将会在 operation 的主任务执行完成时被调用，在任务被取消的时候也会执行；\n      3. 支持通过 KVO 来观察 operation 执行状态的变化，Operation正是通过KVO通知来实现依赖运行，所以我们需要在自定义的子类中的处理好KVO的属性；\n      4. 支持设置执行的优先级，从而影响 operation 之间的相对执行顺序；\n      5. 支持取消操作，可以允许我们停止正在执行的 operation 。\n3. GCD队列：\n   1. 以FIFO顺序执行任务的队列调度系统，先入队列的任务一定先执行。\n   2. 两种类型的队列：\n      1. 串行队列（Serial Queue）:同一时间内只能有一个任务正在被执行。\n      2. 并发队列（Concurrent Queue）:同一时间内可以有多个任务同时被执行。\n      3. iOS默认提供5个队列：\n         1. 主队列（Main Queue）：应用程序主线程应用的队列，用于更新UI，属于串行队列。\n         2. 四个全局队列：\n            1. 按照队列优先级排序，分别是：High、Default、Low、Background。\n            2. 这四个全局队列是由系统提供的，在所有的App中共享，当然也包含了Apple的应用。\n         3. 并发队列中任务的执行顺序：\n            1. 由于队列的并发数是有系统根据当前的资源动态管理的，我们不知道也不能够设置队列中任务执行的时机和所需时长。\n            2. 只有当位于队列前面的任务执行完毕、出队列后，才会执行后面的任务，但是当前并发执行的任务数量我们不得而知。\n   3. 自定义队列：\n      1. 我们可以自定义串行或者并发队列来完成任务的执行和调度。\n\n\n\n### 各自的优势和劣势\n\n1. 优势：\n   1. NSThread：\n      1. 能够执行实时任务。其他两者都是由系统管理的队列，不能保证实时性。\n   2. GCD：\n      1. 可以非常简洁的完成简单异步任务的调用，如在主线程更新UI，延迟执行。\n      2. 只需要把任务分发到队列之后，不需要管理任务的调度情况。\n   3. NSOperation：\n      1. 给任务添加依赖\n      2. 取消或者暂停一个正在执行的任务\n      3. 有一个可选的completionBlock\n      4. 可以通过KVO来查看任务的执行情况\n      5. 可以给任务设置优先级，从而影响任务的执行顺序\n2. 短板：\n   1. NSThread：需要进行线程的创建、销毁，以及处理线程同步的问题，过于繁杂，而且容易出错。\n   2. GCD:\n      1. 对于任务的管理不够：如不能取消任务、设置依赖和优先级等。\n   3. NSOperation:\n      1. 相比于GCD，会增加系统的额外开销。\n\n## 多线程代码中，需要注意哪些问题？\n\n1. 有了GCD来调度block，我们为什么还需要NSBlockOperation?\n   1. 现有代码已经在使用OperationQueue，而我们不想使用Dispatch Queue的时候，NSBlockOperation提供了一个面向对象的封装。\n   2. 当我们需要dispatch queue不能提供的功能时，如KVO观察Operation状态变化、设置operation之间依赖等。\n2. NSInvocationOperation的灵活性是什么意思？\n   1. 我们可以通过上下文来改变selector和object对象。\n3. 如何定义一个非并发的operation？\n   1. 对于非并发的operation，我们只需要实现main方法和能够正常响应取消事件。\n   2. 其他复杂的工作如KVO通知、依赖设置等工作NSOperation类的start方法已经帮我们提供了默认实现。\n   3. 简单实现：\n      1. 提供一个自定义的初始化方法\n      2. 重写main方法\n4. 如何实现一个并发的operation？\n   1. 一般我们不需要实现并发的operation，当operation和operation queue一起使用的时候，Operation Queue会为非并发的operation创建单独的线程。\n   2. 默认情况下，operation是同步执行的，也就是我们直接使用start方法的时候，它是在调用者的线程中执行的。\n   3. Operation的isConcurrent属性表明一个operation是否支持并发。\n   4. 配置并发的Operation：只有当我们需要手动执行operation，并且希望支持并发执行，需要重写下面的方法。\n      1. start：必须，配置任务执行的线程和其他资源，但是一定**不能调用父类的实现**。\n      2. main：可选，一般用来执行具体的任务，而start方法更多是用来配置初始环境，当然也可以用来执行具体的任务。\n      3. isExecuting和isFinished：必须，并发的Operation需要自己来配置环境，同时还需要向外界来传递状态的变化，而isExecuting和isFinished这两个状态的变化需要使用KVO来通知外部。\n      4. isConcurrent：必须，用来标识一个Operation是否支持并发。\n5. 如何完成自定义operation的cancel操作？\n   1. 在下面这几个关键点的检查isCancelled属性\n      1. 在真正开始执行operaiton之前\n      2. 至少在一次循环之中需要检查一次，如果单次循环耗时较长，则需要更加频繁的检查\n      3. 在任何相对比较容易终止Operation的地方\n   2. 需要注意的是虽然Operation支持取消操作，但是并不是立刻就可以被终止的，而是在下一个isCancelled的检查点。\n   3. 在我们自定义Operation子类的时候，即使operation是被cancel了，我们仍然需要设置isFinished方法为true，因为在设置operation依赖的时候，它们的operation就是通过KVO来观察isFinished方法来判断时候可以执行的，如果在cancel的时候，没有设置isFinished方法，那么其他的operation将永远不会执行。\n6. 如何定制Operation对象的执行行为：\n   1. 在Operation添加到Operation Queue之前，我们可以配置Operation的一些行为。\n   2. 配置依赖关系\n      1. 依赖关系是在Operation之间的，与是否在同一个Operation Queue没有关系，也就是说，我们在位于不同的Operation Queue中的Operation之间设置依赖。\n      2. 注意不要产生依赖循环。\n      3. 在把operation添加到Operation Queue之前就需要配置好依赖，在添加后设置的依赖可能无效。\n   3. 修改operation在队列中的优先级\n      1. Operation在队列中的执行顺序取决于isReady状态和队列优先级。\n      2. isReady受它所依赖的operation状态的影响，只有当依赖的所有operation都变为isFinished的时候，isReady状态才为true。\n      3. queuePriority只能作用与相同队列中的operation，并且队列优先级只有当isReady为true的时候，才会决定operation的执行顺序。\n      4. isReady为FALSE的时候，isReady为true的低队列优先级的operation也会先执行。\n7. 一个串行的 operation queue 与一个串行的 dispatch queue是一样的么？\n   1. 两者都是在同一时间内只能有一个任务被执行，但是在任务的执行顺序上是不同的：\n      1. dispatch queue 的执行顺序一直是 FIFO 的\n      2. operation queue中的operation执行的顺序取决于isReady和queuePriority状态。\n8. 如何用GCD实现一个线程安全的单例？\n   1. ObjC\n   2. Swift","source":"_posts/iOS多线程开发笔记.md","raw":"---\ntitle: iOS多线程开发笔记\ndate: 2016-11-15 21:51:37\ntags: \n - iOS\n - 多线程\ncategories: 开发\n---\n\n[TOC]\n\n## GCD、NSOperation和多线程编程推荐阅读\n\n**五星：**\n\n1. [iOS 并发编程之 Operation Queues](http://blog.leichunfeng.com/blog/2015/07/29/ios-concurrency-programming-operation-queues/)\n2. [GCD 深入理解：第一部分](https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md#gcd-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86)\n3. [iOS并发编程对比总结,NSThread,NSOperation,GCD - iOS](http://blog.csdn.net/zyq522376829/article/details/52373154) \n\n**四星：**\n\n1. [NSOperation in NShipster](http://nshipster.cn/nsoperation/) \n2. [深入浅出 Cocoa 多线程编程之 block 与 dispatch quene](http://www.cppblog.com/kesalin/archive/2011/08/26/154411.aspx)\n3. [GCD使用经验与技巧浅谈](http://tutuge.me/2015/04/03/something-about-gcd/)\n\n<!-- more -->\n\n## 多线程编程概念\n\n### 基本概念、术语：\n\n1. 进程（Precess）：进程是操作系统管理和分配资源的最小单位，每个进程都有自己的内存空间、系统资源，至少有一个主线程和多个辅助线程。在iOS中，每个App运行的时候，都有对应的进程。\n2. 线程（Thread）：线程则是操作系统具体的执行单元，代码的执行是在线程来完成的。在iOS中，线程的底层实现是基于POSIX thread API的，也就是我们常说的pthread。\n3. 任务（Task）：任务是我们抽象出来的需要执行的工作，一般指代一段代码。\n4. 同步 vs 异步\n   1. 同步是指函数的调用会阻塞当前的线程，必须等待函数返回才能继续执行接下来的代码。\n   2. 异步函数的调用则不会阻塞当前线程，函数调用之后立刻返回，一般通过回调函数来处理函数的执行结果。\n   3. 异步函数能够有效的完成一些耗时的任务，而不必影响代码的执行流，能够提高代码的处理效率。\n5. 串行 vs 并发\n   1. 串行指的是在同一个时间只能有一个任务在执行。\n   2. 并发指的是在同一个时间可以有多个任务一起执行。\n   3. 并发一般用于多核编程，通过高效的利用多核的优势，把不同的任务分配到各个执行单元来提高效率。\n6. Dispatch Queue vs Operation Queue\n   1. GCD和NSOperation/NSOperationQueue是iOS上面来处理多线程开发的工具，对应的概念分别是Dispatch Queue和Operation Queue。\n\n### iOS并发编程模型\n\n1. 在其他的操作系统中，我们往往需要手动创建线程、管理线程的生命周期，在不需要的时候负责销毁线程和线程使用的资源，更加痛苦的是需要使用线程锁、信号量、代码临界区等手段完成线程的同步工作，这些操作往往容易出错而且繁杂。\n2. iOS通过抽象出队列的概念，让开发者更加关注于任务的安排和调度，而从线程的管理工作中解脱出来。在很多时候，iOS把一些繁杂且容易出错的工作（ARC代替MRC）抽离到底层中，能够让开发者把注意力更多地放到真正的任务上，这也是iOS能够吸引广大开发者的原因之一吧。\n\n## NSThread vs GCD vs NSOperation，它们到底是什么？ \n\n### 三种解决方案\n\n1. NSThread：一个封装pthread API的线程对象，需要进行线程创建、销毁和处理线程同步，是最接近系统底层的解决方案。\n2. GCD：苹果基于C语言开发的，一个用于多核编程的解决方案，是一个轻量级的、以FIFO的顺序来执行并发任务的库。\n3. NSOperation：建立在GCD的基础上，面向对象的解决方案，比GCD更加灵活，也更加强大。\n\n#### 它们具体是什么？\n\n1. NSThread: Cocoa对于pthread API的封装，提供了一套面向对象的接口，需要开发者自行管理线程的生命周期、处理线程同步。大多是的时候，我们是不需要直接使用这些底层的对象，而是使用GCD或者NSOperation等更加高级的接口。\n2. 关于Operation对象\n   1. NSOperation对象本身是一个抽象类，不能直接使用。要么使用系统预定义的两个子类NSInvocationOperation和NSBlockOperation或者定义它的子类。\n   2. NSInvocationOperation:可以使用**object**和**selector**来创建一个NSInvocationOperation，非常的方便和灵活。当代码中已经有相关的处理逻辑方法时，建议直接使用NSInvocationOperation来进行替代。\n   3. NSBlockOperation：可以使用NSBlockOperation来并发的执行一个或者多个block，只有当所有的block都执行完毕，NSBlockOperation才算执行完成，有点像dispatch_group的概念。\n   4. 所有的Operation都有下面的特性：\n      1. 支持在 operation 之间建立依赖关系，只有当一个 operation 所依赖的所有 operation 都执行完成时，这个 operation 才能开始执行；\n      2. 支持一个可选的 completion block ，这个 block 将会在 operation 的主任务执行完成时被调用，在任务被取消的时候也会执行；\n      3. 支持通过 KVO 来观察 operation 执行状态的变化，Operation正是通过KVO通知来实现依赖运行，所以我们需要在自定义的子类中的处理好KVO的属性；\n      4. 支持设置执行的优先级，从而影响 operation 之间的相对执行顺序；\n      5. 支持取消操作，可以允许我们停止正在执行的 operation 。\n3. GCD队列：\n   1. 以FIFO顺序执行任务的队列调度系统，先入队列的任务一定先执行。\n   2. 两种类型的队列：\n      1. 串行队列（Serial Queue）:同一时间内只能有一个任务正在被执行。\n      2. 并发队列（Concurrent Queue）:同一时间内可以有多个任务同时被执行。\n      3. iOS默认提供5个队列：\n         1. 主队列（Main Queue）：应用程序主线程应用的队列，用于更新UI，属于串行队列。\n         2. 四个全局队列：\n            1. 按照队列优先级排序，分别是：High、Default、Low、Background。\n            2. 这四个全局队列是由系统提供的，在所有的App中共享，当然也包含了Apple的应用。\n         3. 并发队列中任务的执行顺序：\n            1. 由于队列的并发数是有系统根据当前的资源动态管理的，我们不知道也不能够设置队列中任务执行的时机和所需时长。\n            2. 只有当位于队列前面的任务执行完毕、出队列后，才会执行后面的任务，但是当前并发执行的任务数量我们不得而知。\n   3. 自定义队列：\n      1. 我们可以自定义串行或者并发队列来完成任务的执行和调度。\n\n\n\n### 各自的优势和劣势\n\n1. 优势：\n   1. NSThread：\n      1. 能够执行实时任务。其他两者都是由系统管理的队列，不能保证实时性。\n   2. GCD：\n      1. 可以非常简洁的完成简单异步任务的调用，如在主线程更新UI，延迟执行。\n      2. 只需要把任务分发到队列之后，不需要管理任务的调度情况。\n   3. NSOperation：\n      1. 给任务添加依赖\n      2. 取消或者暂停一个正在执行的任务\n      3. 有一个可选的completionBlock\n      4. 可以通过KVO来查看任务的执行情况\n      5. 可以给任务设置优先级，从而影响任务的执行顺序\n2. 短板：\n   1. NSThread：需要进行线程的创建、销毁，以及处理线程同步的问题，过于繁杂，而且容易出错。\n   2. GCD:\n      1. 对于任务的管理不够：如不能取消任务、设置依赖和优先级等。\n   3. NSOperation:\n      1. 相比于GCD，会增加系统的额外开销。\n\n## 多线程代码中，需要注意哪些问题？\n\n1. 有了GCD来调度block，我们为什么还需要NSBlockOperation?\n   1. 现有代码已经在使用OperationQueue，而我们不想使用Dispatch Queue的时候，NSBlockOperation提供了一个面向对象的封装。\n   2. 当我们需要dispatch queue不能提供的功能时，如KVO观察Operation状态变化、设置operation之间依赖等。\n2. NSInvocationOperation的灵活性是什么意思？\n   1. 我们可以通过上下文来改变selector和object对象。\n3. 如何定义一个非并发的operation？\n   1. 对于非并发的operation，我们只需要实现main方法和能够正常响应取消事件。\n   2. 其他复杂的工作如KVO通知、依赖设置等工作NSOperation类的start方法已经帮我们提供了默认实现。\n   3. 简单实现：\n      1. 提供一个自定义的初始化方法\n      2. 重写main方法\n4. 如何实现一个并发的operation？\n   1. 一般我们不需要实现并发的operation，当operation和operation queue一起使用的时候，Operation Queue会为非并发的operation创建单独的线程。\n   2. 默认情况下，operation是同步执行的，也就是我们直接使用start方法的时候，它是在调用者的线程中执行的。\n   3. Operation的isConcurrent属性表明一个operation是否支持并发。\n   4. 配置并发的Operation：只有当我们需要手动执行operation，并且希望支持并发执行，需要重写下面的方法。\n      1. start：必须，配置任务执行的线程和其他资源，但是一定**不能调用父类的实现**。\n      2. main：可选，一般用来执行具体的任务，而start方法更多是用来配置初始环境，当然也可以用来执行具体的任务。\n      3. isExecuting和isFinished：必须，并发的Operation需要自己来配置环境，同时还需要向外界来传递状态的变化，而isExecuting和isFinished这两个状态的变化需要使用KVO来通知外部。\n      4. isConcurrent：必须，用来标识一个Operation是否支持并发。\n5. 如何完成自定义operation的cancel操作？\n   1. 在下面这几个关键点的检查isCancelled属性\n      1. 在真正开始执行operaiton之前\n      2. 至少在一次循环之中需要检查一次，如果单次循环耗时较长，则需要更加频繁的检查\n      3. 在任何相对比较容易终止Operation的地方\n   2. 需要注意的是虽然Operation支持取消操作，但是并不是立刻就可以被终止的，而是在下一个isCancelled的检查点。\n   3. 在我们自定义Operation子类的时候，即使operation是被cancel了，我们仍然需要设置isFinished方法为true，因为在设置operation依赖的时候，它们的operation就是通过KVO来观察isFinished方法来判断时候可以执行的，如果在cancel的时候，没有设置isFinished方法，那么其他的operation将永远不会执行。\n6. 如何定制Operation对象的执行行为：\n   1. 在Operation添加到Operation Queue之前，我们可以配置Operation的一些行为。\n   2. 配置依赖关系\n      1. 依赖关系是在Operation之间的，与是否在同一个Operation Queue没有关系，也就是说，我们在位于不同的Operation Queue中的Operation之间设置依赖。\n      2. 注意不要产生依赖循环。\n      3. 在把operation添加到Operation Queue之前就需要配置好依赖，在添加后设置的依赖可能无效。\n   3. 修改operation在队列中的优先级\n      1. Operation在队列中的执行顺序取决于isReady状态和队列优先级。\n      2. isReady受它所依赖的operation状态的影响，只有当依赖的所有operation都变为isFinished的时候，isReady状态才为true。\n      3. queuePriority只能作用与相同队列中的operation，并且队列优先级只有当isReady为true的时候，才会决定operation的执行顺序。\n      4. isReady为FALSE的时候，isReady为true的低队列优先级的operation也会先执行。\n7. 一个串行的 operation queue 与一个串行的 dispatch queue是一样的么？\n   1. 两者都是在同一时间内只能有一个任务被执行，但是在任务的执行顺序上是不同的：\n      1. dispatch queue 的执行顺序一直是 FIFO 的\n      2. operation queue中的operation执行的顺序取决于isReady和queuePriority状态。\n8. 如何用GCD实现一个线程安全的单例？\n   1. ObjC\n   2. Swift","slug":"iOS多线程开发笔记","published":1,"updated":"2018-10-20T15:59:18.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnj0jyh5000hkxu024q0jggk","content":"<p>[TOC]</p>\n<h2 id=\"GCD、NSOperation和多线程编程推荐阅读\"><a href=\"#GCD、NSOperation和多线程编程推荐阅读\" class=\"headerlink\" title=\"GCD、NSOperation和多线程编程推荐阅读\"></a>GCD、NSOperation和多线程编程推荐阅读</h2><p><strong>五星：</strong></p>\n<ol>\n<li><a href=\"http://blog.leichunfeng.com/blog/2015/07/29/ios-concurrency-programming-operation-queues/\" target=\"_blank\" rel=\"noopener\">iOS 并发编程之 Operation Queues</a></li>\n<li><a href=\"https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md#gcd-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86\" target=\"_blank\" rel=\"noopener\">GCD 深入理解：第一部分</a></li>\n<li><a href=\"http://blog.csdn.net/zyq522376829/article/details/52373154\" target=\"_blank\" rel=\"noopener\">iOS并发编程对比总结,NSThread,NSOperation,GCD - iOS</a> </li>\n</ol>\n<p><strong>四星：</strong></p>\n<ol>\n<li><a href=\"http://nshipster.cn/nsoperation/\" target=\"_blank\" rel=\"noopener\">NSOperation in NShipster</a> </li>\n<li><a href=\"http://www.cppblog.com/kesalin/archive/2011/08/26/154411.aspx\" target=\"_blank\" rel=\"noopener\">深入浅出 Cocoa 多线程编程之 block 与 dispatch quene</a></li>\n<li><a href=\"http://tutuge.me/2015/04/03/something-about-gcd/\" target=\"_blank\" rel=\"noopener\">GCD使用经验与技巧浅谈</a></li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"多线程编程概念\"><a href=\"#多线程编程概念\" class=\"headerlink\" title=\"多线程编程概念\"></a>多线程编程概念</h2><h3 id=\"基本概念、术语：\"><a href=\"#基本概念、术语：\" class=\"headerlink\" title=\"基本概念、术语：\"></a>基本概念、术语：</h3><ol>\n<li>进程（Precess）：进程是操作系统管理和分配资源的最小单位，每个进程都有自己的内存空间、系统资源，至少有一个主线程和多个辅助线程。在iOS中，每个App运行的时候，都有对应的进程。</li>\n<li>线程（Thread）：线程则是操作系统具体的执行单元，代码的执行是在线程来完成的。在iOS中，线程的底层实现是基于POSIX thread API的，也就是我们常说的pthread。</li>\n<li>任务（Task）：任务是我们抽象出来的需要执行的工作，一般指代一段代码。</li>\n<li>同步 vs 异步<ol>\n<li>同步是指函数的调用会阻塞当前的线程，必须等待函数返回才能继续执行接下来的代码。</li>\n<li>异步函数的调用则不会阻塞当前线程，函数调用之后立刻返回，一般通过回调函数来处理函数的执行结果。</li>\n<li>异步函数能够有效的完成一些耗时的任务，而不必影响代码的执行流，能够提高代码的处理效率。</li>\n</ol>\n</li>\n<li>串行 vs 并发<ol>\n<li>串行指的是在同一个时间只能有一个任务在执行。</li>\n<li>并发指的是在同一个时间可以有多个任务一起执行。</li>\n<li>并发一般用于多核编程，通过高效的利用多核的优势，把不同的任务分配到各个执行单元来提高效率。</li>\n</ol>\n</li>\n<li>Dispatch Queue vs Operation Queue<ol>\n<li>GCD和NSOperation/NSOperationQueue是iOS上面来处理多线程开发的工具，对应的概念分别是Dispatch Queue和Operation Queue。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"iOS并发编程模型\"><a href=\"#iOS并发编程模型\" class=\"headerlink\" title=\"iOS并发编程模型\"></a>iOS并发编程模型</h3><ol>\n<li>在其他的操作系统中，我们往往需要手动创建线程、管理线程的生命周期，在不需要的时候负责销毁线程和线程使用的资源，更加痛苦的是需要使用线程锁、信号量、代码临界区等手段完成线程的同步工作，这些操作往往容易出错而且繁杂。</li>\n<li>iOS通过抽象出队列的概念，让开发者更加关注于任务的安排和调度，而从线程的管理工作中解脱出来。在很多时候，iOS把一些繁杂且容易出错的工作（ARC代替MRC）抽离到底层中，能够让开发者把注意力更多地放到真正的任务上，这也是iOS能够吸引广大开发者的原因之一吧。</li>\n</ol>\n<h2 id=\"NSThread-vs-GCD-vs-NSOperation，它们到底是什么？\"><a href=\"#NSThread-vs-GCD-vs-NSOperation，它们到底是什么？\" class=\"headerlink\" title=\"NSThread vs GCD vs NSOperation，它们到底是什么？\"></a>NSThread vs GCD vs NSOperation，它们到底是什么？</h2><h3 id=\"三种解决方案\"><a href=\"#三种解决方案\" class=\"headerlink\" title=\"三种解决方案\"></a>三种解决方案</h3><ol>\n<li>NSThread：一个封装pthread API的线程对象，需要进行线程创建、销毁和处理线程同步，是最接近系统底层的解决方案。</li>\n<li>GCD：苹果基于C语言开发的，一个用于多核编程的解决方案，是一个轻量级的、以FIFO的顺序来执行并发任务的库。</li>\n<li>NSOperation：建立在GCD的基础上，面向对象的解决方案，比GCD更加灵活，也更加强大。</li>\n</ol>\n<h4 id=\"它们具体是什么？\"><a href=\"#它们具体是什么？\" class=\"headerlink\" title=\"它们具体是什么？\"></a>它们具体是什么？</h4><ol>\n<li>NSThread: Cocoa对于pthread API的封装，提供了一套面向对象的接口，需要开发者自行管理线程的生命周期、处理线程同步。大多是的时候，我们是不需要直接使用这些底层的对象，而是使用GCD或者NSOperation等更加高级的接口。</li>\n<li>关于Operation对象<ol>\n<li>NSOperation对象本身是一个抽象类，不能直接使用。要么使用系统预定义的两个子类NSInvocationOperation和NSBlockOperation或者定义它的子类。</li>\n<li>NSInvocationOperation:可以使用<strong>object</strong>和<strong>selector</strong>来创建一个NSInvocationOperation，非常的方便和灵活。当代码中已经有相关的处理逻辑方法时，建议直接使用NSInvocationOperation来进行替代。</li>\n<li>NSBlockOperation：可以使用NSBlockOperation来并发的执行一个或者多个block，只有当所有的block都执行完毕，NSBlockOperation才算执行完成，有点像dispatch_group的概念。</li>\n<li>所有的Operation都有下面的特性：<ol>\n<li>支持在 operation 之间建立依赖关系，只有当一个 operation 所依赖的所有 operation 都执行完成时，这个 operation 才能开始执行；</li>\n<li>支持一个可选的 completion block ，这个 block 将会在 operation 的主任务执行完成时被调用，在任务被取消的时候也会执行；</li>\n<li>支持通过 KVO 来观察 operation 执行状态的变化，Operation正是通过KVO通知来实现依赖运行，所以我们需要在自定义的子类中的处理好KVO的属性；</li>\n<li>支持设置执行的优先级，从而影响 operation 之间的相对执行顺序；</li>\n<li>支持取消操作，可以允许我们停止正在执行的 operation 。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>GCD队列：<ol>\n<li>以FIFO顺序执行任务的队列调度系统，先入队列的任务一定先执行。</li>\n<li>两种类型的队列：<ol>\n<li>串行队列（Serial Queue）:同一时间内只能有一个任务正在被执行。</li>\n<li>并发队列（Concurrent Queue）:同一时间内可以有多个任务同时被执行。</li>\n<li>iOS默认提供5个队列：<ol>\n<li>主队列（Main Queue）：应用程序主线程应用的队列，用于更新UI，属于串行队列。</li>\n<li>四个全局队列：<ol>\n<li>按照队列优先级排序，分别是：High、Default、Low、Background。</li>\n<li>这四个全局队列是由系统提供的，在所有的App中共享，当然也包含了Apple的应用。</li>\n</ol>\n</li>\n<li>并发队列中任务的执行顺序：<ol>\n<li>由于队列的并发数是有系统根据当前的资源动态管理的，我们不知道也不能够设置队列中任务执行的时机和所需时长。</li>\n<li>只有当位于队列前面的任务执行完毕、出队列后，才会执行后面的任务，但是当前并发执行的任务数量我们不得而知。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>自定义队列：<ol>\n<li>我们可以自定义串行或者并发队列来完成任务的执行和调度。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"各自的优势和劣势\"><a href=\"#各自的优势和劣势\" class=\"headerlink\" title=\"各自的优势和劣势\"></a>各自的优势和劣势</h3><ol>\n<li>优势：<ol>\n<li>NSThread：<ol>\n<li>能够执行实时任务。其他两者都是由系统管理的队列，不能保证实时性。</li>\n</ol>\n</li>\n<li>GCD：<ol>\n<li>可以非常简洁的完成简单异步任务的调用，如在主线程更新UI，延迟执行。</li>\n<li>只需要把任务分发到队列之后，不需要管理任务的调度情况。</li>\n</ol>\n</li>\n<li>NSOperation：<ol>\n<li>给任务添加依赖</li>\n<li>取消或者暂停一个正在执行的任务</li>\n<li>有一个可选的completionBlock</li>\n<li>可以通过KVO来查看任务的执行情况</li>\n<li>可以给任务设置优先级，从而影响任务的执行顺序</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>短板：<ol>\n<li>NSThread：需要进行线程的创建、销毁，以及处理线程同步的问题，过于繁杂，而且容易出错。</li>\n<li>GCD:<ol>\n<li>对于任务的管理不够：如不能取消任务、设置依赖和优先级等。</li>\n</ol>\n</li>\n<li>NSOperation:<ol>\n<li>相比于GCD，会增加系统的额外开销。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"多线程代码中，需要注意哪些问题？\"><a href=\"#多线程代码中，需要注意哪些问题？\" class=\"headerlink\" title=\"多线程代码中，需要注意哪些问题？\"></a>多线程代码中，需要注意哪些问题？</h2><ol>\n<li>有了GCD来调度block，我们为什么还需要NSBlockOperation?<ol>\n<li>现有代码已经在使用OperationQueue，而我们不想使用Dispatch Queue的时候，NSBlockOperation提供了一个面向对象的封装。</li>\n<li>当我们需要dispatch queue不能提供的功能时，如KVO观察Operation状态变化、设置operation之间依赖等。</li>\n</ol>\n</li>\n<li>NSInvocationOperation的灵活性是什么意思？<ol>\n<li>我们可以通过上下文来改变selector和object对象。</li>\n</ol>\n</li>\n<li>如何定义一个非并发的operation？<ol>\n<li>对于非并发的operation，我们只需要实现main方法和能够正常响应取消事件。</li>\n<li>其他复杂的工作如KVO通知、依赖设置等工作NSOperation类的start方法已经帮我们提供了默认实现。</li>\n<li>简单实现：<ol>\n<li>提供一个自定义的初始化方法</li>\n<li>重写main方法</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何实现一个并发的operation？<ol>\n<li>一般我们不需要实现并发的operation，当operation和operation queue一起使用的时候，Operation Queue会为非并发的operation创建单独的线程。</li>\n<li>默认情况下，operation是同步执行的，也就是我们直接使用start方法的时候，它是在调用者的线程中执行的。</li>\n<li>Operation的isConcurrent属性表明一个operation是否支持并发。</li>\n<li>配置并发的Operation：只有当我们需要手动执行operation，并且希望支持并发执行，需要重写下面的方法。<ol>\n<li>start：必须，配置任务执行的线程和其他资源，但是一定<strong>不能调用父类的实现</strong>。</li>\n<li>main：可选，一般用来执行具体的任务，而start方法更多是用来配置初始环境，当然也可以用来执行具体的任务。</li>\n<li>isExecuting和isFinished：必须，并发的Operation需要自己来配置环境，同时还需要向外界来传递状态的变化，而isExecuting和isFinished这两个状态的变化需要使用KVO来通知外部。</li>\n<li>isConcurrent：必须，用来标识一个Operation是否支持并发。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何完成自定义operation的cancel操作？<ol>\n<li>在下面这几个关键点的检查isCancelled属性<ol>\n<li>在真正开始执行operaiton之前</li>\n<li>至少在一次循环之中需要检查一次，如果单次循环耗时较长，则需要更加频繁的检查</li>\n<li>在任何相对比较容易终止Operation的地方</li>\n</ol>\n</li>\n<li>需要注意的是虽然Operation支持取消操作，但是并不是立刻就可以被终止的，而是在下一个isCancelled的检查点。</li>\n<li>在我们自定义Operation子类的时候，即使operation是被cancel了，我们仍然需要设置isFinished方法为true，因为在设置operation依赖的时候，它们的operation就是通过KVO来观察isFinished方法来判断时候可以执行的，如果在cancel的时候，没有设置isFinished方法，那么其他的operation将永远不会执行。</li>\n</ol>\n</li>\n<li>如何定制Operation对象的执行行为：<ol>\n<li>在Operation添加到Operation Queue之前，我们可以配置Operation的一些行为。</li>\n<li>配置依赖关系<ol>\n<li>依赖关系是在Operation之间的，与是否在同一个Operation Queue没有关系，也就是说，我们在位于不同的Operation Queue中的Operation之间设置依赖。</li>\n<li>注意不要产生依赖循环。</li>\n<li>在把operation添加到Operation Queue之前就需要配置好依赖，在添加后设置的依赖可能无效。</li>\n</ol>\n</li>\n<li>修改operation在队列中的优先级<ol>\n<li>Operation在队列中的执行顺序取决于isReady状态和队列优先级。</li>\n<li>isReady受它所依赖的operation状态的影响，只有当依赖的所有operation都变为isFinished的时候，isReady状态才为true。</li>\n<li>queuePriority只能作用与相同队列中的operation，并且队列优先级只有当isReady为true的时候，才会决定operation的执行顺序。</li>\n<li>isReady为FALSE的时候，isReady为true的低队列优先级的operation也会先执行。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>一个串行的 operation queue 与一个串行的 dispatch queue是一样的么？<ol>\n<li>两者都是在同一时间内只能有一个任务被执行，但是在任务的执行顺序上是不同的：<ol>\n<li>dispatch queue 的执行顺序一直是 FIFO 的</li>\n<li>operation queue中的operation执行的顺序取决于isReady和queuePriority状态。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何用GCD实现一个线程安全的单例？<ol>\n<li>ObjC</li>\n<li>Swift</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>[TOC]</p>\n<h2 id=\"GCD、NSOperation和多线程编程推荐阅读\"><a href=\"#GCD、NSOperation和多线程编程推荐阅读\" class=\"headerlink\" title=\"GCD、NSOperation和多线程编程推荐阅读\"></a>GCD、NSOperation和多线程编程推荐阅读</h2><p><strong>五星：</strong></p>\n<ol>\n<li><a href=\"http://blog.leichunfeng.com/blog/2015/07/29/ios-concurrency-programming-operation-queues/\" target=\"_blank\" rel=\"noopener\">iOS 并发编程之 Operation Queues</a></li>\n<li><a href=\"https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md#gcd-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86\" target=\"_blank\" rel=\"noopener\">GCD 深入理解：第一部分</a></li>\n<li><a href=\"http://blog.csdn.net/zyq522376829/article/details/52373154\" target=\"_blank\" rel=\"noopener\">iOS并发编程对比总结,NSThread,NSOperation,GCD - iOS</a> </li>\n</ol>\n<p><strong>四星：</strong></p>\n<ol>\n<li><a href=\"http://nshipster.cn/nsoperation/\" target=\"_blank\" rel=\"noopener\">NSOperation in NShipster</a> </li>\n<li><a href=\"http://www.cppblog.com/kesalin/archive/2011/08/26/154411.aspx\" target=\"_blank\" rel=\"noopener\">深入浅出 Cocoa 多线程编程之 block 与 dispatch quene</a></li>\n<li><a href=\"http://tutuge.me/2015/04/03/something-about-gcd/\" target=\"_blank\" rel=\"noopener\">GCD使用经验与技巧浅谈</a></li>\n</ol>","more":"<h2 id=\"多线程编程概念\"><a href=\"#多线程编程概念\" class=\"headerlink\" title=\"多线程编程概念\"></a>多线程编程概念</h2><h3 id=\"基本概念、术语：\"><a href=\"#基本概念、术语：\" class=\"headerlink\" title=\"基本概念、术语：\"></a>基本概念、术语：</h3><ol>\n<li>进程（Precess）：进程是操作系统管理和分配资源的最小单位，每个进程都有自己的内存空间、系统资源，至少有一个主线程和多个辅助线程。在iOS中，每个App运行的时候，都有对应的进程。</li>\n<li>线程（Thread）：线程则是操作系统具体的执行单元，代码的执行是在线程来完成的。在iOS中，线程的底层实现是基于POSIX thread API的，也就是我们常说的pthread。</li>\n<li>任务（Task）：任务是我们抽象出来的需要执行的工作，一般指代一段代码。</li>\n<li>同步 vs 异步<ol>\n<li>同步是指函数的调用会阻塞当前的线程，必须等待函数返回才能继续执行接下来的代码。</li>\n<li>异步函数的调用则不会阻塞当前线程，函数调用之后立刻返回，一般通过回调函数来处理函数的执行结果。</li>\n<li>异步函数能够有效的完成一些耗时的任务，而不必影响代码的执行流，能够提高代码的处理效率。</li>\n</ol>\n</li>\n<li>串行 vs 并发<ol>\n<li>串行指的是在同一个时间只能有一个任务在执行。</li>\n<li>并发指的是在同一个时间可以有多个任务一起执行。</li>\n<li>并发一般用于多核编程，通过高效的利用多核的优势，把不同的任务分配到各个执行单元来提高效率。</li>\n</ol>\n</li>\n<li>Dispatch Queue vs Operation Queue<ol>\n<li>GCD和NSOperation/NSOperationQueue是iOS上面来处理多线程开发的工具，对应的概念分别是Dispatch Queue和Operation Queue。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"iOS并发编程模型\"><a href=\"#iOS并发编程模型\" class=\"headerlink\" title=\"iOS并发编程模型\"></a>iOS并发编程模型</h3><ol>\n<li>在其他的操作系统中，我们往往需要手动创建线程、管理线程的生命周期，在不需要的时候负责销毁线程和线程使用的资源，更加痛苦的是需要使用线程锁、信号量、代码临界区等手段完成线程的同步工作，这些操作往往容易出错而且繁杂。</li>\n<li>iOS通过抽象出队列的概念，让开发者更加关注于任务的安排和调度，而从线程的管理工作中解脱出来。在很多时候，iOS把一些繁杂且容易出错的工作（ARC代替MRC）抽离到底层中，能够让开发者把注意力更多地放到真正的任务上，这也是iOS能够吸引广大开发者的原因之一吧。</li>\n</ol>\n<h2 id=\"NSThread-vs-GCD-vs-NSOperation，它们到底是什么？\"><a href=\"#NSThread-vs-GCD-vs-NSOperation，它们到底是什么？\" class=\"headerlink\" title=\"NSThread vs GCD vs NSOperation，它们到底是什么？\"></a>NSThread vs GCD vs NSOperation，它们到底是什么？</h2><h3 id=\"三种解决方案\"><a href=\"#三种解决方案\" class=\"headerlink\" title=\"三种解决方案\"></a>三种解决方案</h3><ol>\n<li>NSThread：一个封装pthread API的线程对象，需要进行线程创建、销毁和处理线程同步，是最接近系统底层的解决方案。</li>\n<li>GCD：苹果基于C语言开发的，一个用于多核编程的解决方案，是一个轻量级的、以FIFO的顺序来执行并发任务的库。</li>\n<li>NSOperation：建立在GCD的基础上，面向对象的解决方案，比GCD更加灵活，也更加强大。</li>\n</ol>\n<h4 id=\"它们具体是什么？\"><a href=\"#它们具体是什么？\" class=\"headerlink\" title=\"它们具体是什么？\"></a>它们具体是什么？</h4><ol>\n<li>NSThread: Cocoa对于pthread API的封装，提供了一套面向对象的接口，需要开发者自行管理线程的生命周期、处理线程同步。大多是的时候，我们是不需要直接使用这些底层的对象，而是使用GCD或者NSOperation等更加高级的接口。</li>\n<li>关于Operation对象<ol>\n<li>NSOperation对象本身是一个抽象类，不能直接使用。要么使用系统预定义的两个子类NSInvocationOperation和NSBlockOperation或者定义它的子类。</li>\n<li>NSInvocationOperation:可以使用<strong>object</strong>和<strong>selector</strong>来创建一个NSInvocationOperation，非常的方便和灵活。当代码中已经有相关的处理逻辑方法时，建议直接使用NSInvocationOperation来进行替代。</li>\n<li>NSBlockOperation：可以使用NSBlockOperation来并发的执行一个或者多个block，只有当所有的block都执行完毕，NSBlockOperation才算执行完成，有点像dispatch_group的概念。</li>\n<li>所有的Operation都有下面的特性：<ol>\n<li>支持在 operation 之间建立依赖关系，只有当一个 operation 所依赖的所有 operation 都执行完成时，这个 operation 才能开始执行；</li>\n<li>支持一个可选的 completion block ，这个 block 将会在 operation 的主任务执行完成时被调用，在任务被取消的时候也会执行；</li>\n<li>支持通过 KVO 来观察 operation 执行状态的变化，Operation正是通过KVO通知来实现依赖运行，所以我们需要在自定义的子类中的处理好KVO的属性；</li>\n<li>支持设置执行的优先级，从而影响 operation 之间的相对执行顺序；</li>\n<li>支持取消操作，可以允许我们停止正在执行的 operation 。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>GCD队列：<ol>\n<li>以FIFO顺序执行任务的队列调度系统，先入队列的任务一定先执行。</li>\n<li>两种类型的队列：<ol>\n<li>串行队列（Serial Queue）:同一时间内只能有一个任务正在被执行。</li>\n<li>并发队列（Concurrent Queue）:同一时间内可以有多个任务同时被执行。</li>\n<li>iOS默认提供5个队列：<ol>\n<li>主队列（Main Queue）：应用程序主线程应用的队列，用于更新UI，属于串行队列。</li>\n<li>四个全局队列：<ol>\n<li>按照队列优先级排序，分别是：High、Default、Low、Background。</li>\n<li>这四个全局队列是由系统提供的，在所有的App中共享，当然也包含了Apple的应用。</li>\n</ol>\n</li>\n<li>并发队列中任务的执行顺序：<ol>\n<li>由于队列的并发数是有系统根据当前的资源动态管理的，我们不知道也不能够设置队列中任务执行的时机和所需时长。</li>\n<li>只有当位于队列前面的任务执行完毕、出队列后，才会执行后面的任务，但是当前并发执行的任务数量我们不得而知。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>自定义队列：<ol>\n<li>我们可以自定义串行或者并发队列来完成任务的执行和调度。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"各自的优势和劣势\"><a href=\"#各自的优势和劣势\" class=\"headerlink\" title=\"各自的优势和劣势\"></a>各自的优势和劣势</h3><ol>\n<li>优势：<ol>\n<li>NSThread：<ol>\n<li>能够执行实时任务。其他两者都是由系统管理的队列，不能保证实时性。</li>\n</ol>\n</li>\n<li>GCD：<ol>\n<li>可以非常简洁的完成简单异步任务的调用，如在主线程更新UI，延迟执行。</li>\n<li>只需要把任务分发到队列之后，不需要管理任务的调度情况。</li>\n</ol>\n</li>\n<li>NSOperation：<ol>\n<li>给任务添加依赖</li>\n<li>取消或者暂停一个正在执行的任务</li>\n<li>有一个可选的completionBlock</li>\n<li>可以通过KVO来查看任务的执行情况</li>\n<li>可以给任务设置优先级，从而影响任务的执行顺序</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>短板：<ol>\n<li>NSThread：需要进行线程的创建、销毁，以及处理线程同步的问题，过于繁杂，而且容易出错。</li>\n<li>GCD:<ol>\n<li>对于任务的管理不够：如不能取消任务、设置依赖和优先级等。</li>\n</ol>\n</li>\n<li>NSOperation:<ol>\n<li>相比于GCD，会增加系统的额外开销。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"多线程代码中，需要注意哪些问题？\"><a href=\"#多线程代码中，需要注意哪些问题？\" class=\"headerlink\" title=\"多线程代码中，需要注意哪些问题？\"></a>多线程代码中，需要注意哪些问题？</h2><ol>\n<li>有了GCD来调度block，我们为什么还需要NSBlockOperation?<ol>\n<li>现有代码已经在使用OperationQueue，而我们不想使用Dispatch Queue的时候，NSBlockOperation提供了一个面向对象的封装。</li>\n<li>当我们需要dispatch queue不能提供的功能时，如KVO观察Operation状态变化、设置operation之间依赖等。</li>\n</ol>\n</li>\n<li>NSInvocationOperation的灵活性是什么意思？<ol>\n<li>我们可以通过上下文来改变selector和object对象。</li>\n</ol>\n</li>\n<li>如何定义一个非并发的operation？<ol>\n<li>对于非并发的operation，我们只需要实现main方法和能够正常响应取消事件。</li>\n<li>其他复杂的工作如KVO通知、依赖设置等工作NSOperation类的start方法已经帮我们提供了默认实现。</li>\n<li>简单实现：<ol>\n<li>提供一个自定义的初始化方法</li>\n<li>重写main方法</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何实现一个并发的operation？<ol>\n<li>一般我们不需要实现并发的operation，当operation和operation queue一起使用的时候，Operation Queue会为非并发的operation创建单独的线程。</li>\n<li>默认情况下，operation是同步执行的，也就是我们直接使用start方法的时候，它是在调用者的线程中执行的。</li>\n<li>Operation的isConcurrent属性表明一个operation是否支持并发。</li>\n<li>配置并发的Operation：只有当我们需要手动执行operation，并且希望支持并发执行，需要重写下面的方法。<ol>\n<li>start：必须，配置任务执行的线程和其他资源，但是一定<strong>不能调用父类的实现</strong>。</li>\n<li>main：可选，一般用来执行具体的任务，而start方法更多是用来配置初始环境，当然也可以用来执行具体的任务。</li>\n<li>isExecuting和isFinished：必须，并发的Operation需要自己来配置环境，同时还需要向外界来传递状态的变化，而isExecuting和isFinished这两个状态的变化需要使用KVO来通知外部。</li>\n<li>isConcurrent：必须，用来标识一个Operation是否支持并发。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何完成自定义operation的cancel操作？<ol>\n<li>在下面这几个关键点的检查isCancelled属性<ol>\n<li>在真正开始执行operaiton之前</li>\n<li>至少在一次循环之中需要检查一次，如果单次循环耗时较长，则需要更加频繁的检查</li>\n<li>在任何相对比较容易终止Operation的地方</li>\n</ol>\n</li>\n<li>需要注意的是虽然Operation支持取消操作，但是并不是立刻就可以被终止的，而是在下一个isCancelled的检查点。</li>\n<li>在我们自定义Operation子类的时候，即使operation是被cancel了，我们仍然需要设置isFinished方法为true，因为在设置operation依赖的时候，它们的operation就是通过KVO来观察isFinished方法来判断时候可以执行的，如果在cancel的时候，没有设置isFinished方法，那么其他的operation将永远不会执行。</li>\n</ol>\n</li>\n<li>如何定制Operation对象的执行行为：<ol>\n<li>在Operation添加到Operation Queue之前，我们可以配置Operation的一些行为。</li>\n<li>配置依赖关系<ol>\n<li>依赖关系是在Operation之间的，与是否在同一个Operation Queue没有关系，也就是说，我们在位于不同的Operation Queue中的Operation之间设置依赖。</li>\n<li>注意不要产生依赖循环。</li>\n<li>在把operation添加到Operation Queue之前就需要配置好依赖，在添加后设置的依赖可能无效。</li>\n</ol>\n</li>\n<li>修改operation在队列中的优先级<ol>\n<li>Operation在队列中的执行顺序取决于isReady状态和队列优先级。</li>\n<li>isReady受它所依赖的operation状态的影响，只有当依赖的所有operation都变为isFinished的时候，isReady状态才为true。</li>\n<li>queuePriority只能作用与相同队列中的operation，并且队列优先级只有当isReady为true的时候，才会决定operation的执行顺序。</li>\n<li>isReady为FALSE的时候，isReady为true的低队列优先级的operation也会先执行。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>一个串行的 operation queue 与一个串行的 dispatch queue是一样的么？<ol>\n<li>两者都是在同一时间内只能有一个任务被执行，但是在任务的执行顺序上是不同的：<ol>\n<li>dispatch queue 的执行顺序一直是 FIFO 的</li>\n<li>operation queue中的operation执行的顺序取决于isReady和queuePriority状态。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何用GCD实现一个线程安全的单例？<ol>\n<li>ObjC</li>\n<li>Swift</li>\n</ol>\n</li>\n</ol>"},{"title":"使用hexo+github page搭建个人博客","date":"2016-11-12T06:36:16.000Z","_content":"\n我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。\n\n2018年2月18日更新：域名绑定和https 访问问题。\n\n<!-- more -->\n\n## 首先简单介绍下github page和hexo：\n\n- Github Page: 使用github repo的静态网页工具，可以无缝地与github一起使用，每个github帐号都有400M的免费空间来存放博客文件，具体的使用说明可以参看[github page网站](https://pages.github.com/)\n- hexo:一个node.js的框架，使用npm进行安装和配置，能够快速的搭建静态博客。主要特点是搭建快速、支持markdown编辑、一键部署、本地预览。\n- 使用github page+hexo主要是考虑到能够快速搭建、维护方便、技术栈匹配。\n\n\n\n下面来说具体的搭建步骤，这里使用**MAC的开发环境**：\n\n- 配置github repo：\n  - 新建一个username.github.io的仓库，注意一定要使用自己的**github用户名**\n  - 设置ssh key：参见[github ssh教程](https://help.github.com/articles/generating-an-ssh-key/)\n  - 这里需要说明的是：github page默认使用的是**master分支**，在master分支中的**index.html**文件会被解析并且作为网页的入口。\n\n\n- 安装Hexo命令行工具hexo-cli\n  - 参考[官方教程](https://hexo.io/docs/index.html)\n  - 安装git、Node.js等工具\n  - 安装hexo-cli命令行工具：npm install -g hexo-cli\n    - hexo-cli是hexo的命令行工具，用于执行hexo init\n  - Setup Hexo:\n    - 命令行为：hexo init <folder>\n    - 使用hexo的模板生成项目，下面几个文件比较重要：\n      - package.json: Node js用于指定依赖包的配置文件，在不清楚的情况下，不要随意修改。\n      - _config.yml: hexo的配置文件，可以设置网站title、主题、字体、制定域名等。\n      - source: Blog的源文件目录，使用hexo new生成的md文件存放在这个目录中。\n      - scaffolds：模板文件，hexo new使用它来生成新的模板md。\n      - themes：主题目录，设置网站版式。\n\n- 写Blog：\n  - hexo new post_title：生成新的模板文件。\n  - 注意：这里使用hexo命令和上面的hexo init不是同一个命令，这个hexo是在setup过程中下载的npm包，**需要在Blog这个目录中使用才有效。**\n  - 生成的文件在source/_post目录中，使用markdown编辑器来写博客。\n\n- 本机调试：\n  - 在写blog的过程中，可以直接在本机进行预览：hexo serve\n  - 默认使用4000端口，还可以[设置其他的端口](https://hexo.io/docs/server.html#Custom-IP)\n\n- 生成Blog文件：\n  - 生成编译后的blog：hexo generate\n  - 生成后的文件存放在public目录中\n  - 也可以使用下面的命令直接完成发布: hexo generate —deploy\n\n- 发布blog：\n  - 使用hexo deploy完成发布\n  - 第一次发布之前，需要修改_config.yml文件，参见：[hexo deploy](https://hexo.io/docs/deployment.html#Git)\n\n- 最后要说下Troubleshooting和需要注意的地方:\n  - hexo new不起作用\n    - 我们需要另外开一个branch来进行blog的写作（如source分支），然后使用hexo deploy到master分支上面。在不同的分支进行切换的时候，由于.gitignore文件不一样，导致我们可能在master分支上面删除了一些source分支上面重要的文件，如node_modules目录，则需要我们在切换到source分支的时候，重新下载npm包：npm i\n  - hexo deploy失败\n    - 需要安装hexo-deployer-git包，参考 [hexo deploy](https://hexo.io/docs/deployment.html#Git)\n  - master分支的使用方法\n    - master分支上面**不要放文件**，这个分支在使用hexo deploy之后自动更新，所以会覆盖我们自己的文件。\n  - 使用source分支来进行写作\n    - 上面提高了不能使用master分支，那么就需要我们使用别的分支来进行hexo的搭建和写作，我个人使用source分支，当然你也可以取一个自己喜欢的名字。\n\n  ------\n\n  ## — 2018年2月18日更新：\n\n- ### **绑定域名**：\n\n  绑定域名主要分为3个步骤：申请域名、Github Page 设置域名、域名解析\n\n  - 申请域名\n\n    - 国内：[万网](https://wanwang.aliyun.com/domain/com/)、[新网](http://www.xinnet.com/domain/domain.html)\n\n    国内域名申请有一些繁杂的手续和步骤，特别是域名备案。\n\n    - 国外：[GoDaddy](https://www.godaddy.com/)、[namecheap](https://www.namecheap.com)、[name](https://www.name.com/)、[enom](http://www.enom.com/)\n    - 国外的域名则相对操作简单很多，一般只需要提供联系方式即可，主要注意的是：Godaddy没有提供免费的域名信息保护功能，需要付费购买，否者别人可以通过 whois 查到域名持有者的信息。\n\n  - 设置 Github Page 的域名\n\n    - Github Page提供域名比对的功能，只需要在网站的根目录中添加 CNAME（全部大写）文件，填写自己申请的域名（一般是[顶级域名](http://baike.baidu.com/link?url=nBRFxvXXBbhf6esboaTgsAPqBASt6IT7cXro_okFQ9Xe8MOEaCnFOuJ1jxg0BRirAdJPU4XRrKZkYZSKzry4EmR21yJdMGuqG2TzJigDYipm0ZAAZTQGKg04IqSgAQ6E)）即可，不需要带 https://（如 baidu.com，而不是 http://www.baidu.com），github page 会自动把 www的请求重定向到顶级域名下。\n    - 使用 hexo 搭建起来的博客，则是在 source 目录中，来添加 CNAME 文件，然后部署到 github 上面（命令行为 hexo d -g）。\n\n  - 域名解析\n\n    - 申请好的域名，一般由提供商来进行解析（把域名映射为 IP 地址），我们这里不适用 Godaddy 提供的域名解析（NameServer） 服务，而是使用 NDSPod 作为我们的域名解析商。\n    - 申请 NDSPod 账户\n    - 在 NDSPod 添加域名、添加 A/CNAME 记录\n      - A 记录\n      - CNAME 记录\n    - 在 Godaddy 绑定 DNSPod的域名解析地址\n    - wait a moment\n\n- ### **HTTPS问题：**\n\n  - github page 的 ssl证书绑定的是 github.io 的域名。如果在 chrome 中使用 https 访问自定义的域名，会提示**NET::ERR_CERT_COMMON_NAME_INVALID**。\n  - CloudFlare 来做域名解析，开启 ssl 为 Flexble 之后，可以让chrome和 CloudFlare 之间使用 https访问，而CloudFlare 与 github page 中继续使用 http 来访问。\n  - 参考文章：[在GitHub Pages上使用CloudFlare https CDN](https://blog.chionlab.moe/2016/01/28/github-pages-with-https/)","source":"_posts/使用hexo-github-page搭建个人博客.md","raw":"---\ntitle: 使用hexo+github page搭建个人博客\ndate: 2016-11-12 14:36:16\ntags: \n - hexo\n---\n\n我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。\n\n2018年2月18日更新：域名绑定和https 访问问题。\n\n<!-- more -->\n\n## 首先简单介绍下github page和hexo：\n\n- Github Page: 使用github repo的静态网页工具，可以无缝地与github一起使用，每个github帐号都有400M的免费空间来存放博客文件，具体的使用说明可以参看[github page网站](https://pages.github.com/)\n- hexo:一个node.js的框架，使用npm进行安装和配置，能够快速的搭建静态博客。主要特点是搭建快速、支持markdown编辑、一键部署、本地预览。\n- 使用github page+hexo主要是考虑到能够快速搭建、维护方便、技术栈匹配。\n\n\n\n下面来说具体的搭建步骤，这里使用**MAC的开发环境**：\n\n- 配置github repo：\n  - 新建一个username.github.io的仓库，注意一定要使用自己的**github用户名**\n  - 设置ssh key：参见[github ssh教程](https://help.github.com/articles/generating-an-ssh-key/)\n  - 这里需要说明的是：github page默认使用的是**master分支**，在master分支中的**index.html**文件会被解析并且作为网页的入口。\n\n\n- 安装Hexo命令行工具hexo-cli\n  - 参考[官方教程](https://hexo.io/docs/index.html)\n  - 安装git、Node.js等工具\n  - 安装hexo-cli命令行工具：npm install -g hexo-cli\n    - hexo-cli是hexo的命令行工具，用于执行hexo init\n  - Setup Hexo:\n    - 命令行为：hexo init <folder>\n    - 使用hexo的模板生成项目，下面几个文件比较重要：\n      - package.json: Node js用于指定依赖包的配置文件，在不清楚的情况下，不要随意修改。\n      - _config.yml: hexo的配置文件，可以设置网站title、主题、字体、制定域名等。\n      - source: Blog的源文件目录，使用hexo new生成的md文件存放在这个目录中。\n      - scaffolds：模板文件，hexo new使用它来生成新的模板md。\n      - themes：主题目录，设置网站版式。\n\n- 写Blog：\n  - hexo new post_title：生成新的模板文件。\n  - 注意：这里使用hexo命令和上面的hexo init不是同一个命令，这个hexo是在setup过程中下载的npm包，**需要在Blog这个目录中使用才有效。**\n  - 生成的文件在source/_post目录中，使用markdown编辑器来写博客。\n\n- 本机调试：\n  - 在写blog的过程中，可以直接在本机进行预览：hexo serve\n  - 默认使用4000端口，还可以[设置其他的端口](https://hexo.io/docs/server.html#Custom-IP)\n\n- 生成Blog文件：\n  - 生成编译后的blog：hexo generate\n  - 生成后的文件存放在public目录中\n  - 也可以使用下面的命令直接完成发布: hexo generate —deploy\n\n- 发布blog：\n  - 使用hexo deploy完成发布\n  - 第一次发布之前，需要修改_config.yml文件，参见：[hexo deploy](https://hexo.io/docs/deployment.html#Git)\n\n- 最后要说下Troubleshooting和需要注意的地方:\n  - hexo new不起作用\n    - 我们需要另外开一个branch来进行blog的写作（如source分支），然后使用hexo deploy到master分支上面。在不同的分支进行切换的时候，由于.gitignore文件不一样，导致我们可能在master分支上面删除了一些source分支上面重要的文件，如node_modules目录，则需要我们在切换到source分支的时候，重新下载npm包：npm i\n  - hexo deploy失败\n    - 需要安装hexo-deployer-git包，参考 [hexo deploy](https://hexo.io/docs/deployment.html#Git)\n  - master分支的使用方法\n    - master分支上面**不要放文件**，这个分支在使用hexo deploy之后自动更新，所以会覆盖我们自己的文件。\n  - 使用source分支来进行写作\n    - 上面提高了不能使用master分支，那么就需要我们使用别的分支来进行hexo的搭建和写作，我个人使用source分支，当然你也可以取一个自己喜欢的名字。\n\n  ------\n\n  ## — 2018年2月18日更新：\n\n- ### **绑定域名**：\n\n  绑定域名主要分为3个步骤：申请域名、Github Page 设置域名、域名解析\n\n  - 申请域名\n\n    - 国内：[万网](https://wanwang.aliyun.com/domain/com/)、[新网](http://www.xinnet.com/domain/domain.html)\n\n    国内域名申请有一些繁杂的手续和步骤，特别是域名备案。\n\n    - 国外：[GoDaddy](https://www.godaddy.com/)、[namecheap](https://www.namecheap.com)、[name](https://www.name.com/)、[enom](http://www.enom.com/)\n    - 国外的域名则相对操作简单很多，一般只需要提供联系方式即可，主要注意的是：Godaddy没有提供免费的域名信息保护功能，需要付费购买，否者别人可以通过 whois 查到域名持有者的信息。\n\n  - 设置 Github Page 的域名\n\n    - Github Page提供域名比对的功能，只需要在网站的根目录中添加 CNAME（全部大写）文件，填写自己申请的域名（一般是[顶级域名](http://baike.baidu.com/link?url=nBRFxvXXBbhf6esboaTgsAPqBASt6IT7cXro_okFQ9Xe8MOEaCnFOuJ1jxg0BRirAdJPU4XRrKZkYZSKzry4EmR21yJdMGuqG2TzJigDYipm0ZAAZTQGKg04IqSgAQ6E)）即可，不需要带 https://（如 baidu.com，而不是 http://www.baidu.com），github page 会自动把 www的请求重定向到顶级域名下。\n    - 使用 hexo 搭建起来的博客，则是在 source 目录中，来添加 CNAME 文件，然后部署到 github 上面（命令行为 hexo d -g）。\n\n  - 域名解析\n\n    - 申请好的域名，一般由提供商来进行解析（把域名映射为 IP 地址），我们这里不适用 Godaddy 提供的域名解析（NameServer） 服务，而是使用 NDSPod 作为我们的域名解析商。\n    - 申请 NDSPod 账户\n    - 在 NDSPod 添加域名、添加 A/CNAME 记录\n      - A 记录\n      - CNAME 记录\n    - 在 Godaddy 绑定 DNSPod的域名解析地址\n    - wait a moment\n\n- ### **HTTPS问题：**\n\n  - github page 的 ssl证书绑定的是 github.io 的域名。如果在 chrome 中使用 https 访问自定义的域名，会提示**NET::ERR_CERT_COMMON_NAME_INVALID**。\n  - CloudFlare 来做域名解析，开启 ssl 为 Flexble 之后，可以让chrome和 CloudFlare 之间使用 https访问，而CloudFlare 与 github page 中继续使用 http 来访问。\n  - 参考文章：[在GitHub Pages上使用CloudFlare https CDN](https://blog.chionlab.moe/2016/01/28/github-pages-with-https/)","slug":"使用hexo-github-page搭建个人博客","published":1,"updated":"2018-10-20T15:59:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnj0jyh7000kkxu0nu7so735","content":"<p>我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。</p>\n<p>2018年2月18日更新：域名绑定和https 访问问题。</p>\n<a id=\"more\"></a>\n<h2 id=\"首先简单介绍下github-page和hexo：\"><a href=\"#首先简单介绍下github-page和hexo：\" class=\"headerlink\" title=\"首先简单介绍下github page和hexo：\"></a>首先简单介绍下github page和hexo：</h2><ul>\n<li>Github Page: 使用github repo的静态网页工具，可以无缝地与github一起使用，每个github帐号都有400M的免费空间来存放博客文件，具体的使用说明可以参看<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">github page网站</a></li>\n<li>hexo:一个node.js的框架，使用npm进行安装和配置，能够快速的搭建静态博客。主要特点是搭建快速、支持markdown编辑、一键部署、本地预览。</li>\n<li>使用github page+hexo主要是考虑到能够快速搭建、维护方便、技术栈匹配。</li>\n</ul>\n<p>下面来说具体的搭建步骤，这里使用<strong>MAC的开发环境</strong>：</p>\n<ul>\n<li>配置github repo：<ul>\n<li>新建一个username.github.io的仓库，注意一定要使用自己的<strong>github用户名</strong></li>\n<li>设置ssh key：参见<a href=\"https://help.github.com/articles/generating-an-ssh-key/\" target=\"_blank\" rel=\"noopener\">github ssh教程</a></li>\n<li>这里需要说明的是：github page默认使用的是<strong>master分支</strong>，在master分支中的<strong>index.html</strong>文件会被解析并且作为网页的入口。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>安装Hexo命令行工具hexo-cli</p>\n<ul>\n<li>参考<a href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"noopener\">官方教程</a></li>\n<li>安装git、Node.js等工具</li>\n<li>安装hexo-cli命令行工具：npm install -g hexo-cli<ul>\n<li>hexo-cli是hexo的命令行工具，用于执行hexo init</li>\n</ul>\n</li>\n<li>Setup Hexo:<ul>\n<li>命令行为：hexo init <folder></folder></li>\n<li>使用hexo的模板生成项目，下面几个文件比较重要：<ul>\n<li>package.json: Node js用于指定依赖包的配置文件，在不清楚的情况下，不要随意修改。</li>\n<li>_config.yml: hexo的配置文件，可以设置网站title、主题、字体、制定域名等。</li>\n<li>source: Blog的源文件目录，使用hexo new生成的md文件存放在这个目录中。</li>\n<li>scaffolds：模板文件，hexo new使用它来生成新的模板md。</li>\n<li>themes：主题目录，设置网站版式。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>写Blog：</p>\n<ul>\n<li>hexo new post_title：生成新的模板文件。</li>\n<li>注意：这里使用hexo命令和上面的hexo init不是同一个命令，这个hexo是在setup过程中下载的npm包，<strong>需要在Blog这个目录中使用才有效。</strong></li>\n<li>生成的文件在source/_post目录中，使用markdown编辑器来写博客。</li>\n</ul>\n</li>\n<li><p>本机调试：</p>\n<ul>\n<li>在写blog的过程中，可以直接在本机进行预览：hexo serve</li>\n<li>默认使用4000端口，还可以<a href=\"https://hexo.io/docs/server.html#Custom-IP\" target=\"_blank\" rel=\"noopener\">设置其他的端口</a></li>\n</ul>\n</li>\n<li><p>生成Blog文件：</p>\n<ul>\n<li>生成编译后的blog：hexo generate</li>\n<li>生成后的文件存放在public目录中</li>\n<li>也可以使用下面的命令直接完成发布: hexo generate —deploy</li>\n</ul>\n</li>\n<li><p>发布blog：</p>\n<ul>\n<li>使用hexo deploy完成发布</li>\n<li>第一次发布之前，需要修改_config.yml文件，参见：<a href=\"https://hexo.io/docs/deployment.html#Git\" target=\"_blank\" rel=\"noopener\">hexo deploy</a></li>\n</ul>\n</li>\n<li><p>最后要说下Troubleshooting和需要注意的地方:</p>\n<ul>\n<li>hexo new不起作用<ul>\n<li>我们需要另外开一个branch来进行blog的写作（如source分支），然后使用hexo deploy到master分支上面。在不同的分支进行切换的时候，由于.gitignore文件不一样，导致我们可能在master分支上面删除了一些source分支上面重要的文件，如node_modules目录，则需要我们在切换到source分支的时候，重新下载npm包：npm i</li>\n</ul>\n</li>\n<li>hexo deploy失败<ul>\n<li>需要安装hexo-deployer-git包，参考 <a href=\"https://hexo.io/docs/deployment.html#Git\" target=\"_blank\" rel=\"noopener\">hexo deploy</a></li>\n</ul>\n</li>\n<li>master分支的使用方法<ul>\n<li>master分支上面<strong>不要放文件</strong>，这个分支在使用hexo deploy之后自动更新，所以会覆盖我们自己的文件。</li>\n</ul>\n</li>\n<li>使用source分支来进行写作<ul>\n<li>上面提高了不能使用master分支，那么就需要我们使用别的分支来进行hexo的搭建和写作，我个人使用source分支，当然你也可以取一个自己喜欢的名字。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"—-2018年2月18日更新：\"><a href=\"#—-2018年2月18日更新：\" class=\"headerlink\" title=\"— 2018年2月18日更新：\"></a>— 2018年2月18日更新：</h2></li>\n<li><h3 id=\"绑定域名：\"><a href=\"#绑定域名：\" class=\"headerlink\" title=\"绑定域名：\"></a><strong>绑定域名</strong>：</h3><p>绑定域名主要分为3个步骤：申请域名、Github Page 设置域名、域名解析</p>\n<ul>\n<li><p>申请域名</p>\n<ul>\n<li>国内：<a href=\"https://wanwang.aliyun.com/domain/com/\" target=\"_blank\" rel=\"noopener\">万网</a>、<a href=\"http://www.xinnet.com/domain/domain.html\" target=\"_blank\" rel=\"noopener\">新网</a></li>\n</ul>\n<p>国内域名申请有一些繁杂的手续和步骤，特别是域名备案。</p>\n<ul>\n<li>国外：<a href=\"https://www.godaddy.com/\" target=\"_blank\" rel=\"noopener\">GoDaddy</a>、<a href=\"https://www.namecheap.com\" target=\"_blank\" rel=\"noopener\">namecheap</a>、<a href=\"https://www.name.com/\" target=\"_blank\" rel=\"noopener\">name</a>、<a href=\"http://www.enom.com/\" target=\"_blank\" rel=\"noopener\">enom</a></li>\n<li>国外的域名则相对操作简单很多，一般只需要提供联系方式即可，主要注意的是：Godaddy没有提供免费的域名信息保护功能，需要付费购买，否者别人可以通过 whois 查到域名持有者的信息。</li>\n</ul>\n</li>\n<li><p>设置 Github Page 的域名</p>\n<ul>\n<li>Github Page提供域名比对的功能，只需要在网站的根目录中添加 CNAME（全部大写）文件，填写自己申请的域名（一般是<a href=\"http://baike.baidu.com/link?url=nBRFxvXXBbhf6esboaTgsAPqBASt6IT7cXro_okFQ9Xe8MOEaCnFOuJ1jxg0BRirAdJPU4XRrKZkYZSKzry4EmR21yJdMGuqG2TzJigDYipm0ZAAZTQGKg04IqSgAQ6E\" target=\"_blank\" rel=\"noopener\">顶级域名</a>）即可，不需要带 https://（如 baidu.com，而不是 <a href=\"http://www.baidu.com），github\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com），github</a> page 会自动把 www的请求重定向到顶级域名下。</li>\n<li>使用 hexo 搭建起来的博客，则是在 source 目录中，来添加 CNAME 文件，然后部署到 github 上面（命令行为 hexo d -g）。</li>\n</ul>\n</li>\n<li><p>域名解析</p>\n<ul>\n<li>申请好的域名，一般由提供商来进行解析（把域名映射为 IP 地址），我们这里不适用 Godaddy 提供的域名解析（NameServer） 服务，而是使用 NDSPod 作为我们的域名解析商。</li>\n<li>申请 NDSPod 账户</li>\n<li>在 NDSPod 添加域名、添加 A/CNAME 记录<ul>\n<li>A 记录</li>\n<li>CNAME 记录</li>\n</ul>\n</li>\n<li>在 Godaddy 绑定 DNSPod的域名解析地址</li>\n<li>wait a moment</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"HTTPS问题：\"><a href=\"#HTTPS问题：\" class=\"headerlink\" title=\"HTTPS问题：\"></a><strong>HTTPS问题：</strong></h3><ul>\n<li>github page 的 ssl证书绑定的是 github.io 的域名。如果在 chrome 中使用 https 访问自定义的域名，会提示<strong>NET::ERR_CERT_COMMON_NAME_INVALID</strong>。</li>\n<li>CloudFlare 来做域名解析，开启 ssl 为 Flexble 之后，可以让chrome和 CloudFlare 之间使用 https访问，而CloudFlare 与 github page 中继续使用 http 来访问。</li>\n<li>参考文章：<a href=\"https://blog.chionlab.moe/2016/01/28/github-pages-with-https/\" target=\"_blank\" rel=\"noopener\">在GitHub Pages上使用CloudFlare https CDN</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。</p>\n<p>2018年2月18日更新：域名绑定和https 访问问题。</p>","more":"<h2 id=\"首先简单介绍下github-page和hexo：\"><a href=\"#首先简单介绍下github-page和hexo：\" class=\"headerlink\" title=\"首先简单介绍下github page和hexo：\"></a>首先简单介绍下github page和hexo：</h2><ul>\n<li>Github Page: 使用github repo的静态网页工具，可以无缝地与github一起使用，每个github帐号都有400M的免费空间来存放博客文件，具体的使用说明可以参看<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">github page网站</a></li>\n<li>hexo:一个node.js的框架，使用npm进行安装和配置，能够快速的搭建静态博客。主要特点是搭建快速、支持markdown编辑、一键部署、本地预览。</li>\n<li>使用github page+hexo主要是考虑到能够快速搭建、维护方便、技术栈匹配。</li>\n</ul>\n<p>下面来说具体的搭建步骤，这里使用<strong>MAC的开发环境</strong>：</p>\n<ul>\n<li>配置github repo：<ul>\n<li>新建一个username.github.io的仓库，注意一定要使用自己的<strong>github用户名</strong></li>\n<li>设置ssh key：参见<a href=\"https://help.github.com/articles/generating-an-ssh-key/\" target=\"_blank\" rel=\"noopener\">github ssh教程</a></li>\n<li>这里需要说明的是：github page默认使用的是<strong>master分支</strong>，在master分支中的<strong>index.html</strong>文件会被解析并且作为网页的入口。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>安装Hexo命令行工具hexo-cli</p>\n<ul>\n<li>参考<a href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"noopener\">官方教程</a></li>\n<li>安装git、Node.js等工具</li>\n<li>安装hexo-cli命令行工具：npm install -g hexo-cli<ul>\n<li>hexo-cli是hexo的命令行工具，用于执行hexo init</li>\n</ul>\n</li>\n<li>Setup Hexo:<ul>\n<li>命令行为：hexo init <folder></folder></li>\n<li>使用hexo的模板生成项目，下面几个文件比较重要：<ul>\n<li>package.json: Node js用于指定依赖包的配置文件，在不清楚的情况下，不要随意修改。</li>\n<li>_config.yml: hexo的配置文件，可以设置网站title、主题、字体、制定域名等。</li>\n<li>source: Blog的源文件目录，使用hexo new生成的md文件存放在这个目录中。</li>\n<li>scaffolds：模板文件，hexo new使用它来生成新的模板md。</li>\n<li>themes：主题目录，设置网站版式。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>写Blog：</p>\n<ul>\n<li>hexo new post_title：生成新的模板文件。</li>\n<li>注意：这里使用hexo命令和上面的hexo init不是同一个命令，这个hexo是在setup过程中下载的npm包，<strong>需要在Blog这个目录中使用才有效。</strong></li>\n<li>生成的文件在source/_post目录中，使用markdown编辑器来写博客。</li>\n</ul>\n</li>\n<li><p>本机调试：</p>\n<ul>\n<li>在写blog的过程中，可以直接在本机进行预览：hexo serve</li>\n<li>默认使用4000端口，还可以<a href=\"https://hexo.io/docs/server.html#Custom-IP\" target=\"_blank\" rel=\"noopener\">设置其他的端口</a></li>\n</ul>\n</li>\n<li><p>生成Blog文件：</p>\n<ul>\n<li>生成编译后的blog：hexo generate</li>\n<li>生成后的文件存放在public目录中</li>\n<li>也可以使用下面的命令直接完成发布: hexo generate —deploy</li>\n</ul>\n</li>\n<li><p>发布blog：</p>\n<ul>\n<li>使用hexo deploy完成发布</li>\n<li>第一次发布之前，需要修改_config.yml文件，参见：<a href=\"https://hexo.io/docs/deployment.html#Git\" target=\"_blank\" rel=\"noopener\">hexo deploy</a></li>\n</ul>\n</li>\n<li><p>最后要说下Troubleshooting和需要注意的地方:</p>\n<ul>\n<li>hexo new不起作用<ul>\n<li>我们需要另外开一个branch来进行blog的写作（如source分支），然后使用hexo deploy到master分支上面。在不同的分支进行切换的时候，由于.gitignore文件不一样，导致我们可能在master分支上面删除了一些source分支上面重要的文件，如node_modules目录，则需要我们在切换到source分支的时候，重新下载npm包：npm i</li>\n</ul>\n</li>\n<li>hexo deploy失败<ul>\n<li>需要安装hexo-deployer-git包，参考 <a href=\"https://hexo.io/docs/deployment.html#Git\" target=\"_blank\" rel=\"noopener\">hexo deploy</a></li>\n</ul>\n</li>\n<li>master分支的使用方法<ul>\n<li>master分支上面<strong>不要放文件</strong>，这个分支在使用hexo deploy之后自动更新，所以会覆盖我们自己的文件。</li>\n</ul>\n</li>\n<li>使用source分支来进行写作<ul>\n<li>上面提高了不能使用master分支，那么就需要我们使用别的分支来进行hexo的搭建和写作，我个人使用source分支，当然你也可以取一个自己喜欢的名字。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"—-2018年2月18日更新：\"><a href=\"#—-2018年2月18日更新：\" class=\"headerlink\" title=\"— 2018年2月18日更新：\"></a>— 2018年2月18日更新：</h2></li>\n<li><h3 id=\"绑定域名：\"><a href=\"#绑定域名：\" class=\"headerlink\" title=\"绑定域名：\"></a><strong>绑定域名</strong>：</h3><p>绑定域名主要分为3个步骤：申请域名、Github Page 设置域名、域名解析</p>\n<ul>\n<li><p>申请域名</p>\n<ul>\n<li>国内：<a href=\"https://wanwang.aliyun.com/domain/com/\" target=\"_blank\" rel=\"noopener\">万网</a>、<a href=\"http://www.xinnet.com/domain/domain.html\" target=\"_blank\" rel=\"noopener\">新网</a></li>\n</ul>\n<p>国内域名申请有一些繁杂的手续和步骤，特别是域名备案。</p>\n<ul>\n<li>国外：<a href=\"https://www.godaddy.com/\" target=\"_blank\" rel=\"noopener\">GoDaddy</a>、<a href=\"https://www.namecheap.com\" target=\"_blank\" rel=\"noopener\">namecheap</a>、<a href=\"https://www.name.com/\" target=\"_blank\" rel=\"noopener\">name</a>、<a href=\"http://www.enom.com/\" target=\"_blank\" rel=\"noopener\">enom</a></li>\n<li>国外的域名则相对操作简单很多，一般只需要提供联系方式即可，主要注意的是：Godaddy没有提供免费的域名信息保护功能，需要付费购买，否者别人可以通过 whois 查到域名持有者的信息。</li>\n</ul>\n</li>\n<li><p>设置 Github Page 的域名</p>\n<ul>\n<li>Github Page提供域名比对的功能，只需要在网站的根目录中添加 CNAME（全部大写）文件，填写自己申请的域名（一般是<a href=\"http://baike.baidu.com/link?url=nBRFxvXXBbhf6esboaTgsAPqBASt6IT7cXro_okFQ9Xe8MOEaCnFOuJ1jxg0BRirAdJPU4XRrKZkYZSKzry4EmR21yJdMGuqG2TzJigDYipm0ZAAZTQGKg04IqSgAQ6E\" target=\"_blank\" rel=\"noopener\">顶级域名</a>）即可，不需要带 https://（如 baidu.com，而不是 <a href=\"http://www.baidu.com），github\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com），github</a> page 会自动把 www的请求重定向到顶级域名下。</li>\n<li>使用 hexo 搭建起来的博客，则是在 source 目录中，来添加 CNAME 文件，然后部署到 github 上面（命令行为 hexo d -g）。</li>\n</ul>\n</li>\n<li><p>域名解析</p>\n<ul>\n<li>申请好的域名，一般由提供商来进行解析（把域名映射为 IP 地址），我们这里不适用 Godaddy 提供的域名解析（NameServer） 服务，而是使用 NDSPod 作为我们的域名解析商。</li>\n<li>申请 NDSPod 账户</li>\n<li>在 NDSPod 添加域名、添加 A/CNAME 记录<ul>\n<li>A 记录</li>\n<li>CNAME 记录</li>\n</ul>\n</li>\n<li>在 Godaddy 绑定 DNSPod的域名解析地址</li>\n<li>wait a moment</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"HTTPS问题：\"><a href=\"#HTTPS问题：\" class=\"headerlink\" title=\"HTTPS问题：\"></a><strong>HTTPS问题：</strong></h3><ul>\n<li>github page 的 ssl证书绑定的是 github.io 的域名。如果在 chrome 中使用 https 访问自定义的域名，会提示<strong>NET::ERR_CERT_COMMON_NAME_INVALID</strong>。</li>\n<li>CloudFlare 来做域名解析，开启 ssl 为 Flexble 之后，可以让chrome和 CloudFlare 之间使用 https访问，而CloudFlare 与 github page 中继续使用 http 来访问。</li>\n<li>参考文章：<a href=\"https://blog.chionlab.moe/2016/01/28/github-pages-with-https/\" target=\"_blank\" rel=\"noopener\">在GitHub Pages上使用CloudFlare https CDN</a></li>\n</ul>\n</li>\n</ul>"},{"title":"最靠谱的『科学上网』方式 - VPS 搭建SSR 服务端教程","date":"2018-01-21T07:32:08.000Z","_content":"\n由于大家都知道的原因，咱们不能看youtube和老外一样刷 Facebook和 Twitter，谷歌也早于2010年退出中国地区，对于技术人员来说，谷歌是甩百度几条街的。\n\n网上其实有不少科学上网的教程，一般推荐使用VPN 代理，然而这两年网络审查越发严格，时常有各种协议被封。现在很多人购买付费的 SS/SSR 服务来实现网络自由访问，不过这些服务的服务也会时常被封 IP，本文主要讲的是目前为止最实用、最稳定的一样方式：使用 VPS 自建 SSR 服务器。\n\n<!-- more -->\n\n------\n\n需要的工具：\n\n- **计算机基本操作能力**\n- **Linode 账号/ Digital Ocean 账号**\n- **一张可以支付美金的双币信用卡**\n\n## 开通 VPS 账户\n\nLinode 或者DigitalOcean都是美国的 VPS 服务商，可以用来作为 SSR的服务器，自由连接到全球网络，当然也有不少人使用它们来搭建网络或者个人博客，本文主要解决的网络访问的问题。\n\n如何开通 Linode 账户可以参考下面的文章：<https://www.jianshu.com/p/0951a4afd640>\n\n需要说明一下：\n\n- 一般使用5美元/月的节点就可以了，推荐使用日本或者新加坡的节点。\n- **不要使用国内邮件开通**，没有 gmail 邮箱的话，可以[申请一个 hotmail 邮箱](https://jingyan.baidu.com/article/75ab0bcbecd341d6874db264.html)\n- VPS 的**操作系统推荐使用 Ubuntu**\n- Windows 下建议使用 **Putty 来做 ssh 工具**，使用官网下载，实在不行，使用百度助手下载，**不要找那些破解资源，天知道里面是不是有病毒和木马**\n- MAC 自带了 ssh命令\n- 很是使用[百度经验](https://jingyan.baidu.com)还是比较靠谱的，基本的计算机操作不会的话，在这里可以找到答案的。一般的使用『如何使用XXX』来搜索。\n\n------\n\n## 搭建 SSR 服务器\n\n这里有一个一键安装 SSR 服务器的脚本：<https://teddysun.com/486.html> ，里面包含了一些基本操作和常见问题\n\n- root 账户就是在 Linode 创建的账户\n- 使用SSR 的一键安装脚本：<https://shadowsocks.be/9.html>\n- iOS 手机的用户，可以下载 [Detour](https://itunes.apple.com/cn/app/id1260141606?mt=8)这个 app，使用的教程：<https://github.com/iamldj/Detour>\n- 使用443端口，默认端口8989容易导致姿势不对，翻不过去\n- 使用 obfs 来提高可靠性\n\n\n\n现在的各种一键安装脚本真的是懒人福音，都一个梯子总归是好的。\n\n**最后祝好！**","source":"_posts/最靠谱的『科学上网』方式-VPS-搭建SSR-服务端教程.md","raw":"---\ntitle: 最靠谱的『科学上网』方式 - VPS 搭建SSR 服务端教程\ndate: 2018-01-21 15:32:08\ncategories: 开发\ntags:\n- 笔记\npermalink: VPS+SSR-Server\n---\n\n由于大家都知道的原因，咱们不能看youtube和老外一样刷 Facebook和 Twitter，谷歌也早于2010年退出中国地区，对于技术人员来说，谷歌是甩百度几条街的。\n\n网上其实有不少科学上网的教程，一般推荐使用VPN 代理，然而这两年网络审查越发严格，时常有各种协议被封。现在很多人购买付费的 SS/SSR 服务来实现网络自由访问，不过这些服务的服务也会时常被封 IP，本文主要讲的是目前为止最实用、最稳定的一样方式：使用 VPS 自建 SSR 服务器。\n\n<!-- more -->\n\n------\n\n需要的工具：\n\n- **计算机基本操作能力**\n- **Linode 账号/ Digital Ocean 账号**\n- **一张可以支付美金的双币信用卡**\n\n## 开通 VPS 账户\n\nLinode 或者DigitalOcean都是美国的 VPS 服务商，可以用来作为 SSR的服务器，自由连接到全球网络，当然也有不少人使用它们来搭建网络或者个人博客，本文主要解决的网络访问的问题。\n\n如何开通 Linode 账户可以参考下面的文章：<https://www.jianshu.com/p/0951a4afd640>\n\n需要说明一下：\n\n- 一般使用5美元/月的节点就可以了，推荐使用日本或者新加坡的节点。\n- **不要使用国内邮件开通**，没有 gmail 邮箱的话，可以[申请一个 hotmail 邮箱](https://jingyan.baidu.com/article/75ab0bcbecd341d6874db264.html)\n- VPS 的**操作系统推荐使用 Ubuntu**\n- Windows 下建议使用 **Putty 来做 ssh 工具**，使用官网下载，实在不行，使用百度助手下载，**不要找那些破解资源，天知道里面是不是有病毒和木马**\n- MAC 自带了 ssh命令\n- 很是使用[百度经验](https://jingyan.baidu.com)还是比较靠谱的，基本的计算机操作不会的话，在这里可以找到答案的。一般的使用『如何使用XXX』来搜索。\n\n------\n\n## 搭建 SSR 服务器\n\n这里有一个一键安装 SSR 服务器的脚本：<https://teddysun.com/486.html> ，里面包含了一些基本操作和常见问题\n\n- root 账户就是在 Linode 创建的账户\n- 使用SSR 的一键安装脚本：<https://shadowsocks.be/9.html>\n- iOS 手机的用户，可以下载 [Detour](https://itunes.apple.com/cn/app/id1260141606?mt=8)这个 app，使用的教程：<https://github.com/iamldj/Detour>\n- 使用443端口，默认端口8989容易导致姿势不对，翻不过去\n- 使用 obfs 来提高可靠性\n\n\n\n现在的各种一键安装脚本真的是懒人福音，都一个梯子总归是好的。\n\n**最后祝好！**","slug":"VPS+SSR-Server","published":1,"updated":"2018-10-20T15:59:19.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnj0jyha000pkxu08lq1xh2p","content":"<p>由于大家都知道的原因，咱们不能看youtube和老外一样刷 Facebook和 Twitter，谷歌也早于2010年退出中国地区，对于技术人员来说，谷歌是甩百度几条街的。</p>\n<p>网上其实有不少科学上网的教程，一般推荐使用VPN 代理，然而这两年网络审查越发严格，时常有各种协议被封。现在很多人购买付费的 SS/SSR 服务来实现网络自由访问，不过这些服务的服务也会时常被封 IP，本文主要讲的是目前为止最实用、最稳定的一样方式：使用 VPS 自建 SSR 服务器。</p>\n<a id=\"more\"></a>\n<hr>\n<p>需要的工具：</p>\n<ul>\n<li><strong>计算机基本操作能力</strong></li>\n<li><strong>Linode 账号/ Digital Ocean 账号</strong></li>\n<li><strong>一张可以支付美金的双币信用卡</strong></li>\n</ul>\n<h2 id=\"开通-VPS-账户\"><a href=\"#开通-VPS-账户\" class=\"headerlink\" title=\"开通 VPS 账户\"></a>开通 VPS 账户</h2><p>Linode 或者DigitalOcean都是美国的 VPS 服务商，可以用来作为 SSR的服务器，自由连接到全球网络，当然也有不少人使用它们来搭建网络或者个人博客，本文主要解决的网络访问的问题。</p>\n<p>如何开通 Linode 账户可以参考下面的文章：<a href=\"https://www.jianshu.com/p/0951a4afd640\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/0951a4afd640</a></p>\n<p>需要说明一下：</p>\n<ul>\n<li>一般使用5美元/月的节点就可以了，推荐使用日本或者新加坡的节点。</li>\n<li><strong>不要使用国内邮件开通</strong>，没有 gmail 邮箱的话，可以<a href=\"https://jingyan.baidu.com/article/75ab0bcbecd341d6874db264.html\" target=\"_blank\" rel=\"noopener\">申请一个 hotmail 邮箱</a></li>\n<li>VPS 的<strong>操作系统推荐使用 Ubuntu</strong></li>\n<li>Windows 下建议使用 <strong>Putty 来做 ssh 工具</strong>，使用官网下载，实在不行，使用百度助手下载，<strong>不要找那些破解资源，天知道里面是不是有病毒和木马</strong></li>\n<li>MAC 自带了 ssh命令</li>\n<li>很是使用<a href=\"https://jingyan.baidu.com\" target=\"_blank\" rel=\"noopener\">百度经验</a>还是比较靠谱的，基本的计算机操作不会的话，在这里可以找到答案的。一般的使用『如何使用XXX』来搜索。</li>\n</ul>\n<hr>\n<h2 id=\"搭建-SSR-服务器\"><a href=\"#搭建-SSR-服务器\" class=\"headerlink\" title=\"搭建 SSR 服务器\"></a>搭建 SSR 服务器</h2><p>这里有一个一键安装 SSR 服务器的脚本：<a href=\"https://teddysun.com/486.html\" target=\"_blank\" rel=\"noopener\">https://teddysun.com/486.html</a> ，里面包含了一些基本操作和常见问题</p>\n<ul>\n<li>root 账户就是在 Linode 创建的账户</li>\n<li>使用SSR 的一键安装脚本：<a href=\"https://shadowsocks.be/9.html\" target=\"_blank\" rel=\"noopener\">https://shadowsocks.be/9.html</a></li>\n<li>iOS 手机的用户，可以下载 <a href=\"https://itunes.apple.com/cn/app/id1260141606?mt=8\" target=\"_blank\" rel=\"noopener\">Detour</a>这个 app，使用的教程：<a href=\"https://github.com/iamldj/Detour\" target=\"_blank\" rel=\"noopener\">https://github.com/iamldj/Detour</a></li>\n<li>使用443端口，默认端口8989容易导致姿势不对，翻不过去</li>\n<li>使用 obfs 来提高可靠性</li>\n</ul>\n<p>现在的各种一键安装脚本真的是懒人福音，都一个梯子总归是好的。</p>\n<p><strong>最后祝好！</strong></p>\n","site":{"data":{}},"excerpt":"<p>由于大家都知道的原因，咱们不能看youtube和老外一样刷 Facebook和 Twitter，谷歌也早于2010年退出中国地区，对于技术人员来说，谷歌是甩百度几条街的。</p>\n<p>网上其实有不少科学上网的教程，一般推荐使用VPN 代理，然而这两年网络审查越发严格，时常有各种协议被封。现在很多人购买付费的 SS/SSR 服务来实现网络自由访问，不过这些服务的服务也会时常被封 IP，本文主要讲的是目前为止最实用、最稳定的一样方式：使用 VPS 自建 SSR 服务器。</p>","more":"<hr>\n<p>需要的工具：</p>\n<ul>\n<li><strong>计算机基本操作能力</strong></li>\n<li><strong>Linode 账号/ Digital Ocean 账号</strong></li>\n<li><strong>一张可以支付美金的双币信用卡</strong></li>\n</ul>\n<h2 id=\"开通-VPS-账户\"><a href=\"#开通-VPS-账户\" class=\"headerlink\" title=\"开通 VPS 账户\"></a>开通 VPS 账户</h2><p>Linode 或者DigitalOcean都是美国的 VPS 服务商，可以用来作为 SSR的服务器，自由连接到全球网络，当然也有不少人使用它们来搭建网络或者个人博客，本文主要解决的网络访问的问题。</p>\n<p>如何开通 Linode 账户可以参考下面的文章：<a href=\"https://www.jianshu.com/p/0951a4afd640\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/0951a4afd640</a></p>\n<p>需要说明一下：</p>\n<ul>\n<li>一般使用5美元/月的节点就可以了，推荐使用日本或者新加坡的节点。</li>\n<li><strong>不要使用国内邮件开通</strong>，没有 gmail 邮箱的话，可以<a href=\"https://jingyan.baidu.com/article/75ab0bcbecd341d6874db264.html\" target=\"_blank\" rel=\"noopener\">申请一个 hotmail 邮箱</a></li>\n<li>VPS 的<strong>操作系统推荐使用 Ubuntu</strong></li>\n<li>Windows 下建议使用 <strong>Putty 来做 ssh 工具</strong>，使用官网下载，实在不行，使用百度助手下载，<strong>不要找那些破解资源，天知道里面是不是有病毒和木马</strong></li>\n<li>MAC 自带了 ssh命令</li>\n<li>很是使用<a href=\"https://jingyan.baidu.com\" target=\"_blank\" rel=\"noopener\">百度经验</a>还是比较靠谱的，基本的计算机操作不会的话，在这里可以找到答案的。一般的使用『如何使用XXX』来搜索。</li>\n</ul>\n<hr>\n<h2 id=\"搭建-SSR-服务器\"><a href=\"#搭建-SSR-服务器\" class=\"headerlink\" title=\"搭建 SSR 服务器\"></a>搭建 SSR 服务器</h2><p>这里有一个一键安装 SSR 服务器的脚本：<a href=\"https://teddysun.com/486.html\" target=\"_blank\" rel=\"noopener\">https://teddysun.com/486.html</a> ，里面包含了一些基本操作和常见问题</p>\n<ul>\n<li>root 账户就是在 Linode 创建的账户</li>\n<li>使用SSR 的一键安装脚本：<a href=\"https://shadowsocks.be/9.html\" target=\"_blank\" rel=\"noopener\">https://shadowsocks.be/9.html</a></li>\n<li>iOS 手机的用户，可以下载 <a href=\"https://itunes.apple.com/cn/app/id1260141606?mt=8\" target=\"_blank\" rel=\"noopener\">Detour</a>这个 app，使用的教程：<a href=\"https://github.com/iamldj/Detour\" target=\"_blank\" rel=\"noopener\">https://github.com/iamldj/Detour</a></li>\n<li>使用443端口，默认端口8989容易导致姿势不对，翻不过去</li>\n<li>使用 obfs 来提高可靠性</li>\n</ul>\n<p>现在的各种一键安装脚本真的是懒人福音，都一个梯子总归是好的。</p>\n<p><strong>最后祝好！</strong></p>"}],"PostAsset":[{"_id":"source/_posts/Swift-与-OC-混编小技巧/1-1.jpg","slug":"1-1.jpg","post":"cjnj0jygm0002kxu05bo5sed8","modified":1,"renderable":0},{"_id":"source/_posts/Swift-与-OC-混编小技巧/2-3.jpg","slug":"2-3.jpg","post":"cjnj0jygm0002kxu05bo5sed8","modified":1,"renderable":0},{"_id":"source/_posts/Swift-与-OC-混编小技巧/3-2.jpg","slug":"3-2.jpg","post":"cjnj0jygm0002kxu05bo5sed8","modified":1,"renderable":0},{"_id":"source/_posts/iOS-ReactNative私有库指南/Folly-error.png","post":"cjnj0jygv0008kxu08ggwuj1m","slug":"Folly-error.png","modified":1,"renderable":1},{"_id":"source/_posts/iOS-ReactNative私有库指南/schedule-error.png","post":"cjnj0jygv0008kxu08ggwuj1m","slug":"schedule-error.png","modified":1,"renderable":1},{"_id":"source/_posts/iOS-ReactNative私有库指南/sourcetree.png","slug":"sourcetree.png","post":"cjnj0jygv0008kxu08ggwuj1m","modified":1,"renderable":0},{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题/PR 代码.png","post":"cjnj0jygg0000kxu0ped3sxun","slug":"PR 代码.png","modified":1,"renderable":1},{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题/pod check失败.png","post":"cjnj0jygg0000kxu0ped3sxun","slug":"pod check失败.png","modified":1,"renderable":1},{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题/podfile.lock冲突.png","post":"cjnj0jygg0000kxu0ped3sxun","slug":"podfile.lock冲突.png","modified":1,"renderable":1},{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题/xcode编译脚本.png","post":"cjnj0jygg0000kxu0ped3sxun","slug":"xcode编译脚本.png","modified":1,"renderable":1},{"_id":"source/_posts/Swift-与-OC-混编小技巧/1-2.jpg","post":"cjnj0jygm0002kxu05bo5sed8","slug":"1-2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Swift-与-OC-混编小技巧/1-3.jpg","post":"cjnj0jygm0002kxu05bo5sed8","slug":"1-3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Swift-与-OC-混编小技巧/1-4.jpg","post":"cjnj0jygm0002kxu05bo5sed8","slug":"1-4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Swift-与-OC-混编小技巧/2-1.jpg","post":"cjnj0jygm0002kxu05bo5sed8","slug":"2-1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Swift-与-OC-混编小技巧/2-2.jpg","post":"cjnj0jygm0002kxu05bo5sed8","slug":"2-2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Swift-与-OC-混编小技巧/2-4.jpg","post":"cjnj0jygm0002kxu05bo5sed8","slug":"2-4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Swift-与-OC-混编小技巧/3-1.jpg","post":"cjnj0jygm0002kxu05bo5sed8","slug":"3-1.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjnj0jygt0007kxu0c1jwoxnb","category_id":"cjnj0jygp0004kxu0raz1mo2b","_id":"cjnj0jyh3000ekxu0u4kk0gfa"},{"post_id":"cjnj0jygg0000kxu0ped3sxun","category_id":"cjnj0jygp0004kxu0raz1mo2b","_id":"cjnj0jyh6000ikxu0z03i3cby"},{"post_id":"cjnj0jygz000ckxu094l2axjc","category_id":"cjnj0jygp0004kxu0raz1mo2b","_id":"cjnj0jyh8000lkxu0v77irvbj"},{"post_id":"cjnj0jygm0002kxu05bo5sed8","category_id":"cjnj0jygp0004kxu0raz1mo2b","_id":"cjnj0jyhb000qkxu0fmesmvfo"},{"post_id":"cjnj0jyh1000dkxu0crb4sxrd","category_id":"cjnj0jygp0004kxu0raz1mo2b","_id":"cjnj0jyhc000skxu0xnixvdto"},{"post_id":"cjnj0jyh5000hkxu024q0jggk","category_id":"cjnj0jygp0004kxu0raz1mo2b","_id":"cjnj0jyhh000vkxu0pz05y2z0"},{"post_id":"cjnj0jygs0006kxu06jn5tu5p","category_id":"cjnj0jygp0004kxu0raz1mo2b","_id":"cjnj0jyhm000xkxu0ja6235jc"},{"post_id":"cjnj0jyha000pkxu08lq1xh2p","category_id":"cjnj0jygp0004kxu0raz1mo2b","_id":"cjnj0jyhn000zkxu0u0csovg7"},{"post_id":"cjnj0jygv0008kxu08ggwuj1m","category_id":"cjnj0jygp0004kxu0raz1mo2b","_id":"cjnj0jyhn0011kxu00iok5wxx"},{"post_id":"cjnj0jygv0008kxu08ggwuj1m","category_id":"cjnj0jyh8000mkxu0eg8l9dxv","_id":"cjnj0jyho0014kxu03vy4ip84"}],"PostTag":[{"post_id":"cjnj0jygt0007kxu0c1jwoxnb","tag_id":"cjnj0jygr0005kxu0qt0pfrn8","_id":"cjnj0jygy000bkxu0kwz56d5z"},{"post_id":"cjnj0jygg0000kxu0ped3sxun","tag_id":"cjnj0jygr0005kxu0qt0pfrn8","_id":"cjnj0jyh6000jkxu02qdolgxc"},{"post_id":"cjnj0jygg0000kxu0ped3sxun","tag_id":"cjnj0jygw000akxu01vltyplc","_id":"cjnj0jyh9000nkxu0s8zrril3"},{"post_id":"cjnj0jyh1000dkxu0crb4sxrd","tag_id":"cjnj0jygr0005kxu0qt0pfrn8","_id":"cjnj0jyhb000rkxu0tpiv974m"},{"post_id":"cjnj0jygm0002kxu05bo5sed8","tag_id":"cjnj0jygr0005kxu0qt0pfrn8","_id":"cjnj0jyhc000tkxu0w662wkkw"},{"post_id":"cjnj0jygs0006kxu06jn5tu5p","tag_id":"cjnj0jygr0005kxu0qt0pfrn8","_id":"cjnj0jyhh000wkxu0v5hrh3jx"},{"post_id":"cjnj0jygv0008kxu08ggwuj1m","tag_id":"cjnj0jygr0005kxu0qt0pfrn8","_id":"cjnj0jyhn0010kxu0ymskc2th"},{"post_id":"cjnj0jygv0008kxu08ggwuj1m","tag_id":"cjnj0jyhc000ukxu00v6rmmbk","_id":"cjnj0jyhn0012kxu0iy5m5f6q"},{"post_id":"cjnj0jygz000ckxu094l2axjc","tag_id":"cjnj0jyhn000ykxu0oyw6ym3c","_id":"cjnj0jyho0015kxu047updd55"},{"post_id":"cjnj0jyh5000hkxu024q0jggk","tag_id":"cjnj0jygr0005kxu0qt0pfrn8","_id":"cjnj0jyhp0017kxu0xu1ddhij"},{"post_id":"cjnj0jyh5000hkxu024q0jggk","tag_id":"cjnj0jyho0013kxu01m5cvym0","_id":"cjnj0jyhp0018kxu0battmv60"},{"post_id":"cjnj0jyh7000kkxu0nu7so735","tag_id":"cjnj0jyho0016kxu03eonbsct","_id":"cjnj0jyhp001akxu0miovesk6"},{"post_id":"cjnj0jyha000pkxu08lq1xh2p","tag_id":"cjnj0jyhp0019kxu0h6hgy7os","_id":"cjnj0jyhp001bkxu0vfj712bk"}],"Tag":[{"name":"iOS","_id":"cjnj0jygr0005kxu0qt0pfrn8"},{"name":"cocoapods","_id":"cjnj0jygw000akxu01vltyplc"},{"name":"ReactNative","_id":"cjnj0jyhc000ukxu00v6rmmbk"},{"name":"git","_id":"cjnj0jyhn000ykxu0oyw6ym3c"},{"name":"多线程","_id":"cjnj0jyho0013kxu01m5cvym0"},{"name":"hexo","_id":"cjnj0jyho0016kxu03eonbsct"},{"name":"笔记","_id":"cjnj0jyhp0019kxu0h6hgy7os"}]}}