{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1478855014000},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1478856494000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1478856494000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1478856494000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1478856494000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1478856494000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1478856494000},{"_id":"source/_posts/使用hexo-github-page搭建个人博客.md","hash":"ccbd38ddb9cb079444954fe45067fac6d49aeac9","modified":1478934351000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1478856494000},{"_id":"source/_posts/git常用手册.md","hash":"46061ffe14faac9233ccf6202839f9a05ea9fdfb","modified":1478856494000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1478856494000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1478856494000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1478856494000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1478856494000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1478856494000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1478856494000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1478856494000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1478856494000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1478856494000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1478856494000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1478856494000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1478856494000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1478856494000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1478856494000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1478856494000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1478856494000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1478856494000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1478856494000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1478856494000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1478856494000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1478856494000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1478856494000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1478856494000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1478856494000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1478856494000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1478856494000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1478856494000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1478856494000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1478856494000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1478856494000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1478856494000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1478856494000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1478856494000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1478856494000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1478856494000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1478856494000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1478856494000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1478856494000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1478856494000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1478856494000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1478856494000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1478856494000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1478856494000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1478856494000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1478856494000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1478856494000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1478856494000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1478856494000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1478856494000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1478856494000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1478856494000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1478856494000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1478856494000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1478856494000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1478856494000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1478856494000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1478856494000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1478856494000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1478856494000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1478856494000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1478856494000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1478856494000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1478856494000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1478856494000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1478856494000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1478856494000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1478856494000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1478856494000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1478856494000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1478856494000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1478856494000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1478856494000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1478856494000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1478934387000},{"_id":"public/2016/11/11/git常用手册/index.html","hash":"50ed89bd55fac6191770ffe329e07021d2bf654c","modified":1478934436747},{"_id":"public/archives/index.html","hash":"716bfd449624c241b34ca02f8320922f344fca4b","modified":1478934436757},{"_id":"public/archives/2016/index.html","hash":"70081996657eb0dd26eda3be0451a99bb05e19f5","modified":1478934436757},{"_id":"public/archives/2016/11/index.html","hash":"5568170991db164fd4b6cc298a193a091250de03","modified":1478934436757},{"_id":"public/index.html","hash":"0e4b0c3b736bfaa7ab48cc363551fba747dabb24","modified":1478934436757},{"_id":"public/2016/11/12/使用hexo-github-page搭建个人博客/index.html","hash":"22cd465818c3859829708b0027873ebcb98354ae","modified":1478934436758}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"使用hexo+github page搭建个人博客","date":"2016-11-12T06:36:16.000Z","_content":"\n我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。\n\n首先简单介绍下github page和hexo：\n\n- Github Page: 使用github repo的静态网页工具，可以无缝地与github一起使用，每个github帐号都有400M的免费空间来存放博客文件，具体的使用说明可以参看[github page网站](https://pages.github.com/)\n- hexo:一个node.js的框架，使用npm进行安装和配置，能够快速的搭建静态博客。主要特点是搭建快速、支持markdown编辑、一键部署、本地预览。\n- 使用github page+hexo主要是考虑到能够快速搭建、维护方便、技术栈匹配。\n\n\n\n下面来说具体的搭建步骤，这里使用**MAC的开发环境**：\n\n- 配置github repo：\n  - 新建一个username.github.io的仓库，注意一定要使用自己的**github用户名**\n  - 设置ssh key：参见[github ssh教程](https://help.github.com/articles/generating-an-ssh-key/)\n  - 这里需要说明的是：github page默认使用的是**master分支**，在master分支中的**index.html**文件会被解析并且作为网页的入口。\n\n\n- 安装Hexo命令行工具hexo-cli\n  - 参考[官方教程](https://hexo.io/docs/index.html)\n  - 安装git、Node.js等工具\n  - 安装hexo-cli命令行工具：npm install -g hexo-cli\n    - hexo-cli是hexo的命令行工具，用于执行hexo init\n  - Setup Hexo:\n    - 命令行为：hexo init <folder>\n    - 使用hexo的模板生成项目，下面几个文件比较重要：\n      - package.json: Node js用于指定依赖包的配置文件，在不清楚的情况下，不要随意修改。\n      - _config.yml: hexo的配置文件，可以设置网站title、主题、字体、制定域名等。\n      - source: Blog的源文件目录，使用hexo new生成的md文件存放在这个目录中。\n      - scaffolds：模板文件，hexo new使用它来生成新的模板md。\n      - themes：主题目录，设置网站版式。\n- 写Blog：\n  - hexo new post_title：生成新的模板文件。\n  - 注意：这里使用hexo命令和上面的hexo init不是同一个命令，这个hexo是在setup过程中下载的npm包，**需要在Blog这个目录中使用才有效。**\n  - 生成的文件在source/_post目录中，使用markdown编辑器来写博客。\n- 本机调试：\n  - 在写blog的过程中，可以直接在本机进行预览：hexo serve\n  - 默认使用4000端口，还可以[设置其他的端口](https://hexo.io/docs/server.html#Custom-IP)\n- 生成Blog文件：\n  - 生成编译后的blog：hexo generate\n  - 生成后的文件存放在public目录中\n  - 也可以使用下面的命令直接完成发布: hexo generate —deploy\n- 发布blog：\n  - 使用hexo deploy完成发布\n  - 第一次发布之前，需要修改_config.yml文件，参见：[hexo deploy](https://hexo.io/docs/deployment.html#Git)\n- 最后要说下Troubleshooting和需要注意的地方:\n  - hexo new不起作用\n    - 我们需要另外开一个branch来进行blog的写作（如source分支），然后使用hexo deploy到master分支上面。在不同的分支进行切换的时候，由于.gitignore文件不一样，导致我们可能在master分支上面删除了一些source分支上面重要的文件，如node_modules目录，则需要我们在切换到source分支的时候，重新下载npm包：npm i\n  - hexo deploy失败\n    - 需要安装hexo-deployer-git包，参考 [hexo deploy](https://hexo.io/docs/deployment.html#Git)\n  - master分支的使用方法\n    - master分支上面**不要放文件**，这个分支在使用hexo deploy之后自动更新，所以会覆盖我们自己的文件。\n  - 使用source分支来进行写作\n    - 上面提高了不能使用master分支，那么就需要我们使用别的分支来进行hexo的搭建和写作，我个人使用source分支，当然你也可以取一个自己喜欢的名字。","source":"_posts/使用hexo-github-page搭建个人博客.md","raw":"---\ntitle: 使用hexo+github page搭建个人博客\ndate: 2016-11-12 14:36:16\ntags:\n---\n\n我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。\n\n首先简单介绍下github page和hexo：\n\n- Github Page: 使用github repo的静态网页工具，可以无缝地与github一起使用，每个github帐号都有400M的免费空间来存放博客文件，具体的使用说明可以参看[github page网站](https://pages.github.com/)\n- hexo:一个node.js的框架，使用npm进行安装和配置，能够快速的搭建静态博客。主要特点是搭建快速、支持markdown编辑、一键部署、本地预览。\n- 使用github page+hexo主要是考虑到能够快速搭建、维护方便、技术栈匹配。\n\n\n\n下面来说具体的搭建步骤，这里使用**MAC的开发环境**：\n\n- 配置github repo：\n  - 新建一个username.github.io的仓库，注意一定要使用自己的**github用户名**\n  - 设置ssh key：参见[github ssh教程](https://help.github.com/articles/generating-an-ssh-key/)\n  - 这里需要说明的是：github page默认使用的是**master分支**，在master分支中的**index.html**文件会被解析并且作为网页的入口。\n\n\n- 安装Hexo命令行工具hexo-cli\n  - 参考[官方教程](https://hexo.io/docs/index.html)\n  - 安装git、Node.js等工具\n  - 安装hexo-cli命令行工具：npm install -g hexo-cli\n    - hexo-cli是hexo的命令行工具，用于执行hexo init\n  - Setup Hexo:\n    - 命令行为：hexo init <folder>\n    - 使用hexo的模板生成项目，下面几个文件比较重要：\n      - package.json: Node js用于指定依赖包的配置文件，在不清楚的情况下，不要随意修改。\n      - _config.yml: hexo的配置文件，可以设置网站title、主题、字体、制定域名等。\n      - source: Blog的源文件目录，使用hexo new生成的md文件存放在这个目录中。\n      - scaffolds：模板文件，hexo new使用它来生成新的模板md。\n      - themes：主题目录，设置网站版式。\n- 写Blog：\n  - hexo new post_title：生成新的模板文件。\n  - 注意：这里使用hexo命令和上面的hexo init不是同一个命令，这个hexo是在setup过程中下载的npm包，**需要在Blog这个目录中使用才有效。**\n  - 生成的文件在source/_post目录中，使用markdown编辑器来写博客。\n- 本机调试：\n  - 在写blog的过程中，可以直接在本机进行预览：hexo serve\n  - 默认使用4000端口，还可以[设置其他的端口](https://hexo.io/docs/server.html#Custom-IP)\n- 生成Blog文件：\n  - 生成编译后的blog：hexo generate\n  - 生成后的文件存放在public目录中\n  - 也可以使用下面的命令直接完成发布: hexo generate —deploy\n- 发布blog：\n  - 使用hexo deploy完成发布\n  - 第一次发布之前，需要修改_config.yml文件，参见：[hexo deploy](https://hexo.io/docs/deployment.html#Git)\n- 最后要说下Troubleshooting和需要注意的地方:\n  - hexo new不起作用\n    - 我们需要另外开一个branch来进行blog的写作（如source分支），然后使用hexo deploy到master分支上面。在不同的分支进行切换的时候，由于.gitignore文件不一样，导致我们可能在master分支上面删除了一些source分支上面重要的文件，如node_modules目录，则需要我们在切换到source分支的时候，重新下载npm包：npm i\n  - hexo deploy失败\n    - 需要安装hexo-deployer-git包，参考 [hexo deploy](https://hexo.io/docs/deployment.html#Git)\n  - master分支的使用方法\n    - master分支上面**不要放文件**，这个分支在使用hexo deploy之后自动更新，所以会覆盖我们自己的文件。\n  - 使用source分支来进行写作\n    - 上面提高了不能使用master分支，那么就需要我们使用别的分支来进行hexo的搭建和写作，我个人使用source分支，当然你也可以取一个自己喜欢的名字。","slug":"使用hexo-github-page搭建个人博客","published":1,"updated":"2016-11-12T07:05:51.000Z","_id":"civev3sql0000rifs0w3zqlzp","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。</p>\n<p>首先简单介绍下github page和hexo：</p>\n<ul>\n<li>Github Page: 使用github repo的静态网页工具，可以无缝地与github一起使用，每个github帐号都有400M的免费空间来存放博客文件，具体的使用说明可以参看<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">github page网站</a></li>\n<li>hexo:一个node.js的框架，使用npm进行安装和配置，能够快速的搭建静态博客。主要特点是搭建快速、支持markdown编辑、一键部署、本地预览。</li>\n<li>使用github page+hexo主要是考虑到能够快速搭建、维护方便、技术栈匹配。</li>\n</ul>\n<p>下面来说具体的搭建步骤，这里使用<strong>MAC的开发环境</strong>：</p>\n<ul>\n<li>配置github repo：<ul>\n<li>新建一个username.github.io的仓库，注意一定要使用自己的<strong>github用户名</strong></li>\n<li>设置ssh key：参见<a href=\"https://help.github.com/articles/generating-an-ssh-key/\" target=\"_blank\" rel=\"external\">github ssh教程</a></li>\n<li>这里需要说明的是：github page默认使用的是<strong>master分支</strong>，在master分支中的<strong>index.html</strong>文件会被解析并且作为网页的入口。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>安装Hexo命令行工具hexo-cli<ul>\n<li>参考<a href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"external\">官方教程</a></li>\n<li>安装git、Node.js等工具</li>\n<li>安装hexo-cli命令行工具：npm install -g hexo-cli<ul>\n<li>hexo-cli是hexo的命令行工具，用于执行hexo init</li>\n</ul>\n</li>\n<li>Setup Hexo:<ul>\n<li>命令行为：hexo init <folder></folder></li>\n<li>使用hexo的模板生成项目，下面几个文件比较重要：<ul>\n<li>package.json: Node js用于指定依赖包的配置文件，在不清楚的情况下，不要随意修改。</li>\n<li>_config.yml: hexo的配置文件，可以设置网站title、主题、字体、制定域名等。</li>\n<li>source: Blog的源文件目录，使用hexo new生成的md文件存放在这个目录中。</li>\n<li>scaffolds：模板文件，hexo new使用它来生成新的模板md。</li>\n<li>themes：主题目录，设置网站版式。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>写Blog：<ul>\n<li>hexo new post_title：生成新的模板文件。</li>\n<li>注意：这里使用hexo命令和上面的hexo init不是同一个命令，这个hexo是在setup过程中下载的npm包，<strong>需要在Blog这个目录中使用才有效。</strong></li>\n<li>生成的文件在source/_post目录中，使用markdown编辑器来写博客。</li>\n</ul>\n</li>\n<li>本机调试：<ul>\n<li>在写blog的过程中，可以直接在本机进行预览：hexo serve</li>\n<li>默认使用4000端口，还可以<a href=\"https://hexo.io/docs/server.html#Custom-IP\" target=\"_blank\" rel=\"external\">设置其他的端口</a></li>\n</ul>\n</li>\n<li>生成Blog文件：<ul>\n<li>生成编译后的blog：hexo generate</li>\n<li>生成后的文件存放在public目录中</li>\n<li>也可以使用下面的命令直接完成发布: hexo generate —deploy</li>\n</ul>\n</li>\n<li>发布blog：<ul>\n<li>使用hexo deploy完成发布</li>\n<li>第一次发布之前，需要修改_config.yml文件，参见：<a href=\"https://hexo.io/docs/deployment.html#Git\" target=\"_blank\" rel=\"external\">hexo deploy</a></li>\n</ul>\n</li>\n<li>最后要说下Troubleshooting和需要注意的地方:<ul>\n<li>hexo new不起作用<ul>\n<li>我们需要另外开一个branch来进行blog的写作（如source分支），然后使用hexo deploy到master分支上面。在不同的分支进行切换的时候，由于.gitignore文件不一样，导致我们可能在master分支上面删除了一些source分支上面重要的文件，如node_modules目录，则需要我们在切换到source分支的时候，重新下载npm包：npm i</li>\n</ul>\n</li>\n<li>hexo deploy失败<ul>\n<li>需要安装hexo-deployer-git包，参考 <a href=\"https://hexo.io/docs/deployment.html#Git\" target=\"_blank\" rel=\"external\">hexo deploy</a></li>\n</ul>\n</li>\n<li>master分支的使用方法<ul>\n<li>master分支上面<strong>不要放文件</strong>，这个分支在使用hexo deploy之后自动更新，所以会覆盖我们自己的文件。</li>\n</ul>\n</li>\n<li>使用source分支来进行写作<ul>\n<li>上面提高了不能使用master分支，那么就需要我们使用别的分支来进行hexo的搭建和写作，我个人使用source分支，当然你也可以取一个自己喜欢的名字。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<p>我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。</p>\n<p>首先简单介绍下github page和hexo：</p>\n<ul>\n<li>Github Page: 使用github repo的静态网页工具，可以无缝地与github一起使用，每个github帐号都有400M的免费空间来存放博客文件，具体的使用说明可以参看<a href=\"https://pages.github.com/\">github page网站</a></li>\n<li>hexo:一个node.js的框架，使用npm进行安装和配置，能够快速的搭建静态博客。主要特点是搭建快速、支持markdown编辑、一键部署、本地预览。</li>\n<li>使用github page+hexo主要是考虑到能够快速搭建、维护方便、技术栈匹配。</li>\n</ul>\n<p>下面来说具体的搭建步骤，这里使用<strong>MAC的开发环境</strong>：</p>\n<ul>\n<li>配置github repo：<ul>\n<li>新建一个username.github.io的仓库，注意一定要使用自己的<strong>github用户名</strong></li>\n<li>设置ssh key：参见<a href=\"https://help.github.com/articles/generating-an-ssh-key/\">github ssh教程</a></li>\n<li>这里需要说明的是：github page默认使用的是<strong>master分支</strong>，在master分支中的<strong>index.html</strong>文件会被解析并且作为网页的入口。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>安装Hexo命令行工具hexo-cli<ul>\n<li>参考<a href=\"https://hexo.io/docs/index.html\">官方教程</a></li>\n<li>安装git、Node.js等工具</li>\n<li>安装hexo-cli命令行工具：npm install -g hexo-cli<ul>\n<li>hexo-cli是hexo的命令行工具，用于执行hexo init</li>\n</ul>\n</li>\n<li>Setup Hexo:<ul>\n<li>命令行为：hexo init <folder></li>\n<li>使用hexo的模板生成项目，下面几个文件比较重要：<ul>\n<li>package.json: Node js用于指定依赖包的配置文件，在不清楚的情况下，不要随意修改。</li>\n<li>_config.yml: hexo的配置文件，可以设置网站title、主题、字体、制定域名等。</li>\n<li>source: Blog的源文件目录，使用hexo new生成的md文件存放在这个目录中。</li>\n<li>scaffolds：模板文件，hexo new使用它来生成新的模板md。</li>\n<li>themes：主题目录，设置网站版式。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>写Blog：<ul>\n<li>hexo new post_title：生成新的模板文件。</li>\n<li>注意：这里使用hexo命令和上面的hexo init不是同一个命令，这个hexo是在setup过程中下载的npm包，<strong>需要在Blog这个目录中使用才有效。</strong></li>\n<li>生成的文件在source/_post目录中，使用markdown编辑器来写博客。</li>\n</ul>\n</li>\n<li>本机调试：<ul>\n<li>在写blog的过程中，可以直接在本机进行预览：hexo serve</li>\n<li>默认使用4000端口，还可以<a href=\"https://hexo.io/docs/server.html#Custom-IP\">设置其他的端口</a></li>\n</ul>\n</li>\n<li>生成Blog文件：<ul>\n<li>生成编译后的blog：hexo generate</li>\n<li>生成后的文件存放在public目录中</li>\n<li>也可以使用下面的命令直接完成发布: hexo generate —deploy</li>\n</ul>\n</li>\n<li>发布blog：<ul>\n<li>使用hexo deploy完成发布</li>\n<li>第一次发布之前，需要修改_config.yml文件，参见：<a href=\"https://hexo.io/docs/deployment.html#Git\">hexo deploy</a></li>\n</ul>\n</li>\n<li>最后要说下Troubleshooting和需要注意的地方:<ul>\n<li>hexo new不起作用<ul>\n<li>我们需要另外开一个branch来进行blog的写作（如source分支），然后使用hexo deploy到master分支上面。在不同的分支进行切换的时候，由于.gitignore文件不一样，导致我们可能在master分支上面删除了一些source分支上面重要的文件，如node_modules目录，则需要我们在切换到source分支的时候，重新下载npm包：npm i</li>\n</ul>\n</li>\n<li>hexo deploy失败<ul>\n<li>需要安装hexo-deployer-git包，参考 <a href=\"https://hexo.io/docs/deployment.html#Git\">hexo deploy</a></li>\n</ul>\n</li>\n<li>master分支的使用方法<ul>\n<li>master分支上面<strong>不要放文件</strong>，这个分支在使用hexo deploy之后自动更新，所以会覆盖我们自己的文件。</li>\n</ul>\n</li>\n<li>使用source分支来进行写作<ul>\n<li>上面提高了不能使用master分支，那么就需要我们使用别的分支来进行hexo的搭建和写作，我个人使用source分支，当然你也可以取一个自己喜欢的名字。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"git常用手册","date":"2016-11-11T08:26:14.000Z","_content":"\n主要记录日常开发时遇到的问题和常用的解决方法：\n\n1. No submodule mapping found in .gitmodules for path 'Frameworks/XXX'\n    1. 参考：http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule\n    2. $**git submodule**\n    3. $**git rm 'Frameworks/XXX'**\n2. 检查非法的branch名字\n    1. A branch name can not:\n- Have a path component that begins with \".\"\n- Have a double dot \"..\"\n- Have an ASCII control character, \"~\", \"^\", \":\" or SP, anywhere\n- End with a \"/\" - End with \".lock\"\n- Contain a \"\\\" (backslash\n3. 拉取其他分支代码到当前分支：Git pull rebase\n    1. 当我们需要从别的分支上面拉取代码，并且希望被拉取的commit能够很好地rebase到当前分支,我们就需要用到pull rebase\n    2. 示例：从develop拉取代码到当前分支：\n        * 确保本地分支代码和develop都已经push到origin\n        * git pull --rebase origin develop\n            * 把develop分支代码拉取到当前分支，此时会发现当前分支和develop分支代码并没有rebase,还是在两条不同的线上\n            * 拉取完成后会发现如下的一些提示：\n                * On branch feature/music\n                * Your branch and 'origin/feature/xxx' have diverged,\n                * and have 9 and 6 different commits each, respectively.\n                * (use \"git pull\" to merge the remote branch into yours)\n                * nothing to commit, working directory clean\n        * git push -f\n            * 把本地分支和develop分支强行push到origin\n            * git push 会导致错误，因为使用pull rebase操作会生成两个不同的分支（Your branch and 'origin/feature/music' have diverged）\n4. Git分支管理策略\n     1.推荐阅读 《[Git分支管理策略 - 阮一峰的网络日志](http://www.ruanyifeng.com/blog/2012/07/git.html)》\n    2. git workflow:\n        1. 只需要保留master和develop分支。\n        2. 日常开发时，从develop上面开一个feature分支，完成开发后，按需merge到develop分支中，merge成功后，可以删除feature分支。\n        3. 发布前，使用release分支\n        4. 产品上线后，使用从master分支fork出hotfix分支，完成bug修复后，merge到master和develop分支。\n5. Github pull request\n    1. 《Mort | Pull Request的正确打开方式（如何在GitHub上贡献开源项目）》 -- 原文404，可以参考转载\n6. Github Repo Migration:\n    1. Github fork repo\n    2. Github import repo\n7. Git 修改commit message:\n    1. git commit --amend -m \"New commit message\"\n8. 查找commit message:\n    1. git log --oneline | grep PATTERN\n9. 多个github账号的管理：\n    1. https://gist.github.com/jexchan/2351996\n    2. 本人常年使用公司和个人的Github帐号，在正确配置github帐号后，可以用命令行进行帐号切换。\n10. 清除git缓存：\n    1. 有的时候会出现.gitignore文件不起作用的情况，需要清理git缓存：\n    2. $ git rm --cached -r FOLDER_NAME\n    3. $ git add .\n    4. $ git commit -m “COMMIT_MSG\"","source":"_posts/git常用手册.md","raw":"---\ntitle: git常用手册\ndate: 2016-11-11 16:26:14\ntags:\n---\n\n主要记录日常开发时遇到的问题和常用的解决方法：\n\n1. No submodule mapping found in .gitmodules for path 'Frameworks/XXX'\n    1. 参考：http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule\n    2. $**git submodule**\n    3. $**git rm 'Frameworks/XXX'**\n2. 检查非法的branch名字\n    1. A branch name can not:\n- Have a path component that begins with \".\"\n- Have a double dot \"..\"\n- Have an ASCII control character, \"~\", \"^\", \":\" or SP, anywhere\n- End with a \"/\" - End with \".lock\"\n- Contain a \"\\\" (backslash\n3. 拉取其他分支代码到当前分支：Git pull rebase\n    1. 当我们需要从别的分支上面拉取代码，并且希望被拉取的commit能够很好地rebase到当前分支,我们就需要用到pull rebase\n    2. 示例：从develop拉取代码到当前分支：\n        * 确保本地分支代码和develop都已经push到origin\n        * git pull --rebase origin develop\n            * 把develop分支代码拉取到当前分支，此时会发现当前分支和develop分支代码并没有rebase,还是在两条不同的线上\n            * 拉取完成后会发现如下的一些提示：\n                * On branch feature/music\n                * Your branch and 'origin/feature/xxx' have diverged,\n                * and have 9 and 6 different commits each, respectively.\n                * (use \"git pull\" to merge the remote branch into yours)\n                * nothing to commit, working directory clean\n        * git push -f\n            * 把本地分支和develop分支强行push到origin\n            * git push 会导致错误，因为使用pull rebase操作会生成两个不同的分支（Your branch and 'origin/feature/music' have diverged）\n4. Git分支管理策略\n     1.推荐阅读 《[Git分支管理策略 - 阮一峰的网络日志](http://www.ruanyifeng.com/blog/2012/07/git.html)》\n    2. git workflow:\n        1. 只需要保留master和develop分支。\n        2. 日常开发时，从develop上面开一个feature分支，完成开发后，按需merge到develop分支中，merge成功后，可以删除feature分支。\n        3. 发布前，使用release分支\n        4. 产品上线后，使用从master分支fork出hotfix分支，完成bug修复后，merge到master和develop分支。\n5. Github pull request\n    1. 《Mort | Pull Request的正确打开方式（如何在GitHub上贡献开源项目）》 -- 原文404，可以参考转载\n6. Github Repo Migration:\n    1. Github fork repo\n    2. Github import repo\n7. Git 修改commit message:\n    1. git commit --amend -m \"New commit message\"\n8. 查找commit message:\n    1. git log --oneline | grep PATTERN\n9. 多个github账号的管理：\n    1. https://gist.github.com/jexchan/2351996\n    2. 本人常年使用公司和个人的Github帐号，在正确配置github帐号后，可以用命令行进行帐号切换。\n10. 清除git缓存：\n    1. 有的时候会出现.gitignore文件不起作用的情况，需要清理git缓存：\n    2. $ git rm --cached -r FOLDER_NAME\n    3. $ git add .\n    4. $ git commit -m “COMMIT_MSG\"","slug":"git常用手册","published":1,"updated":"2016-11-11T09:28:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civev3sqr0001rifshk1xvolk","content":"<p>主要记录日常开发时遇到的问题和常用的解决方法：</p>\n<ol>\n<li>No submodule mapping found in .gitmodules for path ‘Frameworks/XXX’<ol>\n<li>参考：<a href=\"http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule</a></li>\n<li>$<strong>git submodule</strong></li>\n<li>$<strong>git rm ‘Frameworks/XXX’</strong></li>\n</ol>\n</li>\n<li>检查非法的branch名字<ol>\n<li>A branch name can not:</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>Have a path component that begins with “.”</li>\n<li>Have a double dot “..”</li>\n<li>Have an ASCII control character, “~”, “^”, “:” or SP, anywhere</li>\n<li>End with a “/“ - End with “.lock”</li>\n<li>Contain a “\\” (backslash</li>\n</ul>\n<ol>\n<li>拉取其他分支代码到当前分支：Git pull rebase<ol>\n<li>当我们需要从别的分支上面拉取代码，并且希望被拉取的commit能够很好地rebase到当前分支,我们就需要用到pull rebase</li>\n<li>示例：从develop拉取代码到当前分支：<ul>\n<li>确保本地分支代码和develop都已经push到origin</li>\n<li>git pull –rebase origin develop<ul>\n<li>把develop分支代码拉取到当前分支，此时会发现当前分支和develop分支代码并没有rebase,还是在两条不同的线上</li>\n<li>拉取完成后会发现如下的一些提示：<ul>\n<li>On branch feature/music</li>\n<li>Your branch and ‘origin/feature/xxx’ have diverged,</li>\n<li>and have 9 and 6 different commits each, respectively.</li>\n<li>(use “git pull” to merge the remote branch into yours)</li>\n<li>nothing to commit, working directory clean</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>git push -f<ul>\n<li>把本地分支和develop分支强行push到origin</li>\n<li>git push 会导致错误，因为使用pull rebase操作会生成两个不同的分支（Your branch and ‘origin/feature/music’ have diverged）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Git分支管理策略<br>  1.推荐阅读 《<a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\" target=\"_blank\" rel=\"external\">Git分支管理策略 - 阮一峰的网络日志</a>》<ol>\n<li>git workflow:<ol>\n<li>只需要保留master和develop分支。</li>\n<li>日常开发时，从develop上面开一个feature分支，完成开发后，按需merge到develop分支中，merge成功后，可以删除feature分支。</li>\n<li>发布前，使用release分支</li>\n<li>产品上线后，使用从master分支fork出hotfix分支，完成bug修复后，merge到master和develop分支。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Github pull request<ol>\n<li>《Mort | Pull Request的正确打开方式（如何在GitHub上贡献开源项目）》 – 原文404，可以参考转载</li>\n</ol>\n</li>\n<li>Github Repo Migration:<ol>\n<li>Github fork repo</li>\n<li>Github import repo</li>\n</ol>\n</li>\n<li>Git 修改commit message:<ol>\n<li>git commit –amend -m “New commit message”</li>\n</ol>\n</li>\n<li>查找commit message:<ol>\n<li>git log –oneline | grep PATTERN</li>\n</ol>\n</li>\n<li>多个github账号的管理：<ol>\n<li><a href=\"https://gist.github.com/jexchan/2351996\" target=\"_blank\" rel=\"external\">https://gist.github.com/jexchan/2351996</a></li>\n<li>本人常年使用公司和个人的Github帐号，在正确配置github帐号后，可以用命令行进行帐号切换。</li>\n</ol>\n</li>\n<li>清除git缓存：<ol>\n<li>有的时候会出现.gitignore文件不起作用的情况，需要清理git缓存：</li>\n<li>$ git rm –cached -r FOLDER_NAME</li>\n<li>$ git add .</li>\n<li>$ git commit -m “COMMIT_MSG”</li>\n</ol>\n</li>\n</ol>\n","excerpt":"","more":"<p>主要记录日常开发时遇到的问题和常用的解决方法：</p>\n<ol>\n<li>No submodule mapping found in .gitmodules for path ‘Frameworks/XXX’<ol>\n<li>参考：<a href=\"http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule\">http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule</a></li>\n<li>$<strong>git submodule</strong></li>\n<li>$<strong>git rm ‘Frameworks/XXX’</strong></li>\n</ol>\n</li>\n<li>检查非法的branch名字<ol>\n<li>A branch name can not:</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>Have a path component that begins with “.”</li>\n<li>Have a double dot “..”</li>\n<li>Have an ASCII control character, “~”, “^”, “:” or SP, anywhere</li>\n<li>End with a “/“ - End with “.lock”</li>\n<li>Contain a “\\” (backslash</li>\n</ul>\n<ol>\n<li>拉取其他分支代码到当前分支：Git pull rebase<ol>\n<li>当我们需要从别的分支上面拉取代码，并且希望被拉取的commit能够很好地rebase到当前分支,我们就需要用到pull rebase</li>\n<li>示例：从develop拉取代码到当前分支：<ul>\n<li>确保本地分支代码和develop都已经push到origin</li>\n<li>git pull –rebase origin develop<ul>\n<li>把develop分支代码拉取到当前分支，此时会发现当前分支和develop分支代码并没有rebase,还是在两条不同的线上</li>\n<li>拉取完成后会发现如下的一些提示：<ul>\n<li>On branch feature/music</li>\n<li>Your branch and ‘origin/feature/xxx’ have diverged,</li>\n<li>and have 9 and 6 different commits each, respectively.</li>\n<li>(use “git pull” to merge the remote branch into yours)</li>\n<li>nothing to commit, working directory clean</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>git push -f<ul>\n<li>把本地分支和develop分支强行push到origin</li>\n<li>git push 会导致错误，因为使用pull rebase操作会生成两个不同的分支（Your branch and ‘origin/feature/music’ have diverged）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Git分支管理策略<br>  1.推荐阅读 《<a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\">Git分支管理策略 - 阮一峰的网络日志</a>》<ol>\n<li>git workflow:<ol>\n<li>只需要保留master和develop分支。</li>\n<li>日常开发时，从develop上面开一个feature分支，完成开发后，按需merge到develop分支中，merge成功后，可以删除feature分支。</li>\n<li>发布前，使用release分支</li>\n<li>产品上线后，使用从master分支fork出hotfix分支，完成bug修复后，merge到master和develop分支。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Github pull request<ol>\n<li>《Mort | Pull Request的正确打开方式（如何在GitHub上贡献开源项目）》 – 原文404，可以参考转载</li>\n</ol>\n</li>\n<li>Github Repo Migration:<ol>\n<li>Github fork repo</li>\n<li>Github import repo</li>\n</ol>\n</li>\n<li>Git 修改commit message:<ol>\n<li>git commit –amend -m “New commit message”</li>\n</ol>\n</li>\n<li>查找commit message:<ol>\n<li>git log –oneline | grep PATTERN</li>\n</ol>\n</li>\n<li>多个github账号的管理：<ol>\n<li><a href=\"https://gist.github.com/jexchan/2351996\">https://gist.github.com/jexchan/2351996</a></li>\n<li>本人常年使用公司和个人的Github帐号，在正确配置github帐号后，可以用命令行进行帐号切换。</li>\n</ol>\n</li>\n<li>清除git缓存：<ol>\n<li>有的时候会出现.gitignore文件不起作用的情况，需要清理git缓存：</li>\n<li>$ git rm –cached -r FOLDER_NAME</li>\n<li>$ git add .</li>\n<li>$ git commit -m “COMMIT_MSG”</li>\n</ol>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}