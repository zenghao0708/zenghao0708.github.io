{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"source/images/avatar.JPG","path":"images/avatar.JPG","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1479139920000},{"_id":"source/.DS_Store","hash":"d19562d1316280c440080390bf432c494508c6f4","modified":1479281756000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1479139920000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1479139920000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1479139920000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1479139920000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1479139920000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1479139920000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1479139920000},{"_id":"themes/next/_config.yml","hash":"bb28c4b780a08a513a353388c3da0b7cccb6f50b","modified":1479281303000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1479139920000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1479139920000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1479139920000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1478934387000},{"_id":"source/_posts/git常用手册.md","hash":"46061ffe14faac9233ccf6202839f9a05ea9fdfb","modified":1478934777000},{"_id":"source/_posts/iOS多线程开发笔记.md","hash":"d4b0ab34ea6c50ad80561664d6b9386fa5d08714","modified":1479221001000},{"_id":"source/_posts/使用hexo-github-page搭建个人博客.md","hash":"ccbd38ddb9cb079444954fe45067fac6d49aeac9","modified":1478934777000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1479139920000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1479139920000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1479139920000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1479139920000},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1479139920000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1479139920000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1479139920000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1479139920000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1479139920000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1479139920000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1479139920000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1479139920000},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1479139920000},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1479139920000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1479139920000},{"_id":"themes/next/layout/_layout.swig","hash":"7a1e4443c3ba1e08c20e64ddbf0b8255d034dab0","modified":1479139920000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1479139920000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1479139920000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1479139920000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1479139920000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1479139920000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1479139920000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1479139920000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1479139920000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1479139920000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1479139920000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1479139920000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479139920000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1479139920000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1479139920000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1479139920000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1479139920000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f12f108c1f8e91cc55d49805d42c1fd96cdf51a6","modified":1479139920000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b8aaa008aafe4c6e325f7513719e1c251430883e","modified":1479139920000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1479139920000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a3ef28678467c45ee9416b41b943252e8036285","modified":1479139920000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1479139920000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1a43dde8c7bc53891be26b915a172b1f01e6bc26","modified":1479139920000},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1479139920000},{"_id":"themes/next/layout/_partials/header.swig","hash":"f3627f51810bc906e4020a3fef61bc3629b63581","modified":1479139920000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1479139920000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1479139920000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1479139920000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1479139920000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1479139920000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1479139920000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1479139920000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1479139920000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1479139920000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1479139920000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1479139920000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1479139920000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1479139920000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1479139920000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1479139920000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1479139920000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1479139920000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1479139920000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1479139920000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1479139920000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479139920000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479139920000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1479139920000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1479139920000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1479139920000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1479139920000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479139920000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479139920000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479139920000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479139920000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479139920000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479139920000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479139920000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1479139920000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1479139920000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1479139920000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1479139920000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1479139920000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1479139920000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1479139920000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1479139920000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1479139920000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1479139920000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1479139920000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1479139920000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"82a2ac14d4200480a36bf10abcc3cc554ad744d6","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1479139920000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1479139920000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1479139920000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1479139920000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1479139920000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c5b28519b446c2af1e8754a6ae4d766823e6b348","modified":1479139920000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3f0d6aa424f434e82ea507f740eeff110f996269","modified":1479139920000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1479139920000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1479139920000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1479139920000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1479139920000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1479139920000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1479139920000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1479139920000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1479139920000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1479139920000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1479139920000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1479139920000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1479139920000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1479139920000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1479139920000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1479139920000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1479139920000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1479139920000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1479139920000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1479139920000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1479139920000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1479139920000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1479139920000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1479139920000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1479139920000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1479139920000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1479139920000},{"_id":"source/images/avatar.JPG","hash":"c9eee5ba90690376767a38d8d7586aa392bee2a0","modified":1473637890000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1479139920000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1479139920000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1479139920000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1479139920000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1479139920000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1479139920000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"7b206cd8921bc042f8e37a74aea1abc8a5ec8ab4","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1479139920000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1479139920000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1479139920000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1479139920000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1479139920000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1479139920000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"5357db10656b260f8b332c67bb06e486bc64a4ad","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"5433b6bc9d8f0c4685e760b326445ac51245b0a8","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1479139920000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1479139920000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"git常用手册","date":"2016-11-11T08:26:14.000Z","_content":"\n主要记录日常开发时遇到的问题和常用的解决方法：\n\n1. No submodule mapping found in .gitmodules for path 'Frameworks/XXX'\n    1. 参考：http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule\n    2. $**git submodule**\n    3. $**git rm 'Frameworks/XXX'**\n2. 检查非法的branch名字\n    1. A branch name can not:\n- Have a path component that begins with \".\"\n- Have a double dot \"..\"\n- Have an ASCII control character, \"~\", \"^\", \":\" or SP, anywhere\n- End with a \"/\" - End with \".lock\"\n- Contain a \"\\\" (backslash\n3. 拉取其他分支代码到当前分支：Git pull rebase\n    1. 当我们需要从别的分支上面拉取代码，并且希望被拉取的commit能够很好地rebase到当前分支,我们就需要用到pull rebase\n    2. 示例：从develop拉取代码到当前分支：\n        * 确保本地分支代码和develop都已经push到origin\n        * git pull --rebase origin develop\n            * 把develop分支代码拉取到当前分支，此时会发现当前分支和develop分支代码并没有rebase,还是在两条不同的线上\n            * 拉取完成后会发现如下的一些提示：\n                * On branch feature/music\n                * Your branch and 'origin/feature/xxx' have diverged,\n                * and have 9 and 6 different commits each, respectively.\n                * (use \"git pull\" to merge the remote branch into yours)\n                * nothing to commit, working directory clean\n        * git push -f\n            * 把本地分支和develop分支强行push到origin\n            * git push 会导致错误，因为使用pull rebase操作会生成两个不同的分支（Your branch and 'origin/feature/music' have diverged）\n4. Git分支管理策略\n     1.推荐阅读 《[Git分支管理策略 - 阮一峰的网络日志](http://www.ruanyifeng.com/blog/2012/07/git.html)》\n    2. git workflow:\n        1. 只需要保留master和develop分支。\n        2. 日常开发时，从develop上面开一个feature分支，完成开发后，按需merge到develop分支中，merge成功后，可以删除feature分支。\n        3. 发布前，使用release分支\n        4. 产品上线后，使用从master分支fork出hotfix分支，完成bug修复后，merge到master和develop分支。\n5. Github pull request\n    1. 《Mort | Pull Request的正确打开方式（如何在GitHub上贡献开源项目）》 -- 原文404，可以参考转载\n6. Github Repo Migration:\n    1. Github fork repo\n    2. Github import repo\n7. Git 修改commit message:\n    1. git commit --amend -m \"New commit message\"\n8. 查找commit message:\n    1. git log --oneline | grep PATTERN\n9. 多个github账号的管理：\n    1. https://gist.github.com/jexchan/2351996\n    2. 本人常年使用公司和个人的Github帐号，在正确配置github帐号后，可以用命令行进行帐号切换。\n10. 清除git缓存：\n    1. 有的时候会出现.gitignore文件不起作用的情况，需要清理git缓存：\n    2. $ git rm --cached -r FOLDER_NAME\n    3. $ git add .\n    4. $ git commit -m “COMMIT_MSG\"","source":"_posts/git常用手册.md","raw":"---\ntitle: git常用手册\ndate: 2016-11-11 16:26:14\ntags:\n---\n\n主要记录日常开发时遇到的问题和常用的解决方法：\n\n1. No submodule mapping found in .gitmodules for path 'Frameworks/XXX'\n    1. 参考：http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule\n    2. $**git submodule**\n    3. $**git rm 'Frameworks/XXX'**\n2. 检查非法的branch名字\n    1. A branch name can not:\n- Have a path component that begins with \".\"\n- Have a double dot \"..\"\n- Have an ASCII control character, \"~\", \"^\", \":\" or SP, anywhere\n- End with a \"/\" - End with \".lock\"\n- Contain a \"\\\" (backslash\n3. 拉取其他分支代码到当前分支：Git pull rebase\n    1. 当我们需要从别的分支上面拉取代码，并且希望被拉取的commit能够很好地rebase到当前分支,我们就需要用到pull rebase\n    2. 示例：从develop拉取代码到当前分支：\n        * 确保本地分支代码和develop都已经push到origin\n        * git pull --rebase origin develop\n            * 把develop分支代码拉取到当前分支，此时会发现当前分支和develop分支代码并没有rebase,还是在两条不同的线上\n            * 拉取完成后会发现如下的一些提示：\n                * On branch feature/music\n                * Your branch and 'origin/feature/xxx' have diverged,\n                * and have 9 and 6 different commits each, respectively.\n                * (use \"git pull\" to merge the remote branch into yours)\n                * nothing to commit, working directory clean\n        * git push -f\n            * 把本地分支和develop分支强行push到origin\n            * git push 会导致错误，因为使用pull rebase操作会生成两个不同的分支（Your branch and 'origin/feature/music' have diverged）\n4. Git分支管理策略\n     1.推荐阅读 《[Git分支管理策略 - 阮一峰的网络日志](http://www.ruanyifeng.com/blog/2012/07/git.html)》\n    2. git workflow:\n        1. 只需要保留master和develop分支。\n        2. 日常开发时，从develop上面开一个feature分支，完成开发后，按需merge到develop分支中，merge成功后，可以删除feature分支。\n        3. 发布前，使用release分支\n        4. 产品上线后，使用从master分支fork出hotfix分支，完成bug修复后，merge到master和develop分支。\n5. Github pull request\n    1. 《Mort | Pull Request的正确打开方式（如何在GitHub上贡献开源项目）》 -- 原文404，可以参考转载\n6. Github Repo Migration:\n    1. Github fork repo\n    2. Github import repo\n7. Git 修改commit message:\n    1. git commit --amend -m \"New commit message\"\n8. 查找commit message:\n    1. git log --oneline | grep PATTERN\n9. 多个github账号的管理：\n    1. https://gist.github.com/jexchan/2351996\n    2. 本人常年使用公司和个人的Github帐号，在正确配置github帐号后，可以用命令行进行帐号切换。\n10. 清除git缓存：\n    1. 有的时候会出现.gitignore文件不起作用的情况，需要清理git缓存：\n    2. $ git rm --cached -r FOLDER_NAME\n    3. $ git add .\n    4. $ git commit -m “COMMIT_MSG\"","slug":"git常用手册","published":1,"updated":"2016-11-12T07:12:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civkma7uj0000s1o6pkj118j6","content":"<p>主要记录日常开发时遇到的问题和常用的解决方法：</p>\n<ol>\n<li>No submodule mapping found in .gitmodules for path ‘Frameworks/XXX’<ol>\n<li>参考：<a href=\"http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule</a></li>\n<li>$<strong>git submodule</strong></li>\n<li>$<strong>git rm ‘Frameworks/XXX’</strong></li>\n</ol>\n</li>\n<li>检查非法的branch名字<ol>\n<li>A branch name can not:</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>Have a path component that begins with “.”</li>\n<li>Have a double dot “..”</li>\n<li>Have an ASCII control character, “~”, “^”, “:” or SP, anywhere</li>\n<li>End with a “/“ - End with “.lock”</li>\n<li>Contain a “\\” (backslash</li>\n</ul>\n<ol>\n<li>拉取其他分支代码到当前分支：Git pull rebase<ol>\n<li>当我们需要从别的分支上面拉取代码，并且希望被拉取的commit能够很好地rebase到当前分支,我们就需要用到pull rebase</li>\n<li>示例：从develop拉取代码到当前分支：<ul>\n<li>确保本地分支代码和develop都已经push到origin</li>\n<li>git pull –rebase origin develop<ul>\n<li>把develop分支代码拉取到当前分支，此时会发现当前分支和develop分支代码并没有rebase,还是在两条不同的线上</li>\n<li>拉取完成后会发现如下的一些提示：<ul>\n<li>On branch feature/music</li>\n<li>Your branch and ‘origin/feature/xxx’ have diverged,</li>\n<li>and have 9 and 6 different commits each, respectively.</li>\n<li>(use “git pull” to merge the remote branch into yours)</li>\n<li>nothing to commit, working directory clean</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>git push -f<ul>\n<li>把本地分支和develop分支强行push到origin</li>\n<li>git push 会导致错误，因为使用pull rebase操作会生成两个不同的分支（Your branch and ‘origin/feature/music’ have diverged）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Git分支管理策略<br>  1.推荐阅读 《<a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\" target=\"_blank\" rel=\"external\">Git分支管理策略 - 阮一峰的网络日志</a>》<ol>\n<li>git workflow:<ol>\n<li>只需要保留master和develop分支。</li>\n<li>日常开发时，从develop上面开一个feature分支，完成开发后，按需merge到develop分支中，merge成功后，可以删除feature分支。</li>\n<li>发布前，使用release分支</li>\n<li>产品上线后，使用从master分支fork出hotfix分支，完成bug修复后，merge到master和develop分支。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Github pull request<ol>\n<li>《Mort | Pull Request的正确打开方式（如何在GitHub上贡献开源项目）》 – 原文404，可以参考转载</li>\n</ol>\n</li>\n<li>Github Repo Migration:<ol>\n<li>Github fork repo</li>\n<li>Github import repo</li>\n</ol>\n</li>\n<li>Git 修改commit message:<ol>\n<li>git commit –amend -m “New commit message”</li>\n</ol>\n</li>\n<li>查找commit message:<ol>\n<li>git log –oneline | grep PATTERN</li>\n</ol>\n</li>\n<li>多个github账号的管理：<ol>\n<li><a href=\"https://gist.github.com/jexchan/2351996\" target=\"_blank\" rel=\"external\">https://gist.github.com/jexchan/2351996</a></li>\n<li>本人常年使用公司和个人的Github帐号，在正确配置github帐号后，可以用命令行进行帐号切换。</li>\n</ol>\n</li>\n<li>清除git缓存：<ol>\n<li>有的时候会出现.gitignore文件不起作用的情况，需要清理git缓存：</li>\n<li>$ git rm –cached -r FOLDER_NAME</li>\n<li>$ git add .</li>\n<li>$ git commit -m “COMMIT_MSG”</li>\n</ol>\n</li>\n</ol>\n","excerpt":"","more":"<p>主要记录日常开发时遇到的问题和常用的解决方法：</p>\n<ol>\n<li>No submodule mapping found in .gitmodules for path ‘Frameworks/XXX’<ol>\n<li>参考：<a href=\"http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule\">http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule</a></li>\n<li>$<strong>git submodule</strong></li>\n<li>$<strong>git rm ‘Frameworks/XXX’</strong></li>\n</ol>\n</li>\n<li>检查非法的branch名字<ol>\n<li>A branch name can not:</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>Have a path component that begins with “.”</li>\n<li>Have a double dot “..”</li>\n<li>Have an ASCII control character, “~”, “^”, “:” or SP, anywhere</li>\n<li>End with a “/“ - End with “.lock”</li>\n<li>Contain a “\\” (backslash</li>\n</ul>\n<ol>\n<li>拉取其他分支代码到当前分支：Git pull rebase<ol>\n<li>当我们需要从别的分支上面拉取代码，并且希望被拉取的commit能够很好地rebase到当前分支,我们就需要用到pull rebase</li>\n<li>示例：从develop拉取代码到当前分支：<ul>\n<li>确保本地分支代码和develop都已经push到origin</li>\n<li>git pull –rebase origin develop<ul>\n<li>把develop分支代码拉取到当前分支，此时会发现当前分支和develop分支代码并没有rebase,还是在两条不同的线上</li>\n<li>拉取完成后会发现如下的一些提示：<ul>\n<li>On branch feature/music</li>\n<li>Your branch and ‘origin/feature/xxx’ have diverged,</li>\n<li>and have 9 and 6 different commits each, respectively.</li>\n<li>(use “git pull” to merge the remote branch into yours)</li>\n<li>nothing to commit, working directory clean</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>git push -f<ul>\n<li>把本地分支和develop分支强行push到origin</li>\n<li>git push 会导致错误，因为使用pull rebase操作会生成两个不同的分支（Your branch and ‘origin/feature/music’ have diverged）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Git分支管理策略<br>  1.推荐阅读 《<a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\">Git分支管理策略 - 阮一峰的网络日志</a>》<ol>\n<li>git workflow:<ol>\n<li>只需要保留master和develop分支。</li>\n<li>日常开发时，从develop上面开一个feature分支，完成开发后，按需merge到develop分支中，merge成功后，可以删除feature分支。</li>\n<li>发布前，使用release分支</li>\n<li>产品上线后，使用从master分支fork出hotfix分支，完成bug修复后，merge到master和develop分支。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Github pull request<ol>\n<li>《Mort | Pull Request的正确打开方式（如何在GitHub上贡献开源项目）》 – 原文404，可以参考转载</li>\n</ol>\n</li>\n<li>Github Repo Migration:<ol>\n<li>Github fork repo</li>\n<li>Github import repo</li>\n</ol>\n</li>\n<li>Git 修改commit message:<ol>\n<li>git commit –amend -m “New commit message”</li>\n</ol>\n</li>\n<li>查找commit message:<ol>\n<li>git log –oneline | grep PATTERN</li>\n</ol>\n</li>\n<li>多个github账号的管理：<ol>\n<li><a href=\"https://gist.github.com/jexchan/2351996\">https://gist.github.com/jexchan/2351996</a></li>\n<li>本人常年使用公司和个人的Github帐号，在正确配置github帐号后，可以用命令行进行帐号切换。</li>\n</ol>\n</li>\n<li>清除git缓存：<ol>\n<li>有的时候会出现.gitignore文件不起作用的情况，需要清理git缓存：</li>\n<li>$ git rm –cached -r FOLDER_NAME</li>\n<li>$ git add .</li>\n<li>$ git commit -m “COMMIT_MSG”</li>\n</ol>\n</li>\n</ol>\n"},{"title":"iOS多线程开发笔记","date":"2016-11-15T13:51:37.000Z","_content":"\n[TOC]\n\n## GCD、NSOperation和多线程编程推荐阅读\n\n**五星：**\n\n1. [iOS 并发编程之 Operation Queues](http://blog.leichunfeng.com/blog/2015/07/29/ios-concurrency-programming-operation-queues/)\n2. [GCD 深入理解：第一部分](https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md#gcd-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86)\n3. [iOS并发编程对比总结,NSThread,NSOperation,GCD - iOS](http://blog.csdn.net/zyq522376829/article/details/52373154) \n\n**四星：**\n\n1. [NSOperation in NShipster](http://nshipster.cn/nsoperation/) \n2. [深入浅出 Cocoa 多线程编程之 block 与 dispatch quene](http://www.cppblog.com/kesalin/archive/2011/08/26/154411.aspx)\n3. [GCD使用经验与技巧浅谈](http://tutuge.me/2015/04/03/something-about-gcd/)\n\n## 多线程编程概念\n\n### 基本概念、术语：\n\n1. 进程（Precess）：进程是操作系统管理和分配资源的最小单位，每个进程都有自己的内存空间、系统资源，至少有一个主线程和多个辅助线程。在iOS中，每个App运行的时候，都有对应的进程。\n2. 线程（Thread）：线程则是操作系统具体的执行单元，代码的执行是在线程来完成的。在iOS中，线程的底层实现是基于POSIX thread API的，也就是我们常说的pthread。\n3. 任务（Task）：任务是我们抽象出来的需要执行的工作，一般指代一段代码。\n4. 同步 vs 异步\n   1. 同步是指函数的调用会阻塞当前的线程，必须等待函数返回才能继续执行接下来的代码。\n   2. 异步函数的调用则不会阻塞当前线程，函数调用之后立刻返回，一般通过回调函数来处理函数的执行结果。\n   3. 异步函数能够有效的完成一些耗时的任务，而不必影响代码的执行流，能够提高代码的处理效率。\n5. 串行 vs 并发\n   1. 串行指的是在同一个时间只能有一个任务在执行。\n   2. 并发指的是在同一个时间可以有多个任务一起执行。\n   3. 并发一般用于多核编程，通过高效的利用多核的优势，把不同的任务分配到各个执行单元来提高效率。\n6. Dispatch Queue vs Operation Queue\n   1. GCD和NSOperation/NSOperationQueue是iOS上面来处理多线程开发的工具，对应的概念分别是Dispatch Queue和Operation Queue。\n\n### iOS并发编程模型\n\n1. 在其他的操作系统中，我们往往需要手动创建线程、管理线程的生命周期，在不需要的时候负责销毁线程和线程使用的资源，更加痛苦的是需要使用线程锁、信号量、代码临界区等手段完成线程的同步工作，这些操作往往容易出错而且繁杂。\n2. iOS通过抽象出队列的概念，让开发者更加关注于任务的安排和调度，而从线程的管理工作中解脱出来。在很多时候，iOS把一些繁杂且容易出错的工作（ARC代替MRC）抽离到底层中，能够让开发者把注意力更多地放到真正的任务上，这也是iOS能够吸引广大开发者的原因之一吧。\n\n## NSThread vs GCD vs NSOperation，它们到底是什么？ \n\n### 三种解决方案\n\n1. NSThread：一个封装pthread API的线程对象，需要进行线程创建、销毁和处理线程同步，是最接近系统底层的解决方案。\n2. GCD：苹果基于C语言开发的，一个用于多核编程的解决方案，是一个轻量级的、以FIFO的顺序来执行并发任务的库。\n3. NSOperation：建立在GCD的基础上，面向对象的解决方案，比GCD更加灵活，也更加强大。\n\n#### 它们具体是什么？\n\n1. NSThread: Cocoa对于pthread API的封装，提供了一套面向对象的接口，需要开发者自行管理线程的生命周期、处理线程同步。大多是的时候，我们是不需要直接使用这些底层的对象，而是使用GCD或者NSOperation等更加高级的接口。\n2. 关于Operation对象\n   1. NSOperation对象本身是一个抽象类，不能直接使用。要么使用系统预定义的两个子类NSInvocationOperation和NSBlockOperation或者定义它的子类。\n   2. NSInvocationOperation:可以使用**object**和**selector**来创建一个NSInvocationOperation，非常的方便和灵活。当代码中已经有相关的处理逻辑方法时，建议直接使用NSInvocationOperation来进行替代。\n   3. NSBlockOperation：可以使用NSBlockOperation来并发的执行一个或者多个block，只有当所有的block都执行完毕，NSBlockOperation才算执行完成，有点像dispatch_group的概念。\n   4. 所有的Operation都有下面的特性：\n      1. 支持在 operation 之间建立依赖关系，只有当一个 operation 所依赖的所有 operation 都执行完成时，这个 operation 才能开始执行；\n      2. 支持一个可选的 completion block ，这个 block 将会在 operation 的主任务执行完成时被调用，在任务被取消的时候也会执行；\n      3. 支持通过 KVO 来观察 operation 执行状态的变化，Operation正是通过KVO通知来实现依赖运行，所以我们需要在自定义的子类中的处理好KVO的属性；\n      4. 支持设置执行的优先级，从而影响 operation 之间的相对执行顺序；\n      5. 支持取消操作，可以允许我们停止正在执行的 operation 。\n3. GCD队列：\n   1. 以FIFO顺序执行任务的队列调度系统，先入队列的任务一定先执行。\n   2. 两种类型的队列：\n      1. 串行队列（Serial Queue）:同一时间内只能有一个任务正在被执行。\n      2. 并发队列（Concurrent Queue）:同一时间内可以有多个任务同时被执行。\n      3. iOS默认提供5个队列：\n         1. 主队列（Main Queue）：应用程序主线程应用的队列，用于更新UI，属于串行队列。\n         2. 四个全局队列：\n            1. 按照队列优先级排序，分别是：High、Default、Low、Background。\n            2. 这四个全局队列是由系统提供的，在所有的App中共享，当然也包含了Apple的应用。\n         3. 并发队列中任务的执行顺序：\n            1. 由于队列的并发数是有系统根据当前的资源动态管理的，我们不知道也不能够设置队列中任务执行的时机和所需时长。\n            2. 只有当位于队列前面的任务执行完毕、出队列后，才会执行后面的任务，但是当前并发执行的任务数量我们不得而知。\n   3. 自定义队列：\n      1. 我们可以自定义串行或者并发队列来完成任务的执行和调度。\n\n\n\n### 各自的优势和劣势\n\n1. 优势：\n   1. NSThread：\n      1. 能够执行实时任务。其他两者都是由系统管理的队列，不能保证实时性。\n   2. GCD：\n      1. 可以非常简洁的完成简单异步任务的调用，如在主线程更新UI，延迟执行。\n      2. 只需要把任务分发到队列之后，不需要管理任务的调度情况。\n   3. NSOperation：\n      1. 给任务添加依赖\n      2. 取消或者暂停一个正在执行的任务\n      3. 有一个可选的completionBlock\n      4. 可以通过KVO来查看任务的执行情况\n      5. 可以给任务设置优先级，从而影响任务的执行顺序\n2. 短板：\n   1. NSThread：需要进行线程的创建、销毁，以及处理线程同步的问题，过于繁杂，而且容易出错。\n   2. GCD:\n      1. 对于任务的管理不够：如不能取消任务、设置依赖和优先级等。\n   3. NSOperation:\n      1. 相比于GCD，会增加系统的额外开销。\n\n## 多线程代码中，需要注意哪些问题？\n\n1. 有了GCD来调度block，我们为什么还需要NSBlockOperation?\n   1. 现有代码已经在使用OperationQueue，而我们不想使用Dispatch Queue的时候，NSBlockOperation提供了一个面向对象的封装。\n   2. 当我们需要dispatch queue不能提供的功能时，如KVO观察Operation状态变化、设置operation之间依赖等。\n2. NSInvocationOperation的灵活性是什么意思？\n   1. 我们可以通过上下文来改变selector和object对象。\n3. 如何定义一个非并发的operation？\n   1. 对于非并发的operation，我们只需要实现main方法和能够正常响应取消事件。\n   2. 其他复杂的工作如KVO通知、依赖设置等工作NSOperation类的start方法已经帮我们提供了默认实现。\n   3. 简单实现：\n      1. 提供一个自定义的初始化方法\n      2. 重写main方法\n4. 如何实现一个并发的operation？\n   1. 一般我们不需要实现并发的operation，当operation和operation queue一起使用的时候，Operation Queue会为非并发的operation创建单独的线程。\n   2. 默认情况下，operation是同步执行的，也就是我们直接使用start方法的时候，它是在调用者的线程中执行的。\n   3. Operation的isConcurrent属性表明一个operation是否支持并发。\n   4. 配置并发的Operation：只有当我们需要手动执行operation，并且希望支持并发执行，需要重写下面的方法。\n      1. start：必须，配置任务执行的线程和其他资源，但是一定**不能调用父类的实现**。\n      2. main：可选，一般用来执行具体的任务，而start方法更多是用来配置初始环境，当然也可以用来执行具体的任务。\n      3. isExecuting和isFinished：必须，并发的Operation需要自己来配置环境，同时还需要向外界来传递状态的变化，而isExecuting和isFinished这两个状态的变化需要使用KVO来通知外部。\n      4. isConcurrent：必须，用来标识一个Operation是否支持并发。\n5. 如何完成自定义operation的cancel操作？\n   1. 在下面这几个关键点的检查isCancelled属性\n      1. 在真正开始执行operaiton之前\n      2. 至少在一次循环之中需要检查一次，如果单次循环耗时较长，则需要更加频繁的检查\n      3. 在任何相对比较容易终止Operation的地方\n   2. 需要注意的是虽然Operation支持取消操作，但是并不是立刻就可以被终止的，而是在下一个isCancelled的检查点。\n   3. 在我们自定义Operation子类的时候，即使operation是被cancel了，我们仍然需要设置isFinished方法为true，因为在设置operation依赖的时候，它们的operation就是通过KVO来观察isFinished方法来判断时候可以执行的，如果在cancel的时候，没有设置isFinished方法，那么其他的operation将永远不会执行。\n6. 如何定制Operation对象的执行行为：\n   1. 在Operation添加到Operation Queue之前，我们可以配置Operation的一些行为。\n   2. 配置依赖关系\n      1. 依赖关系是在Operation之间的，与是否在同一个Operation Queue没有关系，也就是说，我们在位于不同的Operation Queue中的Operation之间设置依赖。\n      2. 注意不要产生依赖循环。\n      3. 在把operation添加到Operation Queue之前就需要配置好依赖，在添加后设置的依赖可能无效。\n   3. 修改operation在队列中的优先级\n      1. Operation在队列中的执行顺序取决于isReady状态和队列优先级。\n      2. isReady受它所依赖的operation状态的影响，只有当依赖的所有operation都变为isFinished的时候，isReady状态才为true。\n      3. queuePriority只能作用与相同队列中的operation，并且队列优先级只有当isReady为true的时候，才会决定operation的执行顺序。\n      4. isReady为FALSE的时候，isReady为true的低队列优先级的operation也会先执行。\n7. 一个串行的 operation queue 与一个串行的 dispatch queue是一样的么？\n   1. 两者都是在同一时间内只能有一个任务被执行，但是在任务的执行顺序上是不同的：\n      1. dispatch queue 的执行顺序一直是 FIFO 的\n      2. operation queue中的operation执行的顺序取决于isReady和queuePriority状态。\n8. 如何用GCD实现一个线程安全的单例？\n   1. ObjC\n   2. Swift","source":"_posts/iOS多线程开发笔记.md","raw":"---\ntitle: iOS多线程开发笔记\ndate: 2016-11-15 21:51:37\ntags:\n---\n\n[TOC]\n\n## GCD、NSOperation和多线程编程推荐阅读\n\n**五星：**\n\n1. [iOS 并发编程之 Operation Queues](http://blog.leichunfeng.com/blog/2015/07/29/ios-concurrency-programming-operation-queues/)\n2. [GCD 深入理解：第一部分](https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md#gcd-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86)\n3. [iOS并发编程对比总结,NSThread,NSOperation,GCD - iOS](http://blog.csdn.net/zyq522376829/article/details/52373154) \n\n**四星：**\n\n1. [NSOperation in NShipster](http://nshipster.cn/nsoperation/) \n2. [深入浅出 Cocoa 多线程编程之 block 与 dispatch quene](http://www.cppblog.com/kesalin/archive/2011/08/26/154411.aspx)\n3. [GCD使用经验与技巧浅谈](http://tutuge.me/2015/04/03/something-about-gcd/)\n\n## 多线程编程概念\n\n### 基本概念、术语：\n\n1. 进程（Precess）：进程是操作系统管理和分配资源的最小单位，每个进程都有自己的内存空间、系统资源，至少有一个主线程和多个辅助线程。在iOS中，每个App运行的时候，都有对应的进程。\n2. 线程（Thread）：线程则是操作系统具体的执行单元，代码的执行是在线程来完成的。在iOS中，线程的底层实现是基于POSIX thread API的，也就是我们常说的pthread。\n3. 任务（Task）：任务是我们抽象出来的需要执行的工作，一般指代一段代码。\n4. 同步 vs 异步\n   1. 同步是指函数的调用会阻塞当前的线程，必须等待函数返回才能继续执行接下来的代码。\n   2. 异步函数的调用则不会阻塞当前线程，函数调用之后立刻返回，一般通过回调函数来处理函数的执行结果。\n   3. 异步函数能够有效的完成一些耗时的任务，而不必影响代码的执行流，能够提高代码的处理效率。\n5. 串行 vs 并发\n   1. 串行指的是在同一个时间只能有一个任务在执行。\n   2. 并发指的是在同一个时间可以有多个任务一起执行。\n   3. 并发一般用于多核编程，通过高效的利用多核的优势，把不同的任务分配到各个执行单元来提高效率。\n6. Dispatch Queue vs Operation Queue\n   1. GCD和NSOperation/NSOperationQueue是iOS上面来处理多线程开发的工具，对应的概念分别是Dispatch Queue和Operation Queue。\n\n### iOS并发编程模型\n\n1. 在其他的操作系统中，我们往往需要手动创建线程、管理线程的生命周期，在不需要的时候负责销毁线程和线程使用的资源，更加痛苦的是需要使用线程锁、信号量、代码临界区等手段完成线程的同步工作，这些操作往往容易出错而且繁杂。\n2. iOS通过抽象出队列的概念，让开发者更加关注于任务的安排和调度，而从线程的管理工作中解脱出来。在很多时候，iOS把一些繁杂且容易出错的工作（ARC代替MRC）抽离到底层中，能够让开发者把注意力更多地放到真正的任务上，这也是iOS能够吸引广大开发者的原因之一吧。\n\n## NSThread vs GCD vs NSOperation，它们到底是什么？ \n\n### 三种解决方案\n\n1. NSThread：一个封装pthread API的线程对象，需要进行线程创建、销毁和处理线程同步，是最接近系统底层的解决方案。\n2. GCD：苹果基于C语言开发的，一个用于多核编程的解决方案，是一个轻量级的、以FIFO的顺序来执行并发任务的库。\n3. NSOperation：建立在GCD的基础上，面向对象的解决方案，比GCD更加灵活，也更加强大。\n\n#### 它们具体是什么？\n\n1. NSThread: Cocoa对于pthread API的封装，提供了一套面向对象的接口，需要开发者自行管理线程的生命周期、处理线程同步。大多是的时候，我们是不需要直接使用这些底层的对象，而是使用GCD或者NSOperation等更加高级的接口。\n2. 关于Operation对象\n   1. NSOperation对象本身是一个抽象类，不能直接使用。要么使用系统预定义的两个子类NSInvocationOperation和NSBlockOperation或者定义它的子类。\n   2. NSInvocationOperation:可以使用**object**和**selector**来创建一个NSInvocationOperation，非常的方便和灵活。当代码中已经有相关的处理逻辑方法时，建议直接使用NSInvocationOperation来进行替代。\n   3. NSBlockOperation：可以使用NSBlockOperation来并发的执行一个或者多个block，只有当所有的block都执行完毕，NSBlockOperation才算执行完成，有点像dispatch_group的概念。\n   4. 所有的Operation都有下面的特性：\n      1. 支持在 operation 之间建立依赖关系，只有当一个 operation 所依赖的所有 operation 都执行完成时，这个 operation 才能开始执行；\n      2. 支持一个可选的 completion block ，这个 block 将会在 operation 的主任务执行完成时被调用，在任务被取消的时候也会执行；\n      3. 支持通过 KVO 来观察 operation 执行状态的变化，Operation正是通过KVO通知来实现依赖运行，所以我们需要在自定义的子类中的处理好KVO的属性；\n      4. 支持设置执行的优先级，从而影响 operation 之间的相对执行顺序；\n      5. 支持取消操作，可以允许我们停止正在执行的 operation 。\n3. GCD队列：\n   1. 以FIFO顺序执行任务的队列调度系统，先入队列的任务一定先执行。\n   2. 两种类型的队列：\n      1. 串行队列（Serial Queue）:同一时间内只能有一个任务正在被执行。\n      2. 并发队列（Concurrent Queue）:同一时间内可以有多个任务同时被执行。\n      3. iOS默认提供5个队列：\n         1. 主队列（Main Queue）：应用程序主线程应用的队列，用于更新UI，属于串行队列。\n         2. 四个全局队列：\n            1. 按照队列优先级排序，分别是：High、Default、Low、Background。\n            2. 这四个全局队列是由系统提供的，在所有的App中共享，当然也包含了Apple的应用。\n         3. 并发队列中任务的执行顺序：\n            1. 由于队列的并发数是有系统根据当前的资源动态管理的，我们不知道也不能够设置队列中任务执行的时机和所需时长。\n            2. 只有当位于队列前面的任务执行完毕、出队列后，才会执行后面的任务，但是当前并发执行的任务数量我们不得而知。\n   3. 自定义队列：\n      1. 我们可以自定义串行或者并发队列来完成任务的执行和调度。\n\n\n\n### 各自的优势和劣势\n\n1. 优势：\n   1. NSThread：\n      1. 能够执行实时任务。其他两者都是由系统管理的队列，不能保证实时性。\n   2. GCD：\n      1. 可以非常简洁的完成简单异步任务的调用，如在主线程更新UI，延迟执行。\n      2. 只需要把任务分发到队列之后，不需要管理任务的调度情况。\n   3. NSOperation：\n      1. 给任务添加依赖\n      2. 取消或者暂停一个正在执行的任务\n      3. 有一个可选的completionBlock\n      4. 可以通过KVO来查看任务的执行情况\n      5. 可以给任务设置优先级，从而影响任务的执行顺序\n2. 短板：\n   1. NSThread：需要进行线程的创建、销毁，以及处理线程同步的问题，过于繁杂，而且容易出错。\n   2. GCD:\n      1. 对于任务的管理不够：如不能取消任务、设置依赖和优先级等。\n   3. NSOperation:\n      1. 相比于GCD，会增加系统的额外开销。\n\n## 多线程代码中，需要注意哪些问题？\n\n1. 有了GCD来调度block，我们为什么还需要NSBlockOperation?\n   1. 现有代码已经在使用OperationQueue，而我们不想使用Dispatch Queue的时候，NSBlockOperation提供了一个面向对象的封装。\n   2. 当我们需要dispatch queue不能提供的功能时，如KVO观察Operation状态变化、设置operation之间依赖等。\n2. NSInvocationOperation的灵活性是什么意思？\n   1. 我们可以通过上下文来改变selector和object对象。\n3. 如何定义一个非并发的operation？\n   1. 对于非并发的operation，我们只需要实现main方法和能够正常响应取消事件。\n   2. 其他复杂的工作如KVO通知、依赖设置等工作NSOperation类的start方法已经帮我们提供了默认实现。\n   3. 简单实现：\n      1. 提供一个自定义的初始化方法\n      2. 重写main方法\n4. 如何实现一个并发的operation？\n   1. 一般我们不需要实现并发的operation，当operation和operation queue一起使用的时候，Operation Queue会为非并发的operation创建单独的线程。\n   2. 默认情况下，operation是同步执行的，也就是我们直接使用start方法的时候，它是在调用者的线程中执行的。\n   3. Operation的isConcurrent属性表明一个operation是否支持并发。\n   4. 配置并发的Operation：只有当我们需要手动执行operation，并且希望支持并发执行，需要重写下面的方法。\n      1. start：必须，配置任务执行的线程和其他资源，但是一定**不能调用父类的实现**。\n      2. main：可选，一般用来执行具体的任务，而start方法更多是用来配置初始环境，当然也可以用来执行具体的任务。\n      3. isExecuting和isFinished：必须，并发的Operation需要自己来配置环境，同时还需要向外界来传递状态的变化，而isExecuting和isFinished这两个状态的变化需要使用KVO来通知外部。\n      4. isConcurrent：必须，用来标识一个Operation是否支持并发。\n5. 如何完成自定义operation的cancel操作？\n   1. 在下面这几个关键点的检查isCancelled属性\n      1. 在真正开始执行operaiton之前\n      2. 至少在一次循环之中需要检查一次，如果单次循环耗时较长，则需要更加频繁的检查\n      3. 在任何相对比较容易终止Operation的地方\n   2. 需要注意的是虽然Operation支持取消操作，但是并不是立刻就可以被终止的，而是在下一个isCancelled的检查点。\n   3. 在我们自定义Operation子类的时候，即使operation是被cancel了，我们仍然需要设置isFinished方法为true，因为在设置operation依赖的时候，它们的operation就是通过KVO来观察isFinished方法来判断时候可以执行的，如果在cancel的时候，没有设置isFinished方法，那么其他的operation将永远不会执行。\n6. 如何定制Operation对象的执行行为：\n   1. 在Operation添加到Operation Queue之前，我们可以配置Operation的一些行为。\n   2. 配置依赖关系\n      1. 依赖关系是在Operation之间的，与是否在同一个Operation Queue没有关系，也就是说，我们在位于不同的Operation Queue中的Operation之间设置依赖。\n      2. 注意不要产生依赖循环。\n      3. 在把operation添加到Operation Queue之前就需要配置好依赖，在添加后设置的依赖可能无效。\n   3. 修改operation在队列中的优先级\n      1. Operation在队列中的执行顺序取决于isReady状态和队列优先级。\n      2. isReady受它所依赖的operation状态的影响，只有当依赖的所有operation都变为isFinished的时候，isReady状态才为true。\n      3. queuePriority只能作用与相同队列中的operation，并且队列优先级只有当isReady为true的时候，才会决定operation的执行顺序。\n      4. isReady为FALSE的时候，isReady为true的低队列优先级的operation也会先执行。\n7. 一个串行的 operation queue 与一个串行的 dispatch queue是一样的么？\n   1. 两者都是在同一时间内只能有一个任务被执行，但是在任务的执行顺序上是不同的：\n      1. dispatch queue 的执行顺序一直是 FIFO 的\n      2. operation queue中的operation执行的顺序取决于isReady和queuePriority状态。\n8. 如何用GCD实现一个线程安全的单例？\n   1. ObjC\n   2. Swift","slug":"iOS多线程开发笔记","published":1,"updated":"2016-11-15T14:43:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civkma7uz0001s1o6krmkua05","content":"<p>[TOC]</p>\n<h2 id=\"GCD、NSOperation和多线程编程推荐阅读\"><a href=\"#GCD、NSOperation和多线程编程推荐阅读\" class=\"headerlink\" title=\"GCD、NSOperation和多线程编程推荐阅读\"></a>GCD、NSOperation和多线程编程推荐阅读</h2><p><strong>五星：</strong></p>\n<ol>\n<li><a href=\"http://blog.leichunfeng.com/blog/2015/07/29/ios-concurrency-programming-operation-queues/\" target=\"_blank\" rel=\"external\">iOS 并发编程之 Operation Queues</a></li>\n<li><a href=\"https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md#gcd-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86\" target=\"_blank\" rel=\"external\">GCD 深入理解：第一部分</a></li>\n<li><a href=\"http://blog.csdn.net/zyq522376829/article/details/52373154\" target=\"_blank\" rel=\"external\">iOS并发编程对比总结,NSThread,NSOperation,GCD - iOS</a> </li>\n</ol>\n<p><strong>四星：</strong></p>\n<ol>\n<li><a href=\"http://nshipster.cn/nsoperation/\" target=\"_blank\" rel=\"external\">NSOperation in NShipster</a> </li>\n<li><a href=\"http://www.cppblog.com/kesalin/archive/2011/08/26/154411.aspx\" target=\"_blank\" rel=\"external\">深入浅出 Cocoa 多线程编程之 block 与 dispatch quene</a></li>\n<li><a href=\"http://tutuge.me/2015/04/03/something-about-gcd/\" target=\"_blank\" rel=\"external\">GCD使用经验与技巧浅谈</a></li>\n</ol>\n<h2 id=\"多线程编程概念\"><a href=\"#多线程编程概念\" class=\"headerlink\" title=\"多线程编程概念\"></a>多线程编程概念</h2><h3 id=\"基本概念、术语：\"><a href=\"#基本概念、术语：\" class=\"headerlink\" title=\"基本概念、术语：\"></a>基本概念、术语：</h3><ol>\n<li>进程（Precess）：进程是操作系统管理和分配资源的最小单位，每个进程都有自己的内存空间、系统资源，至少有一个主线程和多个辅助线程。在iOS中，每个App运行的时候，都有对应的进程。</li>\n<li>线程（Thread）：线程则是操作系统具体的执行单元，代码的执行是在线程来完成的。在iOS中，线程的底层实现是基于POSIX thread API的，也就是我们常说的pthread。</li>\n<li>任务（Task）：任务是我们抽象出来的需要执行的工作，一般指代一段代码。</li>\n<li>同步 vs 异步<ol>\n<li>同步是指函数的调用会阻塞当前的线程，必须等待函数返回才能继续执行接下来的代码。</li>\n<li>异步函数的调用则不会阻塞当前线程，函数调用之后立刻返回，一般通过回调函数来处理函数的执行结果。</li>\n<li>异步函数能够有效的完成一些耗时的任务，而不必影响代码的执行流，能够提高代码的处理效率。</li>\n</ol>\n</li>\n<li>串行 vs 并发<ol>\n<li>串行指的是在同一个时间只能有一个任务在执行。</li>\n<li>并发指的是在同一个时间可以有多个任务一起执行。</li>\n<li>并发一般用于多核编程，通过高效的利用多核的优势，把不同的任务分配到各个执行单元来提高效率。</li>\n</ol>\n</li>\n<li>Dispatch Queue vs Operation Queue<ol>\n<li>GCD和NSOperation/NSOperationQueue是iOS上面来处理多线程开发的工具，对应的概念分别是Dispatch Queue和Operation Queue。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"iOS并发编程模型\"><a href=\"#iOS并发编程模型\" class=\"headerlink\" title=\"iOS并发编程模型\"></a>iOS并发编程模型</h3><ol>\n<li>在其他的操作系统中，我们往往需要手动创建线程、管理线程的生命周期，在不需要的时候负责销毁线程和线程使用的资源，更加痛苦的是需要使用线程锁、信号量、代码临界区等手段完成线程的同步工作，这些操作往往容易出错而且繁杂。</li>\n<li>iOS通过抽象出队列的概念，让开发者更加关注于任务的安排和调度，而从线程的管理工作中解脱出来。在很多时候，iOS把一些繁杂且容易出错的工作（ARC代替MRC）抽离到底层中，能够让开发者把注意力更多地放到真正的任务上，这也是iOS能够吸引广大开发者的原因之一吧。</li>\n</ol>\n<h2 id=\"NSThread-vs-GCD-vs-NSOperation，它们到底是什么？\"><a href=\"#NSThread-vs-GCD-vs-NSOperation，它们到底是什么？\" class=\"headerlink\" title=\"NSThread vs GCD vs NSOperation，它们到底是什么？\"></a>NSThread vs GCD vs NSOperation，它们到底是什么？</h2><h3 id=\"三种解决方案\"><a href=\"#三种解决方案\" class=\"headerlink\" title=\"三种解决方案\"></a>三种解决方案</h3><ol>\n<li>NSThread：一个封装pthread API的线程对象，需要进行线程创建、销毁和处理线程同步，是最接近系统底层的解决方案。</li>\n<li>GCD：苹果基于C语言开发的，一个用于多核编程的解决方案，是一个轻量级的、以FIFO的顺序来执行并发任务的库。</li>\n<li>NSOperation：建立在GCD的基础上，面向对象的解决方案，比GCD更加灵活，也更加强大。</li>\n</ol>\n<h4 id=\"它们具体是什么？\"><a href=\"#它们具体是什么？\" class=\"headerlink\" title=\"它们具体是什么？\"></a>它们具体是什么？</h4><ol>\n<li>NSThread: Cocoa对于pthread API的封装，提供了一套面向对象的接口，需要开发者自行管理线程的生命周期、处理线程同步。大多是的时候，我们是不需要直接使用这些底层的对象，而是使用GCD或者NSOperation等更加高级的接口。</li>\n<li>关于Operation对象<ol>\n<li>NSOperation对象本身是一个抽象类，不能直接使用。要么使用系统预定义的两个子类NSInvocationOperation和NSBlockOperation或者定义它的子类。</li>\n<li>NSInvocationOperation:可以使用<strong>object</strong>和<strong>selector</strong>来创建一个NSInvocationOperation，非常的方便和灵活。当代码中已经有相关的处理逻辑方法时，建议直接使用NSInvocationOperation来进行替代。</li>\n<li>NSBlockOperation：可以使用NSBlockOperation来并发的执行一个或者多个block，只有当所有的block都执行完毕，NSBlockOperation才算执行完成，有点像dispatch_group的概念。</li>\n<li>所有的Operation都有下面的特性：<ol>\n<li>支持在 operation 之间建立依赖关系，只有当一个 operation 所依赖的所有 operation 都执行完成时，这个 operation 才能开始执行；</li>\n<li>支持一个可选的 completion block ，这个 block 将会在 operation 的主任务执行完成时被调用，在任务被取消的时候也会执行；</li>\n<li>支持通过 KVO 来观察 operation 执行状态的变化，Operation正是通过KVO通知来实现依赖运行，所以我们需要在自定义的子类中的处理好KVO的属性；</li>\n<li>支持设置执行的优先级，从而影响 operation 之间的相对执行顺序；</li>\n<li>支持取消操作，可以允许我们停止正在执行的 operation 。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>GCD队列：<ol>\n<li>以FIFO顺序执行任务的队列调度系统，先入队列的任务一定先执行。</li>\n<li>两种类型的队列：<ol>\n<li>串行队列（Serial Queue）:同一时间内只能有一个任务正在被执行。</li>\n<li>并发队列（Concurrent Queue）:同一时间内可以有多个任务同时被执行。</li>\n<li>iOS默认提供5个队列：<ol>\n<li>主队列（Main Queue）：应用程序主线程应用的队列，用于更新UI，属于串行队列。</li>\n<li>四个全局队列：<ol>\n<li>按照队列优先级排序，分别是：High、Default、Low、Background。</li>\n<li>这四个全局队列是由系统提供的，在所有的App中共享，当然也包含了Apple的应用。</li>\n</ol>\n</li>\n<li>并发队列中任务的执行顺序：<ol>\n<li>由于队列的并发数是有系统根据当前的资源动态管理的，我们不知道也不能够设置队列中任务执行的时机和所需时长。</li>\n<li>只有当位于队列前面的任务执行完毕、出队列后，才会执行后面的任务，但是当前并发执行的任务数量我们不得而知。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>自定义队列：<ol>\n<li>我们可以自定义串行或者并发队列来完成任务的执行和调度。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"各自的优势和劣势\"><a href=\"#各自的优势和劣势\" class=\"headerlink\" title=\"各自的优势和劣势\"></a>各自的优势和劣势</h3><ol>\n<li>优势：<ol>\n<li>NSThread：<ol>\n<li>能够执行实时任务。其他两者都是由系统管理的队列，不能保证实时性。</li>\n</ol>\n</li>\n<li>GCD：<ol>\n<li>可以非常简洁的完成简单异步任务的调用，如在主线程更新UI，延迟执行。</li>\n<li>只需要把任务分发到队列之后，不需要管理任务的调度情况。</li>\n</ol>\n</li>\n<li>NSOperation：<ol>\n<li>给任务添加依赖</li>\n<li>取消或者暂停一个正在执行的任务</li>\n<li>有一个可选的completionBlock</li>\n<li>可以通过KVO来查看任务的执行情况</li>\n<li>可以给任务设置优先级，从而影响任务的执行顺序</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>短板：<ol>\n<li>NSThread：需要进行线程的创建、销毁，以及处理线程同步的问题，过于繁杂，而且容易出错。</li>\n<li>GCD:<ol>\n<li>对于任务的管理不够：如不能取消任务、设置依赖和优先级等。</li>\n</ol>\n</li>\n<li>NSOperation:<ol>\n<li>相比于GCD，会增加系统的额外开销。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"多线程代码中，需要注意哪些问题？\"><a href=\"#多线程代码中，需要注意哪些问题？\" class=\"headerlink\" title=\"多线程代码中，需要注意哪些问题？\"></a>多线程代码中，需要注意哪些问题？</h2><ol>\n<li>有了GCD来调度block，我们为什么还需要NSBlockOperation?<ol>\n<li>现有代码已经在使用OperationQueue，而我们不想使用Dispatch Queue的时候，NSBlockOperation提供了一个面向对象的封装。</li>\n<li>当我们需要dispatch queue不能提供的功能时，如KVO观察Operation状态变化、设置operation之间依赖等。</li>\n</ol>\n</li>\n<li>NSInvocationOperation的灵活性是什么意思？<ol>\n<li>我们可以通过上下文来改变selector和object对象。</li>\n</ol>\n</li>\n<li>如何定义一个非并发的operation？<ol>\n<li>对于非并发的operation，我们只需要实现main方法和能够正常响应取消事件。</li>\n<li>其他复杂的工作如KVO通知、依赖设置等工作NSOperation类的start方法已经帮我们提供了默认实现。</li>\n<li>简单实现：<ol>\n<li>提供一个自定义的初始化方法</li>\n<li>重写main方法</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何实现一个并发的operation？<ol>\n<li>一般我们不需要实现并发的operation，当operation和operation queue一起使用的时候，Operation Queue会为非并发的operation创建单独的线程。</li>\n<li>默认情况下，operation是同步执行的，也就是我们直接使用start方法的时候，它是在调用者的线程中执行的。</li>\n<li>Operation的isConcurrent属性表明一个operation是否支持并发。</li>\n<li>配置并发的Operation：只有当我们需要手动执行operation，并且希望支持并发执行，需要重写下面的方法。<ol>\n<li>start：必须，配置任务执行的线程和其他资源，但是一定<strong>不能调用父类的实现</strong>。</li>\n<li>main：可选，一般用来执行具体的任务，而start方法更多是用来配置初始环境，当然也可以用来执行具体的任务。</li>\n<li>isExecuting和isFinished：必须，并发的Operation需要自己来配置环境，同时还需要向外界来传递状态的变化，而isExecuting和isFinished这两个状态的变化需要使用KVO来通知外部。</li>\n<li>isConcurrent：必须，用来标识一个Operation是否支持并发。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何完成自定义operation的cancel操作？<ol>\n<li>在下面这几个关键点的检查isCancelled属性<ol>\n<li>在真正开始执行operaiton之前</li>\n<li>至少在一次循环之中需要检查一次，如果单次循环耗时较长，则需要更加频繁的检查</li>\n<li>在任何相对比较容易终止Operation的地方</li>\n</ol>\n</li>\n<li>需要注意的是虽然Operation支持取消操作，但是并不是立刻就可以被终止的，而是在下一个isCancelled的检查点。</li>\n<li>在我们自定义Operation子类的时候，即使operation是被cancel了，我们仍然需要设置isFinished方法为true，因为在设置operation依赖的时候，它们的operation就是通过KVO来观察isFinished方法来判断时候可以执行的，如果在cancel的时候，没有设置isFinished方法，那么其他的operation将永远不会执行。</li>\n</ol>\n</li>\n<li>如何定制Operation对象的执行行为：<ol>\n<li>在Operation添加到Operation Queue之前，我们可以配置Operation的一些行为。</li>\n<li>配置依赖关系<ol>\n<li>依赖关系是在Operation之间的，与是否在同一个Operation Queue没有关系，也就是说，我们在位于不同的Operation Queue中的Operation之间设置依赖。</li>\n<li>注意不要产生依赖循环。</li>\n<li>在把operation添加到Operation Queue之前就需要配置好依赖，在添加后设置的依赖可能无效。</li>\n</ol>\n</li>\n<li>修改operation在队列中的优先级<ol>\n<li>Operation在队列中的执行顺序取决于isReady状态和队列优先级。</li>\n<li>isReady受它所依赖的operation状态的影响，只有当依赖的所有operation都变为isFinished的时候，isReady状态才为true。</li>\n<li>queuePriority只能作用与相同队列中的operation，并且队列优先级只有当isReady为true的时候，才会决定operation的执行顺序。</li>\n<li>isReady为FALSE的时候，isReady为true的低队列优先级的operation也会先执行。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>一个串行的 operation queue 与一个串行的 dispatch queue是一样的么？<ol>\n<li>两者都是在同一时间内只能有一个任务被执行，但是在任务的执行顺序上是不同的：<ol>\n<li>dispatch queue 的执行顺序一直是 FIFO 的</li>\n<li>operation queue中的operation执行的顺序取决于isReady和queuePriority状态。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何用GCD实现一个线程安全的单例？<ol>\n<li>ObjC</li>\n<li>Swift</li>\n</ol>\n</li>\n</ol>\n","excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"GCD、NSOperation和多线程编程推荐阅读\"><a href=\"#GCD、NSOperation和多线程编程推荐阅读\" class=\"headerlink\" title=\"GCD、NSOperation和多线程编程推荐阅读\"></a>GCD、NSOperation和多线程编程推荐阅读</h2><p><strong>五星：</strong></p>\n<ol>\n<li><a href=\"http://blog.leichunfeng.com/blog/2015/07/29/ios-concurrency-programming-operation-queues/\">iOS 并发编程之 Operation Queues</a></li>\n<li><a href=\"https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md#gcd-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86\">GCD 深入理解：第一部分</a></li>\n<li><a href=\"http://blog.csdn.net/zyq522376829/article/details/52373154\">iOS并发编程对比总结,NSThread,NSOperation,GCD - iOS</a> </li>\n</ol>\n<p><strong>四星：</strong></p>\n<ol>\n<li><a href=\"http://nshipster.cn/nsoperation/\">NSOperation in NShipster</a> </li>\n<li><a href=\"http://www.cppblog.com/kesalin/archive/2011/08/26/154411.aspx\">深入浅出 Cocoa 多线程编程之 block 与 dispatch quene</a></li>\n<li><a href=\"http://tutuge.me/2015/04/03/something-about-gcd/\">GCD使用经验与技巧浅谈</a></li>\n</ol>\n<h2 id=\"多线程编程概念\"><a href=\"#多线程编程概念\" class=\"headerlink\" title=\"多线程编程概念\"></a>多线程编程概念</h2><h3 id=\"基本概念、术语：\"><a href=\"#基本概念、术语：\" class=\"headerlink\" title=\"基本概念、术语：\"></a>基本概念、术语：</h3><ol>\n<li>进程（Precess）：进程是操作系统管理和分配资源的最小单位，每个进程都有自己的内存空间、系统资源，至少有一个主线程和多个辅助线程。在iOS中，每个App运行的时候，都有对应的进程。</li>\n<li>线程（Thread）：线程则是操作系统具体的执行单元，代码的执行是在线程来完成的。在iOS中，线程的底层实现是基于POSIX thread API的，也就是我们常说的pthread。</li>\n<li>任务（Task）：任务是我们抽象出来的需要执行的工作，一般指代一段代码。</li>\n<li>同步 vs 异步<ol>\n<li>同步是指函数的调用会阻塞当前的线程，必须等待函数返回才能继续执行接下来的代码。</li>\n<li>异步函数的调用则不会阻塞当前线程，函数调用之后立刻返回，一般通过回调函数来处理函数的执行结果。</li>\n<li>异步函数能够有效的完成一些耗时的任务，而不必影响代码的执行流，能够提高代码的处理效率。</li>\n</ol>\n</li>\n<li>串行 vs 并发<ol>\n<li>串行指的是在同一个时间只能有一个任务在执行。</li>\n<li>并发指的是在同一个时间可以有多个任务一起执行。</li>\n<li>并发一般用于多核编程，通过高效的利用多核的优势，把不同的任务分配到各个执行单元来提高效率。</li>\n</ol>\n</li>\n<li>Dispatch Queue vs Operation Queue<ol>\n<li>GCD和NSOperation/NSOperationQueue是iOS上面来处理多线程开发的工具，对应的概念分别是Dispatch Queue和Operation Queue。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"iOS并发编程模型\"><a href=\"#iOS并发编程模型\" class=\"headerlink\" title=\"iOS并发编程模型\"></a>iOS并发编程模型</h3><ol>\n<li>在其他的操作系统中，我们往往需要手动创建线程、管理线程的生命周期，在不需要的时候负责销毁线程和线程使用的资源，更加痛苦的是需要使用线程锁、信号量、代码临界区等手段完成线程的同步工作，这些操作往往容易出错而且繁杂。</li>\n<li>iOS通过抽象出队列的概念，让开发者更加关注于任务的安排和调度，而从线程的管理工作中解脱出来。在很多时候，iOS把一些繁杂且容易出错的工作（ARC代替MRC）抽离到底层中，能够让开发者把注意力更多地放到真正的任务上，这也是iOS能够吸引广大开发者的原因之一吧。</li>\n</ol>\n<h2 id=\"NSThread-vs-GCD-vs-NSOperation，它们到底是什么？\"><a href=\"#NSThread-vs-GCD-vs-NSOperation，它们到底是什么？\" class=\"headerlink\" title=\"NSThread vs GCD vs NSOperation，它们到底是什么？\"></a>NSThread vs GCD vs NSOperation，它们到底是什么？</h2><h3 id=\"三种解决方案\"><a href=\"#三种解决方案\" class=\"headerlink\" title=\"三种解决方案\"></a>三种解决方案</h3><ol>\n<li>NSThread：一个封装pthread API的线程对象，需要进行线程创建、销毁和处理线程同步，是最接近系统底层的解决方案。</li>\n<li>GCD：苹果基于C语言开发的，一个用于多核编程的解决方案，是一个轻量级的、以FIFO的顺序来执行并发任务的库。</li>\n<li>NSOperation：建立在GCD的基础上，面向对象的解决方案，比GCD更加灵活，也更加强大。</li>\n</ol>\n<h4 id=\"它们具体是什么？\"><a href=\"#它们具体是什么？\" class=\"headerlink\" title=\"它们具体是什么？\"></a>它们具体是什么？</h4><ol>\n<li>NSThread: Cocoa对于pthread API的封装，提供了一套面向对象的接口，需要开发者自行管理线程的生命周期、处理线程同步。大多是的时候，我们是不需要直接使用这些底层的对象，而是使用GCD或者NSOperation等更加高级的接口。</li>\n<li>关于Operation对象<ol>\n<li>NSOperation对象本身是一个抽象类，不能直接使用。要么使用系统预定义的两个子类NSInvocationOperation和NSBlockOperation或者定义它的子类。</li>\n<li>NSInvocationOperation:可以使用<strong>object</strong>和<strong>selector</strong>来创建一个NSInvocationOperation，非常的方便和灵活。当代码中已经有相关的处理逻辑方法时，建议直接使用NSInvocationOperation来进行替代。</li>\n<li>NSBlockOperation：可以使用NSBlockOperation来并发的执行一个或者多个block，只有当所有的block都执行完毕，NSBlockOperation才算执行完成，有点像dispatch_group的概念。</li>\n<li>所有的Operation都有下面的特性：<ol>\n<li>支持在 operation 之间建立依赖关系，只有当一个 operation 所依赖的所有 operation 都执行完成时，这个 operation 才能开始执行；</li>\n<li>支持一个可选的 completion block ，这个 block 将会在 operation 的主任务执行完成时被调用，在任务被取消的时候也会执行；</li>\n<li>支持通过 KVO 来观察 operation 执行状态的变化，Operation正是通过KVO通知来实现依赖运行，所以我们需要在自定义的子类中的处理好KVO的属性；</li>\n<li>支持设置执行的优先级，从而影响 operation 之间的相对执行顺序；</li>\n<li>支持取消操作，可以允许我们停止正在执行的 operation 。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>GCD队列：<ol>\n<li>以FIFO顺序执行任务的队列调度系统，先入队列的任务一定先执行。</li>\n<li>两种类型的队列：<ol>\n<li>串行队列（Serial Queue）:同一时间内只能有一个任务正在被执行。</li>\n<li>并发队列（Concurrent Queue）:同一时间内可以有多个任务同时被执行。</li>\n<li>iOS默认提供5个队列：<ol>\n<li>主队列（Main Queue）：应用程序主线程应用的队列，用于更新UI，属于串行队列。</li>\n<li>四个全局队列：<ol>\n<li>按照队列优先级排序，分别是：High、Default、Low、Background。</li>\n<li>这四个全局队列是由系统提供的，在所有的App中共享，当然也包含了Apple的应用。</li>\n</ol>\n</li>\n<li>并发队列中任务的执行顺序：<ol>\n<li>由于队列的并发数是有系统根据当前的资源动态管理的，我们不知道也不能够设置队列中任务执行的时机和所需时长。</li>\n<li>只有当位于队列前面的任务执行完毕、出队列后，才会执行后面的任务，但是当前并发执行的任务数量我们不得而知。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>自定义队列：<ol>\n<li>我们可以自定义串行或者并发队列来完成任务的执行和调度。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"各自的优势和劣势\"><a href=\"#各自的优势和劣势\" class=\"headerlink\" title=\"各自的优势和劣势\"></a>各自的优势和劣势</h3><ol>\n<li>优势：<ol>\n<li>NSThread：<ol>\n<li>能够执行实时任务。其他两者都是由系统管理的队列，不能保证实时性。</li>\n</ol>\n</li>\n<li>GCD：<ol>\n<li>可以非常简洁的完成简单异步任务的调用，如在主线程更新UI，延迟执行。</li>\n<li>只需要把任务分发到队列之后，不需要管理任务的调度情况。</li>\n</ol>\n</li>\n<li>NSOperation：<ol>\n<li>给任务添加依赖</li>\n<li>取消或者暂停一个正在执行的任务</li>\n<li>有一个可选的completionBlock</li>\n<li>可以通过KVO来查看任务的执行情况</li>\n<li>可以给任务设置优先级，从而影响任务的执行顺序</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>短板：<ol>\n<li>NSThread：需要进行线程的创建、销毁，以及处理线程同步的问题，过于繁杂，而且容易出错。</li>\n<li>GCD:<ol>\n<li>对于任务的管理不够：如不能取消任务、设置依赖和优先级等。</li>\n</ol>\n</li>\n<li>NSOperation:<ol>\n<li>相比于GCD，会增加系统的额外开销。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"多线程代码中，需要注意哪些问题？\"><a href=\"#多线程代码中，需要注意哪些问题？\" class=\"headerlink\" title=\"多线程代码中，需要注意哪些问题？\"></a>多线程代码中，需要注意哪些问题？</h2><ol>\n<li>有了GCD来调度block，我们为什么还需要NSBlockOperation?<ol>\n<li>现有代码已经在使用OperationQueue，而我们不想使用Dispatch Queue的时候，NSBlockOperation提供了一个面向对象的封装。</li>\n<li>当我们需要dispatch queue不能提供的功能时，如KVO观察Operation状态变化、设置operation之间依赖等。</li>\n</ol>\n</li>\n<li>NSInvocationOperation的灵活性是什么意思？<ol>\n<li>我们可以通过上下文来改变selector和object对象。</li>\n</ol>\n</li>\n<li>如何定义一个非并发的operation？<ol>\n<li>对于非并发的operation，我们只需要实现main方法和能够正常响应取消事件。</li>\n<li>其他复杂的工作如KVO通知、依赖设置等工作NSOperation类的start方法已经帮我们提供了默认实现。</li>\n<li>简单实现：<ol>\n<li>提供一个自定义的初始化方法</li>\n<li>重写main方法</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何实现一个并发的operation？<ol>\n<li>一般我们不需要实现并发的operation，当operation和operation queue一起使用的时候，Operation Queue会为非并发的operation创建单独的线程。</li>\n<li>默认情况下，operation是同步执行的，也就是我们直接使用start方法的时候，它是在调用者的线程中执行的。</li>\n<li>Operation的isConcurrent属性表明一个operation是否支持并发。</li>\n<li>配置并发的Operation：只有当我们需要手动执行operation，并且希望支持并发执行，需要重写下面的方法。<ol>\n<li>start：必须，配置任务执行的线程和其他资源，但是一定<strong>不能调用父类的实现</strong>。</li>\n<li>main：可选，一般用来执行具体的任务，而start方法更多是用来配置初始环境，当然也可以用来执行具体的任务。</li>\n<li>isExecuting和isFinished：必须，并发的Operation需要自己来配置环境，同时还需要向外界来传递状态的变化，而isExecuting和isFinished这两个状态的变化需要使用KVO来通知外部。</li>\n<li>isConcurrent：必须，用来标识一个Operation是否支持并发。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何完成自定义operation的cancel操作？<ol>\n<li>在下面这几个关键点的检查isCancelled属性<ol>\n<li>在真正开始执行operaiton之前</li>\n<li>至少在一次循环之中需要检查一次，如果单次循环耗时较长，则需要更加频繁的检查</li>\n<li>在任何相对比较容易终止Operation的地方</li>\n</ol>\n</li>\n<li>需要注意的是虽然Operation支持取消操作，但是并不是立刻就可以被终止的，而是在下一个isCancelled的检查点。</li>\n<li>在我们自定义Operation子类的时候，即使operation是被cancel了，我们仍然需要设置isFinished方法为true，因为在设置operation依赖的时候，它们的operation就是通过KVO来观察isFinished方法来判断时候可以执行的，如果在cancel的时候，没有设置isFinished方法，那么其他的operation将永远不会执行。</li>\n</ol>\n</li>\n<li>如何定制Operation对象的执行行为：<ol>\n<li>在Operation添加到Operation Queue之前，我们可以配置Operation的一些行为。</li>\n<li>配置依赖关系<ol>\n<li>依赖关系是在Operation之间的，与是否在同一个Operation Queue没有关系，也就是说，我们在位于不同的Operation Queue中的Operation之间设置依赖。</li>\n<li>注意不要产生依赖循环。</li>\n<li>在把operation添加到Operation Queue之前就需要配置好依赖，在添加后设置的依赖可能无效。</li>\n</ol>\n</li>\n<li>修改operation在队列中的优先级<ol>\n<li>Operation在队列中的执行顺序取决于isReady状态和队列优先级。</li>\n<li>isReady受它所依赖的operation状态的影响，只有当依赖的所有operation都变为isFinished的时候，isReady状态才为true。</li>\n<li>queuePriority只能作用与相同队列中的operation，并且队列优先级只有当isReady为true的时候，才会决定operation的执行顺序。</li>\n<li>isReady为FALSE的时候，isReady为true的低队列优先级的operation也会先执行。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>一个串行的 operation queue 与一个串行的 dispatch queue是一样的么？<ol>\n<li>两者都是在同一时间内只能有一个任务被执行，但是在任务的执行顺序上是不同的：<ol>\n<li>dispatch queue 的执行顺序一直是 FIFO 的</li>\n<li>operation queue中的operation执行的顺序取决于isReady和queuePriority状态。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何用GCD实现一个线程安全的单例？<ol>\n<li>ObjC</li>\n<li>Swift</li>\n</ol>\n</li>\n</ol>\n"},{"title":"使用hexo+github page搭建个人博客","date":"2016-11-12T06:36:16.000Z","_content":"\n我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。\n\n首先简单介绍下github page和hexo：\n\n- Github Page: 使用github repo的静态网页工具，可以无缝地与github一起使用，每个github帐号都有400M的免费空间来存放博客文件，具体的使用说明可以参看[github page网站](https://pages.github.com/)\n- hexo:一个node.js的框架，使用npm进行安装和配置，能够快速的搭建静态博客。主要特点是搭建快速、支持markdown编辑、一键部署、本地预览。\n- 使用github page+hexo主要是考虑到能够快速搭建、维护方便、技术栈匹配。\n\n\n\n下面来说具体的搭建步骤，这里使用**MAC的开发环境**：\n\n- 配置github repo：\n  - 新建一个username.github.io的仓库，注意一定要使用自己的**github用户名**\n  - 设置ssh key：参见[github ssh教程](https://help.github.com/articles/generating-an-ssh-key/)\n  - 这里需要说明的是：github page默认使用的是**master分支**，在master分支中的**index.html**文件会被解析并且作为网页的入口。\n\n\n- 安装Hexo命令行工具hexo-cli\n  - 参考[官方教程](https://hexo.io/docs/index.html)\n  - 安装git、Node.js等工具\n  - 安装hexo-cli命令行工具：npm install -g hexo-cli\n    - hexo-cli是hexo的命令行工具，用于执行hexo init\n  - Setup Hexo:\n    - 命令行为：hexo init <folder>\n    - 使用hexo的模板生成项目，下面几个文件比较重要：\n      - package.json: Node js用于指定依赖包的配置文件，在不清楚的情况下，不要随意修改。\n      - _config.yml: hexo的配置文件，可以设置网站title、主题、字体、制定域名等。\n      - source: Blog的源文件目录，使用hexo new生成的md文件存放在这个目录中。\n      - scaffolds：模板文件，hexo new使用它来生成新的模板md。\n      - themes：主题目录，设置网站版式。\n- 写Blog：\n  - hexo new post_title：生成新的模板文件。\n  - 注意：这里使用hexo命令和上面的hexo init不是同一个命令，这个hexo是在setup过程中下载的npm包，**需要在Blog这个目录中使用才有效。**\n  - 生成的文件在source/_post目录中，使用markdown编辑器来写博客。\n- 本机调试：\n  - 在写blog的过程中，可以直接在本机进行预览：hexo serve\n  - 默认使用4000端口，还可以[设置其他的端口](https://hexo.io/docs/server.html#Custom-IP)\n- 生成Blog文件：\n  - 生成编译后的blog：hexo generate\n  - 生成后的文件存放在public目录中\n  - 也可以使用下面的命令直接完成发布: hexo generate —deploy\n- 发布blog：\n  - 使用hexo deploy完成发布\n  - 第一次发布之前，需要修改_config.yml文件，参见：[hexo deploy](https://hexo.io/docs/deployment.html#Git)\n- 最后要说下Troubleshooting和需要注意的地方:\n  - hexo new不起作用\n    - 我们需要另外开一个branch来进行blog的写作（如source分支），然后使用hexo deploy到master分支上面。在不同的分支进行切换的时候，由于.gitignore文件不一样，导致我们可能在master分支上面删除了一些source分支上面重要的文件，如node_modules目录，则需要我们在切换到source分支的时候，重新下载npm包：npm i\n  - hexo deploy失败\n    - 需要安装hexo-deployer-git包，参考 [hexo deploy](https://hexo.io/docs/deployment.html#Git)\n  - master分支的使用方法\n    - master分支上面**不要放文件**，这个分支在使用hexo deploy之后自动更新，所以会覆盖我们自己的文件。\n  - 使用source分支来进行写作\n    - 上面提高了不能使用master分支，那么就需要我们使用别的分支来进行hexo的搭建和写作，我个人使用source分支，当然你也可以取一个自己喜欢的名字。","source":"_posts/使用hexo-github-page搭建个人博客.md","raw":"---\ntitle: 使用hexo+github page搭建个人博客\ndate: 2016-11-12 14:36:16\ntags:\n---\n\n我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。\n\n首先简单介绍下github page和hexo：\n\n- Github Page: 使用github repo的静态网页工具，可以无缝地与github一起使用，每个github帐号都有400M的免费空间来存放博客文件，具体的使用说明可以参看[github page网站](https://pages.github.com/)\n- hexo:一个node.js的框架，使用npm进行安装和配置，能够快速的搭建静态博客。主要特点是搭建快速、支持markdown编辑、一键部署、本地预览。\n- 使用github page+hexo主要是考虑到能够快速搭建、维护方便、技术栈匹配。\n\n\n\n下面来说具体的搭建步骤，这里使用**MAC的开发环境**：\n\n- 配置github repo：\n  - 新建一个username.github.io的仓库，注意一定要使用自己的**github用户名**\n  - 设置ssh key：参见[github ssh教程](https://help.github.com/articles/generating-an-ssh-key/)\n  - 这里需要说明的是：github page默认使用的是**master分支**，在master分支中的**index.html**文件会被解析并且作为网页的入口。\n\n\n- 安装Hexo命令行工具hexo-cli\n  - 参考[官方教程](https://hexo.io/docs/index.html)\n  - 安装git、Node.js等工具\n  - 安装hexo-cli命令行工具：npm install -g hexo-cli\n    - hexo-cli是hexo的命令行工具，用于执行hexo init\n  - Setup Hexo:\n    - 命令行为：hexo init <folder>\n    - 使用hexo的模板生成项目，下面几个文件比较重要：\n      - package.json: Node js用于指定依赖包的配置文件，在不清楚的情况下，不要随意修改。\n      - _config.yml: hexo的配置文件，可以设置网站title、主题、字体、制定域名等。\n      - source: Blog的源文件目录，使用hexo new生成的md文件存放在这个目录中。\n      - scaffolds：模板文件，hexo new使用它来生成新的模板md。\n      - themes：主题目录，设置网站版式。\n- 写Blog：\n  - hexo new post_title：生成新的模板文件。\n  - 注意：这里使用hexo命令和上面的hexo init不是同一个命令，这个hexo是在setup过程中下载的npm包，**需要在Blog这个目录中使用才有效。**\n  - 生成的文件在source/_post目录中，使用markdown编辑器来写博客。\n- 本机调试：\n  - 在写blog的过程中，可以直接在本机进行预览：hexo serve\n  - 默认使用4000端口，还可以[设置其他的端口](https://hexo.io/docs/server.html#Custom-IP)\n- 生成Blog文件：\n  - 生成编译后的blog：hexo generate\n  - 生成后的文件存放在public目录中\n  - 也可以使用下面的命令直接完成发布: hexo generate —deploy\n- 发布blog：\n  - 使用hexo deploy完成发布\n  - 第一次发布之前，需要修改_config.yml文件，参见：[hexo deploy](https://hexo.io/docs/deployment.html#Git)\n- 最后要说下Troubleshooting和需要注意的地方:\n  - hexo new不起作用\n    - 我们需要另外开一个branch来进行blog的写作（如source分支），然后使用hexo deploy到master分支上面。在不同的分支进行切换的时候，由于.gitignore文件不一样，导致我们可能在master分支上面删除了一些source分支上面重要的文件，如node_modules目录，则需要我们在切换到source分支的时候，重新下载npm包：npm i\n  - hexo deploy失败\n    - 需要安装hexo-deployer-git包，参考 [hexo deploy](https://hexo.io/docs/deployment.html#Git)\n  - master分支的使用方法\n    - master分支上面**不要放文件**，这个分支在使用hexo deploy之后自动更新，所以会覆盖我们自己的文件。\n  - 使用source分支来进行写作\n    - 上面提高了不能使用master分支，那么就需要我们使用别的分支来进行hexo的搭建和写作，我个人使用source分支，当然你也可以取一个自己喜欢的名字。","slug":"使用hexo-github-page搭建个人博客","published":1,"updated":"2016-11-12T07:12:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civkma7v70002s1o6dx1qiv86","content":"<p>我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。</p>\n<p>首先简单介绍下github page和hexo：</p>\n<ul>\n<li>Github Page: 使用github repo的静态网页工具，可以无缝地与github一起使用，每个github帐号都有400M的免费空间来存放博客文件，具体的使用说明可以参看<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">github page网站</a></li>\n<li>hexo:一个node.js的框架，使用npm进行安装和配置，能够快速的搭建静态博客。主要特点是搭建快速、支持markdown编辑、一键部署、本地预览。</li>\n<li>使用github page+hexo主要是考虑到能够快速搭建、维护方便、技术栈匹配。</li>\n</ul>\n<p>下面来说具体的搭建步骤，这里使用<strong>MAC的开发环境</strong>：</p>\n<ul>\n<li>配置github repo：<ul>\n<li>新建一个username.github.io的仓库，注意一定要使用自己的<strong>github用户名</strong></li>\n<li>设置ssh key：参见<a href=\"https://help.github.com/articles/generating-an-ssh-key/\" target=\"_blank\" rel=\"external\">github ssh教程</a></li>\n<li>这里需要说明的是：github page默认使用的是<strong>master分支</strong>，在master分支中的<strong>index.html</strong>文件会被解析并且作为网页的入口。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>安装Hexo命令行工具hexo-cli<ul>\n<li>参考<a href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"external\">官方教程</a></li>\n<li>安装git、Node.js等工具</li>\n<li>安装hexo-cli命令行工具：npm install -g hexo-cli<ul>\n<li>hexo-cli是hexo的命令行工具，用于执行hexo init</li>\n</ul>\n</li>\n<li>Setup Hexo:<ul>\n<li>命令行为：hexo init <folder></folder></li>\n<li>使用hexo的模板生成项目，下面几个文件比较重要：<ul>\n<li>package.json: Node js用于指定依赖包的配置文件，在不清楚的情况下，不要随意修改。</li>\n<li>_config.yml: hexo的配置文件，可以设置网站title、主题、字体、制定域名等。</li>\n<li>source: Blog的源文件目录，使用hexo new生成的md文件存放在这个目录中。</li>\n<li>scaffolds：模板文件，hexo new使用它来生成新的模板md。</li>\n<li>themes：主题目录，设置网站版式。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>写Blog：<ul>\n<li>hexo new post_title：生成新的模板文件。</li>\n<li>注意：这里使用hexo命令和上面的hexo init不是同一个命令，这个hexo是在setup过程中下载的npm包，<strong>需要在Blog这个目录中使用才有效。</strong></li>\n<li>生成的文件在source/_post目录中，使用markdown编辑器来写博客。</li>\n</ul>\n</li>\n<li>本机调试：<ul>\n<li>在写blog的过程中，可以直接在本机进行预览：hexo serve</li>\n<li>默认使用4000端口，还可以<a href=\"https://hexo.io/docs/server.html#Custom-IP\" target=\"_blank\" rel=\"external\">设置其他的端口</a></li>\n</ul>\n</li>\n<li>生成Blog文件：<ul>\n<li>生成编译后的blog：hexo generate</li>\n<li>生成后的文件存放在public目录中</li>\n<li>也可以使用下面的命令直接完成发布: hexo generate —deploy</li>\n</ul>\n</li>\n<li>发布blog：<ul>\n<li>使用hexo deploy完成发布</li>\n<li>第一次发布之前，需要修改_config.yml文件，参见：<a href=\"https://hexo.io/docs/deployment.html#Git\" target=\"_blank\" rel=\"external\">hexo deploy</a></li>\n</ul>\n</li>\n<li>最后要说下Troubleshooting和需要注意的地方:<ul>\n<li>hexo new不起作用<ul>\n<li>我们需要另外开一个branch来进行blog的写作（如source分支），然后使用hexo deploy到master分支上面。在不同的分支进行切换的时候，由于.gitignore文件不一样，导致我们可能在master分支上面删除了一些source分支上面重要的文件，如node_modules目录，则需要我们在切换到source分支的时候，重新下载npm包：npm i</li>\n</ul>\n</li>\n<li>hexo deploy失败<ul>\n<li>需要安装hexo-deployer-git包，参考 <a href=\"https://hexo.io/docs/deployment.html#Git\" target=\"_blank\" rel=\"external\">hexo deploy</a></li>\n</ul>\n</li>\n<li>master分支的使用方法<ul>\n<li>master分支上面<strong>不要放文件</strong>，这个分支在使用hexo deploy之后自动更新，所以会覆盖我们自己的文件。</li>\n</ul>\n</li>\n<li>使用source分支来进行写作<ul>\n<li>上面提高了不能使用master分支，那么就需要我们使用别的分支来进行hexo的搭建和写作，我个人使用source分支，当然你也可以取一个自己喜欢的名字。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<p>我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。</p>\n<p>首先简单介绍下github page和hexo：</p>\n<ul>\n<li>Github Page: 使用github repo的静态网页工具，可以无缝地与github一起使用，每个github帐号都有400M的免费空间来存放博客文件，具体的使用说明可以参看<a href=\"https://pages.github.com/\">github page网站</a></li>\n<li>hexo:一个node.js的框架，使用npm进行安装和配置，能够快速的搭建静态博客。主要特点是搭建快速、支持markdown编辑、一键部署、本地预览。</li>\n<li>使用github page+hexo主要是考虑到能够快速搭建、维护方便、技术栈匹配。</li>\n</ul>\n<p>下面来说具体的搭建步骤，这里使用<strong>MAC的开发环境</strong>：</p>\n<ul>\n<li>配置github repo：<ul>\n<li>新建一个username.github.io的仓库，注意一定要使用自己的<strong>github用户名</strong></li>\n<li>设置ssh key：参见<a href=\"https://help.github.com/articles/generating-an-ssh-key/\">github ssh教程</a></li>\n<li>这里需要说明的是：github page默认使用的是<strong>master分支</strong>，在master分支中的<strong>index.html</strong>文件会被解析并且作为网页的入口。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>安装Hexo命令行工具hexo-cli<ul>\n<li>参考<a href=\"https://hexo.io/docs/index.html\">官方教程</a></li>\n<li>安装git、Node.js等工具</li>\n<li>安装hexo-cli命令行工具：npm install -g hexo-cli<ul>\n<li>hexo-cli是hexo的命令行工具，用于执行hexo init</li>\n</ul>\n</li>\n<li>Setup Hexo:<ul>\n<li>命令行为：hexo init <folder></li>\n<li>使用hexo的模板生成项目，下面几个文件比较重要：<ul>\n<li>package.json: Node js用于指定依赖包的配置文件，在不清楚的情况下，不要随意修改。</li>\n<li>_config.yml: hexo的配置文件，可以设置网站title、主题、字体、制定域名等。</li>\n<li>source: Blog的源文件目录，使用hexo new生成的md文件存放在这个目录中。</li>\n<li>scaffolds：模板文件，hexo new使用它来生成新的模板md。</li>\n<li>themes：主题目录，设置网站版式。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>写Blog：<ul>\n<li>hexo new post_title：生成新的模板文件。</li>\n<li>注意：这里使用hexo命令和上面的hexo init不是同一个命令，这个hexo是在setup过程中下载的npm包，<strong>需要在Blog这个目录中使用才有效。</strong></li>\n<li>生成的文件在source/_post目录中，使用markdown编辑器来写博客。</li>\n</ul>\n</li>\n<li>本机调试：<ul>\n<li>在写blog的过程中，可以直接在本机进行预览：hexo serve</li>\n<li>默认使用4000端口，还可以<a href=\"https://hexo.io/docs/server.html#Custom-IP\">设置其他的端口</a></li>\n</ul>\n</li>\n<li>生成Blog文件：<ul>\n<li>生成编译后的blog：hexo generate</li>\n<li>生成后的文件存放在public目录中</li>\n<li>也可以使用下面的命令直接完成发布: hexo generate —deploy</li>\n</ul>\n</li>\n<li>发布blog：<ul>\n<li>使用hexo deploy完成发布</li>\n<li>第一次发布之前，需要修改_config.yml文件，参见：<a href=\"https://hexo.io/docs/deployment.html#Git\">hexo deploy</a></li>\n</ul>\n</li>\n<li>最后要说下Troubleshooting和需要注意的地方:<ul>\n<li>hexo new不起作用<ul>\n<li>我们需要另外开一个branch来进行blog的写作（如source分支），然后使用hexo deploy到master分支上面。在不同的分支进行切换的时候，由于.gitignore文件不一样，导致我们可能在master分支上面删除了一些source分支上面重要的文件，如node_modules目录，则需要我们在切换到source分支的时候，重新下载npm包：npm i</li>\n</ul>\n</li>\n<li>hexo deploy失败<ul>\n<li>需要安装hexo-deployer-git包，参考 <a href=\"https://hexo.io/docs/deployment.html#Git\">hexo deploy</a></li>\n</ul>\n</li>\n<li>master分支的使用方法<ul>\n<li>master分支上面<strong>不要放文件</strong>，这个分支在使用hexo deploy之后自动更新，所以会覆盖我们自己的文件。</li>\n</ul>\n</li>\n<li>使用source分支来进行写作<ul>\n<li>上面提高了不能使用master分支，那么就需要我们使用别的分支来进行hexo的搭建和写作，我个人使用source分支，当然你也可以取一个自己喜欢的名字。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}