{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/leancloud.memo","path":"leancloud.memo","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/about/index/about.jpg","path":"about/index/about.jpg","modified":0,"renderable":0},{"_id":"source/images/http3-overview/HTTP2vsHTTP3.png","path":"images/http3-overview/HTTP2vsHTTP3.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"c7b01951c10675449dce4986f1cd5ec1be213e6d","modified":1649140097887},{"_id":"source/leancloud.memo","hash":"a3879051cc55f526f4f4de8e4fe8c510902731e1","modified":1659760188718},{"_id":"source/CNAME","hash":"66edeb7095877978bb2cb6244a8b141dcb8e54b0","modified":1649166370908},{"_id":"source/_data/hexo-leancloud-counter-security-fix.js","hash":"4a71ded39cbe2bd6214403723d8b0cb4a5c64203","modified":1649166370908},{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题.md","hash":"d00d9e5ceaa12a1e91a99d387d333163dded7b7c","modified":1649166370908},{"_id":"source/_posts/.DS_Store","hash":"48ccd32839b7d608598974e6950d4e8d14ec37f9","modified":1655901239469},{"_id":"source/about/index.md","hash":"5c81e4424249246b70440f3f50f9f7dfc793e916","modified":1649166370925},{"_id":"source/_posts/Swift-与-OC-混编小技巧.md","hash":"704e1543f59d85b16a285b12f3191ed1b3605098","modified":1649166370910},{"_id":"source/_posts/Xcode-10-beta-版本迁移指南.md","hash":"b9da595b19fdde31a1e65a35b5017679c2d028f1","modified":1649166370918},{"_id":"source/_posts/Xcode问题锦集.md","hash":"a877c13ab6430aa5c3909ec1760ff0f34b5f39cc","modified":1649166370918},{"_id":"source/_posts/git常用手册.md","hash":"77acbec69c4fd8f517724a03ddbe4f69374796b7","modified":1649166370918},{"_id":"source/_posts/iOS-ReactNative私有库指南.md","hash":"4ee7e3510af06f9e052ea33ce391c357c6150b3f","modified":1649166370919},{"_id":"source/_posts/iOS-网络安全之SSL-Pinning.md","hash":"a90439a52b78e3d8b66a1a5d7c4b656afd4b816f","modified":1649166370921},{"_id":"source/_posts/iOS多线程开发笔记.md","hash":"3bc1bcff13ffc23140884aa69d8c3629359d153d","modified":1649166370921},{"_id":"source/_posts/关于HTTP-3-的那些事.md","hash":"821875f91aaa9223a6e12c515e570d47fbf51f06","modified":1659762026854},{"_id":"source/_posts/使用hexo-github-page搭建个人博客.md","hash":"1c497e6625fb233e12930280642614f7fddcfd43","modified":1649166370925},{"_id":"source/images/.DS_Store","hash":"f19643761217259a2dcd89d4f08f6c8cc98fed14","modified":1659759721664},{"_id":"source/_posts/《人生战术本》- 里弗斯教练帮助他人“成为更好的人”.md","hash":"e834eef6529eb0b12f14e3c5ec7b9a3dafc1bdbd","modified":1659171236814},{"_id":"source/tags/index.md","hash":"9213ab3eeb261e9474694b6890c3b0d7e91ba0ea","modified":1649166370929},{"_id":"source/_posts/关于HTTP-2-的那些事.md","hash":"0cfa7b670cf4e14bc2d2fc8eebd2eec3646f87dc","modified":1649427367098},{"_id":"source/categories/index.md","hash":"baf6940fe06732c4ad01162e39f72ca1542cd76a","modified":1649166370927},{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题/xcode编译脚本.png","hash":"a24f4bdddecb046cc52f00353f576fab3ec93a08","modified":1649166370910},{"_id":"source/_posts/Swift-与-OC-混编小技巧/1-2.jpg","hash":"1e1a40a332ff12b69aab3b6e3806dc175096ead7","modified":1649166370912},{"_id":"source/_posts/iOS-ReactNative私有库指南/Folly-error.png","hash":"e09723201336c810b50361e5ea9003a7fbf49cfc","modified":1649166370919},{"_id":"source/_posts/iOS-ReactNative私有库指南/schedule-error.png","hash":"e7299dbda9de438b10b08df73f6ae92d72f09bec","modified":1649166370919},{"_id":"source/_posts/关于HTTP-3-的那些事/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1659756804356},{"_id":"source/_posts/关于HTTP-3-的那些事/HTTP2-RTT.png","hash":"1579a8397e41f59eb888116c30836d58b748d0e2","modified":1659755375513},{"_id":"source/_posts/关于HTTP-3-的那些事/HTTP3-layout.png","hash":"7f335a6a8d4882cb7c8e9df4121281b49bc6766c","modified":1659755290488},{"_id":"source/_posts/关于HTTP-3-的那些事/HTTP3-RTT.png","hash":"6608a04d034ed517adee5e5b5c4f1111cc13d66b","modified":1659755389722},{"_id":"source/images/http3-overview/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1659760112067},{"_id":"source/_posts/Swift-与-OC-混编小技巧/1-4.jpg","hash":"d284d21052e998fcd7131c8c80bd8ffbae6a04b8","modified":1649166370913},{"_id":"source/images/avatar.png","hash":"906a4d55cb83de145bb3b93919f60fa1a23ad40e","modified":1649166370927},{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题/PR 代码.png","hash":"3c3856f9ed5da8f086261f5cbb7a334e8a8ceceb","modified":1649166370909},{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题/pod check失败.png","hash":"94361f3d548b22f394720b93b10028545e67d91d","modified":1649166370909},{"_id":"source/_posts/Swift-与-OC-混编小技巧/2-1.jpg","hash":"7e19fdf921806c0d7316b3805dea2f793966f048","modified":1649166370913},{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题/podfile.lock冲突.png","hash":"6cd42dfc40d0891669d91397bcdf634abf50a24a","modified":1649166370909},{"_id":"source/_posts/Swift-与-OC-混编小技巧/1-3.jpg","hash":"ab75eb468e151df45f1acba034d397ddc4e94201","modified":1649166370912},{"_id":"source/_posts/Swift-与-OC-混编小技巧/2-2.jpg","hash":"f9ed4e23edea49136a670a9e36a21b37c8f98f8d","modified":1649166370914},{"_id":"source/_posts/Swift-与-OC-混编小技巧/2-4.jpg","hash":"f5a6f1dee7100b615ee9c872783f5d9aec462796","modified":1649166370915},{"_id":"source/_posts/关于HTTP-2-的那些事/HTTP2-overview.png","hash":"e69803fda5817e77eb5bd51333199cda2ca6dfbb","modified":1649427159769},{"_id":"source/_posts/Swift-与-OC-混编小技巧/3-1.jpg","hash":"5094b32061cf3d2f061bc1e630601a84888f590a","modified":1649166370916},{"_id":"source/_posts/Swift-与-OC-混编小技巧/1-1.jpg","hash":"fba535825c73786818367e57db00728f880d93dc","modified":1649166370911},{"_id":"source/_posts/Swift-与-OC-混编小技巧/2-3.jpg","hash":"2446606321acdb002199b8c58a86ad9d770cf933","modified":1649166370914},{"_id":"source/_posts/关于HTTP-3-的那些事/HTTP3-overview.png","hash":"1ed44393e8314b80038974eaf1516686faebdef2","modified":1659755328718},{"_id":"source/images/http3-overview/HTTP2vsHTTP3.png","hash":"cb034fcfd0d8596c431ead204e7894bbdab4a65f","modified":1659755232774},{"_id":"source/_posts/Swift-与-OC-混编小技巧/3-2.jpg","hash":"83c3d92a3b50ccad2194a9e83406cda073c1e882","modified":1649166370918},{"_id":"source/about/index/about.jpg","hash":"c9eee5ba90690376767a38d8d7586aa392bee2a0","modified":1649166370927},{"_id":"node_modules/hexo-theme-next/package.json","hash":"ae1de55975868db5984b565991dfe3caa3f8cf01","modified":1649133130568},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"cf97b8bcd78e6f8b6d22e470528ad2c27156c95d","modified":1649133130630},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1649133130570},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1649133130568},{"_id":"node_modules/hexo-theme-next/README.md","hash":"c8fab0d6caf50be68662a4f9b86b87bde3ae354b","modified":1649133130570},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1649133130569},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1649133130629},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"7ac5700b08830381131a212c8cda65d73375b438","modified":1649133130630},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1649133130570},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1649133130631},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1649133130630},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"b5e2a35eb6fff56b6e32ce479e63b6fc5e44d5cb","modified":1649133130630},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1649133130631},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1649133130631},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"b813da5aed9d73b809133db4dfb08f90ec56afd9","modified":1649133130631},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1649133130631},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1649133130631},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1649133130631},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"819c19eb9d142e5411f77cf3821d90f740ee114a","modified":1649133130631},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1649133130631},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1649133130631},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"8c2b6361f2de17561c1a3eede2bf47b4e2ba6ce5","modified":1649133130632},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1649133130632},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1649133130632},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1649133130632},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1649133130633},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":1649133130632},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1649133130634},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1649133130633},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1649133130634},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1649133130632},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1649133130634},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1649133130570},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1649133130571},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1649133130577},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1649133130574},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1649133130579},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"7d39204791687179576e22891a1a31766a089171","modified":1649133130570},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"3ce10d4cce94e3d4c482c2e18bb6f0f0ca380d3d","modified":1649133130528},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1649133130571},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"3d09c345d2e2ae2ab0fca10ff39b3b543b152c09","modified":1649133130570},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1649133130569},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1649133130529},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"3abdcb715562414063e0fb3eeb6244ce59c477e0","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"30e03a1d4828259f82d46e64cbfe2955b6cff9a9","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"72d4464cf01f8f34e524f26a1e9b1d063504e92d","modified":1649133130528},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1649133130528},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1649133130527},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"9a07f2d979fc8fe0c5e07d48304187b9b03ea7ff","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1649133130525},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1649133130525},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1649133130525},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1649133130528},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1649133130529},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1649133130529},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1649133130529},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1649133130529},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1649133130580},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1649133130568},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1649133130531},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1649133130570},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1649133130581},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1649133130581},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1649133130523},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1649133130582},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1649133130629},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1649133130526},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1649133130524},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1649133130526},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1649133130527},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1649133130629},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1649133130531},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1649133130567},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1649133130572},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1649133130572},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1649133130575},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1649133130577},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1649133130581},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1649133130572},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1649133130579},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1649133130574},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1649133130579},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1649133130576},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1649133130577},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1649133130580},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"434b3e76a040a816169e1929657e4176e7b8164c","modified":1649133130579},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1649133130582},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"32d31cb5a155681c19f5ad0bb56dcb08429f93ef","modified":1649133130584},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1649133130581},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1649133130574},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"c8b59b404f5d2a0b3b5cd1a6c9a10af5f30e43b5","modified":1649133130527},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1649133130528},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1649133130529},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1649133130531},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"0d94ac5daa95f99046d66160d9f0f34ee786736c","modified":1649133130568},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"7fa8701c86485b2fe7324e017101a32417902397","modified":1649133130525},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1649133130526},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1649133130527},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1649133130527},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1649133130527},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1649133130528},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1649133130529},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1649133130529},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1649133130568},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1649133130625},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1649133130625},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1649133130528},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1649133130574},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"0ba2bf0266f1fcb8edbd961869f8521b29685c56","modified":1649133130574},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1649133130578},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1649133130578},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1649133130578},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1649133130578},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"57eca76cfbbe9a65bc2a77f1deebf003ed335673","modified":1649133130578},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1649133130579},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1649133130571},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1649133130571},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1649133130576},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1649133130579},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1649133130580},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1649133130571},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1649133130574},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1649133130575},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1649133130571},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1649133130574},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1649133130575},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1649133130575},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1649133130580},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":1649133130580},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1649133130571},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1649133130572},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1649133130574},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1649133130574},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1649133130576},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1649133130574},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1649133130574},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1649133130572},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1649133130575},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1649133130574},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1649133130581},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1649133130572},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"45477a04cf2b3c077061c8c3ada216c1ae288e0e","modified":1649133130574},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1649133130572},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1649133130572},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1649133130573},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1649133130574},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1649133130575},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1649133130581},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1649133130571},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1649133130575},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1649133130571},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1649133130572},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1649133130574},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1649133130575},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1649133130576},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1649133130577},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1649133130622},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1649133130625},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1649133130625},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1649133130524},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1649133130625},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1649133130528},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":1649133130619},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1649133130528},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1649133130526},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1649133130528},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1649133130526},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1649133130528},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1649133130528},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1649133130527},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1649133130529},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1649133130531},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1649133130529},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1649133130529},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1649133130529},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1649133130568},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1649133130528},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1649133130529},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1649133130530},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1649133130584},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1649133130524},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1649133130582},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1649133130529},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1649133130583},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"be6cf377ae8f4a01ee76f9b3014e74161d4d5d17","modified":1649133130615},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1649133130584},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1649133130584},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1649133130624},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1649133130584},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1649133130618},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1649133130618},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1649133130624},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1649133130583},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1649133130584},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1649133130584},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1649133130618},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1649133130618},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1649133130624},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1649133130619},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1649133130624},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1649133130623},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1649133130627},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1649133130619},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1649133130621},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1649133130622},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1649133130624},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1649133130625},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1649133130625},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1649133130624},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1649133130625},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1649133130622},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1649133130621},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1649133130628},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1649133130623},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1649133130629},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1649133130627},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1649133130629},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1649133130623},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":1649133130626},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1649133130626},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1649133130626},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1649133130626},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1649133130627},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1649133130627},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1649133130627},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1649133130627},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1649133130622},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1649133130627},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1649133130623},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"979486a41a81f2a9fd8b0b87c4f87d6416c68c7d","modified":1649133130623},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1649133130625},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1649133130623},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1649133130627},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1649133130628},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1649133130622},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"f2328caa94645836e06fb39a6a9c9a84ed68a8b5","modified":1649133130624},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1649133130629},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1649133130623},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1649133130624},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1649133130620},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1649133130625},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1649133130625},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1649133130625},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1649133130628},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1649133130624},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1649133130623},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1649133130625},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1649133130623},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"650ed4ad6df1b6ff04647e7b6d568304e4d3ed2e","modified":1649133130623},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1649133130621},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1649133130625},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":1649133130628},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1649133130628},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1649133130624},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1649133130628},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1649133130628},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1649133130628},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1649133130628},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1649133130628},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1649133130628},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1649133130628},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1649133130628},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1649133130628},{"_id":"source/_posts/iOS-ReactNative私有库指南/sourcetree.png","hash":"36ce36d2c2f1f3ade3fe9ad70b054fc0655da9a8","modified":1649166370920},{"_id":"node_modules/hexo-theme-next/source/images/avatar.png","hash":"906a4d55cb83de145bb3b93919f60fa1a23ad40e","modified":1540051159000},{"_id":"source/_posts/《人生战术本》- 里弗斯教练帮助他人“成为更好的人”/the-playbook.png","hash":"06198805cb173b5e37a7d092e5c812860651b525","modified":1649166370924},{"_id":"public/search.xml","hash":"271786c203dde67782802784eee9c0c1be95ee6c","modified":1659762033318},{"_id":"public/atom.xml","hash":"2c23f8034cdc78f6776eda08f86bd20eda0c40e8","modified":1659762033318},{"_id":"public/leancloud_counter_security_urls.json","hash":"df58c954aac39e394018ae86918004015697b714","modified":1659761686725},{"_id":"public/about/index.html","hash":"7b39c64c35eac5549124357f5d4c364ab9def7cc","modified":1659761686725},{"_id":"public/categories/index.html","hash":"815633dba52b339803f5638a33de84914d72067b","modified":1659761686725},{"_id":"public/tags/index.html","hash":"cf375d7d3fc8914c3fc517acd010ef366f720230","modified":1659761686725},{"_id":"public/categories/开发/ReactNative/index.html","hash":"570e726638182298011158f7bc97cd8612c24fde","modified":1659761686725},{"_id":"public/categories/分享/index.html","hash":"787e49d0c49a0f87d4a87912b93f5167b43524e2","modified":1659761686725},{"_id":"public/archives/page/2/index.html","hash":"e6564ee61fd5543e6d8ca904bcb4afc90005abaf","modified":1659761686725},{"_id":"public/archives/2016/index.html","hash":"355ce2260a1b3b1b4b529042c990c157ba1144cb","modified":1659761686725},{"_id":"public/archives/2016/11/index.html","hash":"7a0dadf19ea68d9b590256bfd756a36833ab9ea5","modified":1659761686725},{"_id":"public/archives/2016/12/index.html","hash":"d57e314c54983b58ff7f65b79b2706e2483333c6","modified":1659761686725},{"_id":"public/archives/2017/index.html","hash":"ce5c04e6da08297aa1eaea4cc8f5d788484c6b98","modified":1659761686725},{"_id":"public/archives/2017/01/index.html","hash":"5b91b602ef7dec3a8fb6c0980a3d5e97a3ea27a7","modified":1659761686725},{"_id":"public/archives/2017/08/index.html","hash":"fe5f6cdffb9c8cdb0e60158bd2c4e7443efbe1ed","modified":1659761686725},{"_id":"public/archives/2018/index.html","hash":"1dd07bc50821dc0322b7234a461eb5c36280057f","modified":1659761686725},{"_id":"public/archives/2018/01/index.html","hash":"b9762dc051db2f7a8dbf7512d3f319e964de64e6","modified":1659761686725},{"_id":"public/archives/2018/06/index.html","hash":"8d0e9e189752bb0e288d1fe95a125872fc9b0546","modified":1659761686725},{"_id":"public/archives/2018/10/index.html","hash":"601f2ccfd9ae8cee86ac1e8fe222654f39f36e42","modified":1659761686725},{"_id":"public/archives/2022/index.html","hash":"0da845bab61f8b1e2e6a08b72f48bc179ecc35c7","modified":1659761686725},{"_id":"public/archives/2022/04/index.html","hash":"5f1d70c88b09f69822570ec2cc5a5ecd8a1de91a","modified":1659761686725},{"_id":"public/archives/2022/08/index.html","hash":"1a1a219409a53d513649487d8a809d8f7a55742f","modified":1659761686725},{"_id":"public/tags/iOS/index.html","hash":"2739ced1ef92be6f950ecc6c1ce6647e50b78572","modified":1659761686725},{"_id":"public/tags/cocoapods/index.html","hash":"5c0d3794b018250e7e6584cfa272fedd279503d9","modified":1659761686725},{"_id":"public/tags/git/index.html","hash":"63e9689511f077cfdab1421d5e436d8d5e3fb243","modified":1659761686725},{"_id":"public/tags/ReactNative/index.html","hash":"ba03a195d66f3acba2b11fbeec7983fc98a1e35b","modified":1659761686725},{"_id":"public/tags/多线程/index.html","hash":"a81643baa19e10b7eb64dc51d92ecc019c1bc24c","modified":1659761686725},{"_id":"public/tags/分享/index.html","hash":"14204910a59dd0b27a18f6c69c8c9a53317b49b3","modified":1659761686725},{"_id":"public/tags/网络编程/index.html","hash":"e48a81bbbf4f62412a0659cc5de35bfe7f0f29b2","modified":1659761686725},{"_id":"public/tags/hexo/index.html","hash":"837df59bafaf9461f808079630e8d309765181b7","modified":1659761686725},{"_id":"public/images/http3-overview/thumbnail-HTTP2vsHTTP3.png","hash":"c047711891dff6dfe287d0908334f15b639d1ced","modified":1659761686725},{"_id":"public/images/http3-overview/huge-HTTP2vsHTTP3.png","hash":"28d3834a18d0e0b79ae0b2ad03694fe92c1b366d","modified":1659761686725},{"_id":"public/posts/http3-overview/index.html","hash":"366f3e578b219c9204224a94b51ec15b7b26748f","modified":1659762033318},{"_id":"public/posts/http2-overview/index.html","hash":"7a8cd486ceae76c51b531ed5763824d73b19c834","modified":1659761686725},{"_id":"public/posts/the-palybook/index.html","hash":"f1192843dc4af16364327d943d746a47ec34ed03","modified":1659761686725},{"_id":"public/posts/react-native-private-repo/index.html","hash":"9f7aa6d1b63c185d4b203c1aa2426b715dbdce8b","modified":1659761686725},{"_id":"public/posts/xcode-10-migrate/index.html","hash":"6c6087eab3f1835e2c6a5c8959078372d32a3074","modified":1659761686725},{"_id":"public/posts/podfile_lock_conflict/index.html","hash":"b2bf4dc96111014a6f4608cc4f7ac6a510500267","modified":1659761686725},{"_id":"public/posts/xcode-tips/index.html","hash":"2d216e7f8e7782707b81688a2bbf2534930731f7","modified":1659761686725},{"_id":"public/posts/swift-oc-mix/index.html","hash":"19986863b057e7c9c65526261bef1349d0a0df43","modified":1659761686725},{"_id":"public/posts/ios-ssl-pinning/index.html","hash":"26ee1ca482fc9e14c1e3c7197a9686096c147898","modified":1659761686725},{"_id":"public/posts/ios-thread-tips/index.html","hash":"e2c83d5875682119d606026588e8a42c5f008fdc","modified":1659761686725},{"_id":"public/posts/hexo_build/index.html","hash":"29d4c3d30235c7d9ef294df047ff11bef9112f08","modified":1659761686725},{"_id":"public/posts/git_manual/index.html","hash":"8d6a9ea621a88ecc3e779660ad345fa6feb5233d","modified":1659761686725},{"_id":"public/categories/开发/index.html","hash":"1c07cc0c0bbc56625720cf32483c43a3357467bd","modified":1659761686725},{"_id":"public/archives/index.html","hash":"190c4a99ea5c3204044405c275509b9b3cc2ee39","modified":1659761686725},{"_id":"public/index.html","hash":"11afc3abe3f2d5067305ea09ec45bd02c6f02ea4","modified":1659762033318},{"_id":"public/page/2/index.html","hash":"166cc6c5c721d914a8bb21e191b089e45198025d","modified":1659761686725},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1659761686725},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1659761686725},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1659761686725},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1659761686725},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1659761686725},{"_id":"public/leancloud.memo","hash":"a3879051cc55f526f4f4de8e4fe8c510902731e1","modified":1659761686725},{"_id":"public/CNAME","hash":"66edeb7095877978bb2cb6244a8b141dcb8e54b0","modified":1659761686725},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1659761686725},{"_id":"public/posts/podfile_lock_conflict/xcode编译脚本.png","hash":"a24f4bdddecb046cc52f00353f576fab3ec93a08","modified":1659761686725},{"_id":"public/posts/swift-oc-mix/1-2.jpg","hash":"1e1a40a332ff12b69aab3b6e3806dc175096ead7","modified":1659761686725},{"_id":"public/posts/swift-oc-mix/1-4.jpg","hash":"d284d21052e998fcd7131c8c80bd8ffbae6a04b8","modified":1659761686725},{"_id":"public/posts/react-native-private-repo/Folly-error.png","hash":"e09723201336c810b50361e5ea9003a7fbf49cfc","modified":1659761686725},{"_id":"public/posts/react-native-private-repo/schedule-error.png","hash":"e7299dbda9de438b10b08df73f6ae92d72f09bec","modified":1659761686725},{"_id":"public/posts/http3-overview/HTTP3-layout.png","hash":"7f335a6a8d4882cb7c8e9df4121281b49bc6766c","modified":1659761686725},{"_id":"public/posts/http3-overview/HTTP3-RTT.png","hash":"6608a04d034ed517adee5e5b5c4f1111cc13d66b","modified":1659761686725},{"_id":"public/posts/http3-overview/HTTP2-RTT.png","hash":"1579a8397e41f59eb888116c30836d58b748d0e2","modified":1659761686725},{"_id":"public/images/avatar.png","hash":"906a4d55cb83de145bb3b93919f60fa1a23ad40e","modified":1659761686725},{"_id":"public/posts/podfile_lock_conflict/PR 代码.png","hash":"3c3856f9ed5da8f086261f5cbb7a334e8a8ceceb","modified":1659761686725},{"_id":"public/posts/podfile_lock_conflict/podfile.lock冲突.png","hash":"6cd42dfc40d0891669d91397bcdf634abf50a24a","modified":1659761686725},{"_id":"public/posts/podfile_lock_conflict/pod check失败.png","hash":"94361f3d548b22f394720b93b10028545e67d91d","modified":1659761686725},{"_id":"public/posts/swift-oc-mix/2-1.jpg","hash":"7e19fdf921806c0d7316b3805dea2f793966f048","modified":1659761686725},{"_id":"public/posts/swift-oc-mix/2-2.jpg","hash":"f9ed4e23edea49136a670a9e36a21b37c8f98f8d","modified":1659761686725},{"_id":"public/posts/swift-oc-mix/2-4.jpg","hash":"f5a6f1dee7100b615ee9c872783f5d9aec462796","modified":1659761686725},{"_id":"public/posts/swift-oc-mix/3-1.jpg","hash":"5094b32061cf3d2f061bc1e630601a84888f590a","modified":1659761686725},{"_id":"public/posts/swift-oc-mix/1-3.jpg","hash":"ab75eb468e151df45f1acba034d397ddc4e94201","modified":1659761686725},{"_id":"public/posts/http2-overview/HTTP2-overview.png","hash":"e69803fda5817e77eb5bd51333199cda2ca6dfbb","modified":1659761686725},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1659761686725},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1659761686725},{"_id":"public/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1659761686725},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1659761686725},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1659761686725},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1659761686725},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1659761686725},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1659761686725},{"_id":"public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1659761686725},{"_id":"public/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1659761686725},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1659761686725},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1659761686725},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1659761686725},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1659761686725},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1659761686725},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1659761686725},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1659761686725},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1659761686725},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1659761686725},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1659761686725},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1659761686725},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1659761686725},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1659761686725},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1659761686725},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1659761686725},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1659761686725},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1659761686725},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1659761686725},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1659761686725},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1659761686725},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1659761686725},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1659761686725},{"_id":"public/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1659761686725},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1659761686725},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1659761686725},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1659761686725},{"_id":"public/css/main.css","hash":"863ab430c260108b0aaaa265c27f50eeeb42effa","modified":1659761686725},{"_id":"public/images/http3-overview/HTTP2vsHTTP3.png","hash":"cb034fcfd0d8596c431ead204e7894bbdab4a65f","modified":1659761686725},{"_id":"public/posts/swift-oc-mix/1-1.jpg","hash":"fba535825c73786818367e57db00728f880d93dc","modified":1659761686725},{"_id":"public/posts/swift-oc-mix/2-3.jpg","hash":"2446606321acdb002199b8c58a86ad9d770cf933","modified":1659761686725},{"_id":"public/posts/http3-overview/HTTP3-overview.png","hash":"1ed44393e8314b80038974eaf1516686faebdef2","modified":1659761686725},{"_id":"public/posts/swift-oc-mix/3-2.jpg","hash":"83c3d92a3b50ccad2194a9e83406cda073c1e882","modified":1659761686725},{"_id":"public/about/index/about.jpg","hash":"c9eee5ba90690376767a38d8d7586aa392bee2a0","modified":1659761686725},{"_id":"public/posts/react-native-private-repo/sourcetree.png","hash":"36ce36d2c2f1f3ade3fe9ad70b054fc0655da9a8","modified":1659761686725},{"_id":"public/posts/the-palybook/the-playbook.png","hash":"06198805cb173b5e37a7d092e5c812860651b525","modified":1659761686725}],"Category":[{"name":"开发","_id":"cl6hf968i0004x6u05gcs78j7"},{"name":"ReactNative","parent":"cl6hf968i0004x6u05gcs78j7","_id":"cl6hf968l000kx6u04wd33g1z"},{"name":"分享","_id":"cl6hf968n0012x6u0adype4nx"}],"Data":[{"_id":"hexo-leancloud-counter-security-fix","data":"/* global hexo */\n\n'use strict';\n\nconst AV = require('leancloud-storage');\nconst readlineSync = require('readline-sync');\nconst packageInfo = require('./package.json');\nconst pathFn = require('path');\nconst fs = require('fs');\n\nfunction generate_post_list(locals) {\n    let { config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    var urlsPath = 'leancloud_counter_security_urls.json';\n    var urls = [...locals.posts.toArray()]\n        .filter(x => x.published)\n        .map(x => {\n            return {\n                title: x.title,\n                url  : config.root + x.path\n            };\n        });\n    return {\n        path: urlsPath,\n        data: JSON.stringify(urls)\n    };\n}\n\nhexo.extend.generator.register('leancloud_counter_security_generator', generate_post_list);\n\nfunction cmp(x, y) {\n    if (x.url < y.url) {\n        return -1;\n    } else if (x.url === y.url) {\n        return 0;\n    }\n    return 1;\n}\n\nfunction postOperation(env, cnt, limit, newData, memoData, log) {\n    if (cnt !== limit) return;\n\n    newData.sort(cmp);\n    var sourceDir = env.source_dir;\n    var publicDir = env.public_dir;\n    var memoFile = pathFn.join(sourceDir, 'leancloud.memo');\n    fs.writeFileSync(memoFile, '[\\n');\n\n    var memoIdx = 1;\n    for (var i = 0; newData[i]; i++) {\n        while (memoData[memoIdx] !== ']') {\n            var y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > newData[i].url) break;\n\n            fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n            memoIdx++;\n        }\n        fs.writeFileSync(memoFile, '{\"title\":\"' + newData[i].title + '\",\"url\":\"' + newData[i].url + '\"},\\n', { flag: 'a' });\n    }\n    while (memoData[memoIdx] !== ']') {\n        fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n        memoIdx++;\n    }\n    fs.writeFileSync(memoFile, memoData[memoIdx], { flag: 'a' });\n\n    var srcFile = pathFn.join(sourceDir, 'leancloud.memo');\n    var destFile = pathFn.join(publicDir, 'leancloud.memo');\n    var readStream = fs.createReadStream(srcFile);\n    var writeStream = fs.createWriteStream(destFile);\n    readStream.pipe(writeStream);\n    log.info('leancloud.memo successfully updated.');\n}\n\nasync function sync() {\n    let { log, config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    let { app_id, app_key, server_url } = config.leancloud_counter_security;\n    var publicDir = this.public_dir;\n    var UrlsFile = pathFn.join(publicDir, 'leancloud_counter_security_urls.json');\n    var urls = JSON.parse(fs.readFileSync(UrlsFile, 'utf8'));\n\n    AV.init({\n        appId    : app_id,\n        appKey   : app_key,\n        serverURL: server_url\n    });\n\n    var currentUser = AV.User.current();\n    if (!currentUser) {\n        var userName = config.leancloud_counter_security.username;\n        var passWord = config.leancloud_counter_security.password;\n        if (!userName) {\n            userName = readlineSync.question('Enter your username: ');\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        } else if (!passWord) {\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        }\n        await AV.User.logIn(userName, passWord).then(loginedUser => {\n            log.info('Logined as: ' + loginedUser.getUsername());\n        }, error => {\n            log.error(error);\n        });\n    }\n\n    log.info('Now syncing your posts list to leancloud counter...');\n    var Counter = AV.Object.extend('Counter');\n    var memoFile = pathFn.join(publicDir, 'leancloud.memo');\n    if (!fs.existsSync(memoFile)) {\n        fs.writeFileSync(memoFile, '[\\n]');\n    }\n    var memoData = fs.readFileSync(memoFile, 'utf-8').split('\\n');\n    var memoIdx = 1;\n    var newData = [];\n    var cnt = 0;\n    var limit = 0;\n    var env = this;\n    urls.sort(cmp).forEach(x => {\n        var y = {};\n        y.title = '';\n        y.url = '';\n        var flag = false;\n        while (memoData[memoIdx] !== ']') {\n            y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > x.url) break;\n            if (y.url === x.url && y.title === x.title) {\n                flag = true;\n                break;\n            }\n            memoIdx++;\n        }\n        if (flag) return;\n\n        log.info('Dealing with record of ' + x.title);\n        limit++;\n        var query = new AV.Query('Counter');\n        query.equalTo('url', x.url);\n        query.count().then(count => {\n            if (count === 0) {\n                var counter = new Counter();\n                counter.set('url', x.url);\n                counter.set('title', x.title);\n                counter.set('time', 0);\n                counter.save().then(obj => {\n                    log.info(x.title + ' is saved as: ' + obj.id);\n                    newData.push(x);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                }, error => {\n                    log.error(error);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                });\n            } else {\n                newData.push(x);\n                cnt++;\n                postOperation(env, cnt, limit, newData, memoData, log);\n            }\n        }, error => {\n            log.error(error);\n            cnt++;\n            postOperation(env, cnt, limit, newData, memoData, log);\n        });\n    });\n}\n\nhexo.extend.deployer.register('leancloud_counter_security_sync', sync);\n\nvar commandOptions = {\n    desc     : packageInfo.description,\n    usage    : ' <argument>',\n    arguments: [\n        {\n            name: 'register | r <username> <password>',\n            desc: 'Register a new user.'\n        }\n    ]\n};\n\nfunction commandFunc(args) {\n    let { log, config } = this;\n\n    if (args._.length !== 3) {\n        log.error('Too Few or Many Arguments.');\n    } else if (args._[0] === 'register' || args._[0] === 'r') {\n        let { app_id, app_key, server_url } = config.leancloud_counter_security;\n        AV.init({\n            appId    : app_id,\n            appKey   : app_key,\n            serverURL: server_url\n        });\n\n        var user = new AV.User();\n        user.setUsername(String(args._[1]));\n        user.setPassword(String(args._[2]));\n        user.signUp().then(loginedUser => {\n            log.info(loginedUser.getUsername() + ' is successfully signed up');\n        }, error => {\n            log.error(error);\n        });\n    } else {\n        log.error('Unknown Command.');\n    }\n}\n\nhexo.extend.console.register('lc-counter', 'hexo-leancloud-counter-security', commandOptions, commandFunc);\n"}],"Page":[{"title":"简介","date":"2017-08-12T14:04:39.000Z","_content":"\n## [Who am I]{% asset_img about.jpg %}\n\n目前就职于字节飞书团队，担任 iOS 团队 Leader，负责飞书文档iOS 端开发和团队管理工作。\n\n老东家有：\n\n- [Misfit](http://www.misfit.com/) - 来自硅谷的智能硬件创业公司，于2015年被 Fossil Group 以2.6亿美金收购。\n- [VTech](http://www.vtech.com/) - 香港最大的电子儿童玩具和电话设备制造商。\n\n主要作品有：\n\n- [Misfit Home App](https://itunes.apple.com/us/app/misfit-home/id965264934?mt=8) - Misfit 智能灯泡 BOLT iOS App\n- [Misfit App](https://itunes.apple.com/us/app/misfit/id564157241?mt=8) - Misfit 智能手环 iOS App\n- [Learning Lodge](http://www.vtechda.com/downloadpage/) - 儿童学习系统客户端(C/S 架构，支持 PC 和 MAC 双平台)\n\n目前飞书深圳团队招聘中，感兴趣的童鞋可以发送简历到[zenghao.howie@bytedance.com]或者加微信[tel: 15625261320]\n\niOS 职位：https://job.toutiao.com/s/Nx12FCw\nAndroid 职位：https://job.toutiao.com/s/Nx1MJAA\n前端职位：https://job.toutiao.com/s/N9ofyju\n后端职位：https://job.toutiao.com/s/Nx1DXTR","source":"about/index.md","raw":"---\ntitle: 简介\ndate: 2017-08-12 22:04:39\n---\n\n## [Who am I]{% asset_img about.jpg %}\n\n目前就职于字节飞书团队，担任 iOS 团队 Leader，负责飞书文档iOS 端开发和团队管理工作。\n\n老东家有：\n\n- [Misfit](http://www.misfit.com/) - 来自硅谷的智能硬件创业公司，于2015年被 Fossil Group 以2.6亿美金收购。\n- [VTech](http://www.vtech.com/) - 香港最大的电子儿童玩具和电话设备制造商。\n\n主要作品有：\n\n- [Misfit Home App](https://itunes.apple.com/us/app/misfit-home/id965264934?mt=8) - Misfit 智能灯泡 BOLT iOS App\n- [Misfit App](https://itunes.apple.com/us/app/misfit/id564157241?mt=8) - Misfit 智能手环 iOS App\n- [Learning Lodge](http://www.vtechda.com/downloadpage/) - 儿童学习系统客户端(C/S 架构，支持 PC 和 MAC 双平台)\n\n目前飞书深圳团队招聘中，感兴趣的童鞋可以发送简历到[zenghao.howie@bytedance.com]或者加微信[tel: 15625261320]\n\niOS 职位：https://job.toutiao.com/s/Nx12FCw\nAndroid 职位：https://job.toutiao.com/s/Nx1MJAA\n前端职位：https://job.toutiao.com/s/N9ofyju\n后端职位：https://job.toutiao.com/s/Nx1DXTR","updated":"2022-04-05T13:46:10.925Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl6hf968f0000x6u094y1db29","content":"<h2 id=\"Who-am-I\"><a href=\"#Who-am-I\" class=\"headerlink\" title=\"[Who am I]\"></a>[Who am I]</h2><p>目前就职于字节飞书团队，担任 iOS 团队 Leader，负责飞书文档iOS 端开发和团队管理工作。</p>\n<p>老东家有：</p>\n<ul>\n<li><a href=\"http://www.misfit.com/\">Misfit</a> - 来自硅谷的智能硬件创业公司，于2015年被 Fossil Group 以2.6亿美金收购。</li>\n<li><a href=\"http://www.vtech.com/\">VTech</a> - 香港最大的电子儿童玩具和电话设备制造商。</li>\n</ul>\n<p>主要作品有：</p>\n<ul>\n<li><a href=\"https://itunes.apple.com/us/app/misfit-home/id965264934?mt=8\">Misfit Home App</a> - Misfit 智能灯泡 BOLT iOS App</li>\n<li><a href=\"https://itunes.apple.com/us/app/misfit/id564157241?mt=8\">Misfit App</a> - Misfit 智能手环 iOS App</li>\n<li><a href=\"http://www.vtechda.com/downloadpage/\">Learning Lodge</a> - 儿童学习系统客户端(C&#x2F;S 架构，支持 PC 和 MAC 双平台)</li>\n</ul>\n<p>目前飞书深圳团队招聘中，感兴趣的童鞋可以发送简历到[<a href=\"mailto:&#x7a;&#101;&#x6e;&#103;&#104;&#97;&#x6f;&#46;&#x68;&#x6f;&#x77;&#x69;&#x65;&#x40;&#x62;&#x79;&#x74;&#x65;&#x64;&#x61;&#110;&#x63;&#101;&#x2e;&#x63;&#x6f;&#x6d;\">&#x7a;&#101;&#x6e;&#103;&#104;&#97;&#x6f;&#46;&#x68;&#x6f;&#x77;&#x69;&#x65;&#x40;&#x62;&#x79;&#x74;&#x65;&#x64;&#x61;&#110;&#x63;&#101;&#x2e;&#x63;&#x6f;&#x6d;</a>]或者加微信[tel: 15625261320]</p>\n<p>iOS 职位：<a href=\"https://job.toutiao.com/s/Nx12FCw\">https://job.toutiao.com/s/Nx12FCw</a><br>Android 职位：<a href=\"https://job.toutiao.com/s/Nx1MJAA\">https://job.toutiao.com/s/Nx1MJAA</a><br>前端职位：<a href=\"https://job.toutiao.com/s/N9ofyju\">https://job.toutiao.com/s/N9ofyju</a><br>后端职位：<a href=\"https://job.toutiao.com/s/Nx1DXTR\">https://job.toutiao.com/s/Nx1DXTR</a></p>\n","site":{"data":{"hexo-leancloud-counter-security-fix":"/* global hexo */\n\n'use strict';\n\nconst AV = require('leancloud-storage');\nconst readlineSync = require('readline-sync');\nconst packageInfo = require('./package.json');\nconst pathFn = require('path');\nconst fs = require('fs');\n\nfunction generate_post_list(locals) {\n    let { config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    var urlsPath = 'leancloud_counter_security_urls.json';\n    var urls = [...locals.posts.toArray()]\n        .filter(x => x.published)\n        .map(x => {\n            return {\n                title: x.title,\n                url  : config.root + x.path\n            };\n        });\n    return {\n        path: urlsPath,\n        data: JSON.stringify(urls)\n    };\n}\n\nhexo.extend.generator.register('leancloud_counter_security_generator', generate_post_list);\n\nfunction cmp(x, y) {\n    if (x.url < y.url) {\n        return -1;\n    } else if (x.url === y.url) {\n        return 0;\n    }\n    return 1;\n}\n\nfunction postOperation(env, cnt, limit, newData, memoData, log) {\n    if (cnt !== limit) return;\n\n    newData.sort(cmp);\n    var sourceDir = env.source_dir;\n    var publicDir = env.public_dir;\n    var memoFile = pathFn.join(sourceDir, 'leancloud.memo');\n    fs.writeFileSync(memoFile, '[\\n');\n\n    var memoIdx = 1;\n    for (var i = 0; newData[i]; i++) {\n        while (memoData[memoIdx] !== ']') {\n            var y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > newData[i].url) break;\n\n            fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n            memoIdx++;\n        }\n        fs.writeFileSync(memoFile, '{\"title\":\"' + newData[i].title + '\",\"url\":\"' + newData[i].url + '\"},\\n', { flag: 'a' });\n    }\n    while (memoData[memoIdx] !== ']') {\n        fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n        memoIdx++;\n    }\n    fs.writeFileSync(memoFile, memoData[memoIdx], { flag: 'a' });\n\n    var srcFile = pathFn.join(sourceDir, 'leancloud.memo');\n    var destFile = pathFn.join(publicDir, 'leancloud.memo');\n    var readStream = fs.createReadStream(srcFile);\n    var writeStream = fs.createWriteStream(destFile);\n    readStream.pipe(writeStream);\n    log.info('leancloud.memo successfully updated.');\n}\n\nasync function sync() {\n    let { log, config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    let { app_id, app_key, server_url } = config.leancloud_counter_security;\n    var publicDir = this.public_dir;\n    var UrlsFile = pathFn.join(publicDir, 'leancloud_counter_security_urls.json');\n    var urls = JSON.parse(fs.readFileSync(UrlsFile, 'utf8'));\n\n    AV.init({\n        appId    : app_id,\n        appKey   : app_key,\n        serverURL: server_url\n    });\n\n    var currentUser = AV.User.current();\n    if (!currentUser) {\n        var userName = config.leancloud_counter_security.username;\n        var passWord = config.leancloud_counter_security.password;\n        if (!userName) {\n            userName = readlineSync.question('Enter your username: ');\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        } else if (!passWord) {\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        }\n        await AV.User.logIn(userName, passWord).then(loginedUser => {\n            log.info('Logined as: ' + loginedUser.getUsername());\n        }, error => {\n            log.error(error);\n        });\n    }\n\n    log.info('Now syncing your posts list to leancloud counter...');\n    var Counter = AV.Object.extend('Counter');\n    var memoFile = pathFn.join(publicDir, 'leancloud.memo');\n    if (!fs.existsSync(memoFile)) {\n        fs.writeFileSync(memoFile, '[\\n]');\n    }\n    var memoData = fs.readFileSync(memoFile, 'utf-8').split('\\n');\n    var memoIdx = 1;\n    var newData = [];\n    var cnt = 0;\n    var limit = 0;\n    var env = this;\n    urls.sort(cmp).forEach(x => {\n        var y = {};\n        y.title = '';\n        y.url = '';\n        var flag = false;\n        while (memoData[memoIdx] !== ']') {\n            y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > x.url) break;\n            if (y.url === x.url && y.title === x.title) {\n                flag = true;\n                break;\n            }\n            memoIdx++;\n        }\n        if (flag) return;\n\n        log.info('Dealing with record of ' + x.title);\n        limit++;\n        var query = new AV.Query('Counter');\n        query.equalTo('url', x.url);\n        query.count().then(count => {\n            if (count === 0) {\n                var counter = new Counter();\n                counter.set('url', x.url);\n                counter.set('title', x.title);\n                counter.set('time', 0);\n                counter.save().then(obj => {\n                    log.info(x.title + ' is saved as: ' + obj.id);\n                    newData.push(x);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                }, error => {\n                    log.error(error);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                });\n            } else {\n                newData.push(x);\n                cnt++;\n                postOperation(env, cnt, limit, newData, memoData, log);\n            }\n        }, error => {\n            log.error(error);\n            cnt++;\n            postOperation(env, cnt, limit, newData, memoData, log);\n        });\n    });\n}\n\nhexo.extend.deployer.register('leancloud_counter_security_sync', sync);\n\nvar commandOptions = {\n    desc     : packageInfo.description,\n    usage    : ' <argument>',\n    arguments: [\n        {\n            name: 'register | r <username> <password>',\n            desc: 'Register a new user.'\n        }\n    ]\n};\n\nfunction commandFunc(args) {\n    let { log, config } = this;\n\n    if (args._.length !== 3) {\n        log.error('Too Few or Many Arguments.');\n    } else if (args._[0] === 'register' || args._[0] === 'r') {\n        let { app_id, app_key, server_url } = config.leancloud_counter_security;\n        AV.init({\n            appId    : app_id,\n            appKey   : app_key,\n            serverURL: server_url\n        });\n\n        var user = new AV.User();\n        user.setUsername(String(args._[1]));\n        user.setPassword(String(args._[2]));\n        user.signUp().then(loginedUser => {\n            log.info(loginedUser.getUsername() + ' is successfully signed up');\n        }, error => {\n            log.error(error);\n        });\n    } else {\n        log.error('Unknown Command.');\n    }\n}\n\nhexo.extend.console.register('lc-counter', 'hexo-leancloud-counter-security', commandOptions, commandFunc);\n"}},"length":614,"excerpt":"","more":"<h2 id=\"Who-am-I\"><a href=\"#Who-am-I\" class=\"headerlink\" title=\"[Who am I]\"></a>[Who am I]</h2><p>目前就职于字节飞书团队，担任 iOS 团队 Leader，负责飞书文档iOS 端开发和团队管理工作。</p>\n<p>老东家有：</p>\n<ul>\n<li><a href=\"http://www.misfit.com/\">Misfit</a> - 来自硅谷的智能硬件创业公司，于2015年被 Fossil Group 以2.6亿美金收购。</li>\n<li><a href=\"http://www.vtech.com/\">VTech</a> - 香港最大的电子儿童玩具和电话设备制造商。</li>\n</ul>\n<p>主要作品有：</p>\n<ul>\n<li><a href=\"https://itunes.apple.com/us/app/misfit-home/id965264934?mt=8\">Misfit Home App</a> - Misfit 智能灯泡 BOLT iOS App</li>\n<li><a href=\"https://itunes.apple.com/us/app/misfit/id564157241?mt=8\">Misfit App</a> - Misfit 智能手环 iOS App</li>\n<li><a href=\"http://www.vtechda.com/downloadpage/\">Learning Lodge</a> - 儿童学习系统客户端(C&#x2F;S 架构，支持 PC 和 MAC 双平台)</li>\n</ul>\n<p>目前飞书深圳团队招聘中，感兴趣的童鞋可以发送简历到[<a href=\"mailto:&#x7a;&#101;&#x6e;&#103;&#104;&#97;&#x6f;&#46;&#x68;&#x6f;&#x77;&#x69;&#x65;&#x40;&#x62;&#x79;&#x74;&#x65;&#x64;&#x61;&#110;&#x63;&#101;&#x2e;&#x63;&#x6f;&#x6d;\">&#x7a;&#101;&#x6e;&#103;&#104;&#97;&#x6f;&#46;&#x68;&#x6f;&#x77;&#x69;&#x65;&#x40;&#x62;&#x79;&#x74;&#x65;&#x64;&#x61;&#110;&#x63;&#101;&#x2e;&#x63;&#x6f;&#x6d;</a>]或者加微信[tel: 15625261320]</p>\n<p>iOS 职位：<a href=\"https://job.toutiao.com/s/Nx12FCw\">https://job.toutiao.com/s/Nx12FCw</a><br>Android 职位：<a href=\"https://job.toutiao.com/s/Nx1MJAA\">https://job.toutiao.com/s/Nx1MJAA</a><br>前端职位：<a href=\"https://job.toutiao.com/s/N9ofyju\">https://job.toutiao.com/s/N9ofyju</a><br>后端职位：<a href=\"https://job.toutiao.com/s/Nx1DXTR\">https://job.toutiao.com/s/Nx1DXTR</a></p>\n"},{"title":"categories","date":"2017-08-12T14:59:23.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-08-12 22:59:23\ntype: \"categories\"\n---\n","updated":"2022-04-05T13:46:10.927Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl6hf968h0002x6u0439oatna","content":"","site":{"data":{"hexo-leancloud-counter-security-fix":"/* global hexo */\n\n'use strict';\n\nconst AV = require('leancloud-storage');\nconst readlineSync = require('readline-sync');\nconst packageInfo = require('./package.json');\nconst pathFn = require('path');\nconst fs = require('fs');\n\nfunction generate_post_list(locals) {\n    let { config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    var urlsPath = 'leancloud_counter_security_urls.json';\n    var urls = [...locals.posts.toArray()]\n        .filter(x => x.published)\n        .map(x => {\n            return {\n                title: x.title,\n                url  : config.root + x.path\n            };\n        });\n    return {\n        path: urlsPath,\n        data: JSON.stringify(urls)\n    };\n}\n\nhexo.extend.generator.register('leancloud_counter_security_generator', generate_post_list);\n\nfunction cmp(x, y) {\n    if (x.url < y.url) {\n        return -1;\n    } else if (x.url === y.url) {\n        return 0;\n    }\n    return 1;\n}\n\nfunction postOperation(env, cnt, limit, newData, memoData, log) {\n    if (cnt !== limit) return;\n\n    newData.sort(cmp);\n    var sourceDir = env.source_dir;\n    var publicDir = env.public_dir;\n    var memoFile = pathFn.join(sourceDir, 'leancloud.memo');\n    fs.writeFileSync(memoFile, '[\\n');\n\n    var memoIdx = 1;\n    for (var i = 0; newData[i]; i++) {\n        while (memoData[memoIdx] !== ']') {\n            var y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > newData[i].url) break;\n\n            fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n            memoIdx++;\n        }\n        fs.writeFileSync(memoFile, '{\"title\":\"' + newData[i].title + '\",\"url\":\"' + newData[i].url + '\"},\\n', { flag: 'a' });\n    }\n    while (memoData[memoIdx] !== ']') {\n        fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n        memoIdx++;\n    }\n    fs.writeFileSync(memoFile, memoData[memoIdx], { flag: 'a' });\n\n    var srcFile = pathFn.join(sourceDir, 'leancloud.memo');\n    var destFile = pathFn.join(publicDir, 'leancloud.memo');\n    var readStream = fs.createReadStream(srcFile);\n    var writeStream = fs.createWriteStream(destFile);\n    readStream.pipe(writeStream);\n    log.info('leancloud.memo successfully updated.');\n}\n\nasync function sync() {\n    let { log, config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    let { app_id, app_key, server_url } = config.leancloud_counter_security;\n    var publicDir = this.public_dir;\n    var UrlsFile = pathFn.join(publicDir, 'leancloud_counter_security_urls.json');\n    var urls = JSON.parse(fs.readFileSync(UrlsFile, 'utf8'));\n\n    AV.init({\n        appId    : app_id,\n        appKey   : app_key,\n        serverURL: server_url\n    });\n\n    var currentUser = AV.User.current();\n    if (!currentUser) {\n        var userName = config.leancloud_counter_security.username;\n        var passWord = config.leancloud_counter_security.password;\n        if (!userName) {\n            userName = readlineSync.question('Enter your username: ');\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        } else if (!passWord) {\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        }\n        await AV.User.logIn(userName, passWord).then(loginedUser => {\n            log.info('Logined as: ' + loginedUser.getUsername());\n        }, error => {\n            log.error(error);\n        });\n    }\n\n    log.info('Now syncing your posts list to leancloud counter...');\n    var Counter = AV.Object.extend('Counter');\n    var memoFile = pathFn.join(publicDir, 'leancloud.memo');\n    if (!fs.existsSync(memoFile)) {\n        fs.writeFileSync(memoFile, '[\\n]');\n    }\n    var memoData = fs.readFileSync(memoFile, 'utf-8').split('\\n');\n    var memoIdx = 1;\n    var newData = [];\n    var cnt = 0;\n    var limit = 0;\n    var env = this;\n    urls.sort(cmp).forEach(x => {\n        var y = {};\n        y.title = '';\n        y.url = '';\n        var flag = false;\n        while (memoData[memoIdx] !== ']') {\n            y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > x.url) break;\n            if (y.url === x.url && y.title === x.title) {\n                flag = true;\n                break;\n            }\n            memoIdx++;\n        }\n        if (flag) return;\n\n        log.info('Dealing with record of ' + x.title);\n        limit++;\n        var query = new AV.Query('Counter');\n        query.equalTo('url', x.url);\n        query.count().then(count => {\n            if (count === 0) {\n                var counter = new Counter();\n                counter.set('url', x.url);\n                counter.set('title', x.title);\n                counter.set('time', 0);\n                counter.save().then(obj => {\n                    log.info(x.title + ' is saved as: ' + obj.id);\n                    newData.push(x);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                }, error => {\n                    log.error(error);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                });\n            } else {\n                newData.push(x);\n                cnt++;\n                postOperation(env, cnt, limit, newData, memoData, log);\n            }\n        }, error => {\n            log.error(error);\n            cnt++;\n            postOperation(env, cnt, limit, newData, memoData, log);\n        });\n    });\n}\n\nhexo.extend.deployer.register('leancloud_counter_security_sync', sync);\n\nvar commandOptions = {\n    desc     : packageInfo.description,\n    usage    : ' <argument>',\n    arguments: [\n        {\n            name: 'register | r <username> <password>',\n            desc: 'Register a new user.'\n        }\n    ]\n};\n\nfunction commandFunc(args) {\n    let { log, config } = this;\n\n    if (args._.length !== 3) {\n        log.error('Too Few or Many Arguments.');\n    } else if (args._[0] === 'register' || args._[0] === 'r') {\n        let { app_id, app_key, server_url } = config.leancloud_counter_security;\n        AV.init({\n            appId    : app_id,\n            appKey   : app_key,\n            serverURL: server_url\n        });\n\n        var user = new AV.User();\n        user.setUsername(String(args._[1]));\n        user.setPassword(String(args._[2]));\n        user.signUp().then(loginedUser => {\n            log.info(loginedUser.getUsername() + ' is successfully signed up');\n        }, error => {\n            log.error(error);\n        });\n    } else {\n        log.error('Unknown Command.');\n    }\n}\n\nhexo.extend.console.register('lc-counter', 'hexo-leancloud-counter-security', commandOptions, commandFunc);\n"}},"length":0,"excerpt":"","more":""},{"title":"tags","date":"2016-11-16T08:21:04.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-16 16:21:04\ntype: \"tags\"\ncomments: false\n---\n","updated":"2022-04-05T13:46:10.929Z","path":"tags/index.html","layout":"page","_id":"cl6hf968j0006x6u0dih01z3e","content":"","site":{"data":{"hexo-leancloud-counter-security-fix":"/* global hexo */\n\n'use strict';\n\nconst AV = require('leancloud-storage');\nconst readlineSync = require('readline-sync');\nconst packageInfo = require('./package.json');\nconst pathFn = require('path');\nconst fs = require('fs');\n\nfunction generate_post_list(locals) {\n    let { config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    var urlsPath = 'leancloud_counter_security_urls.json';\n    var urls = [...locals.posts.toArray()]\n        .filter(x => x.published)\n        .map(x => {\n            return {\n                title: x.title,\n                url  : config.root + x.path\n            };\n        });\n    return {\n        path: urlsPath,\n        data: JSON.stringify(urls)\n    };\n}\n\nhexo.extend.generator.register('leancloud_counter_security_generator', generate_post_list);\n\nfunction cmp(x, y) {\n    if (x.url < y.url) {\n        return -1;\n    } else if (x.url === y.url) {\n        return 0;\n    }\n    return 1;\n}\n\nfunction postOperation(env, cnt, limit, newData, memoData, log) {\n    if (cnt !== limit) return;\n\n    newData.sort(cmp);\n    var sourceDir = env.source_dir;\n    var publicDir = env.public_dir;\n    var memoFile = pathFn.join(sourceDir, 'leancloud.memo');\n    fs.writeFileSync(memoFile, '[\\n');\n\n    var memoIdx = 1;\n    for (var i = 0; newData[i]; i++) {\n        while (memoData[memoIdx] !== ']') {\n            var y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > newData[i].url) break;\n\n            fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n            memoIdx++;\n        }\n        fs.writeFileSync(memoFile, '{\"title\":\"' + newData[i].title + '\",\"url\":\"' + newData[i].url + '\"},\\n', { flag: 'a' });\n    }\n    while (memoData[memoIdx] !== ']') {\n        fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n        memoIdx++;\n    }\n    fs.writeFileSync(memoFile, memoData[memoIdx], { flag: 'a' });\n\n    var srcFile = pathFn.join(sourceDir, 'leancloud.memo');\n    var destFile = pathFn.join(publicDir, 'leancloud.memo');\n    var readStream = fs.createReadStream(srcFile);\n    var writeStream = fs.createWriteStream(destFile);\n    readStream.pipe(writeStream);\n    log.info('leancloud.memo successfully updated.');\n}\n\nasync function sync() {\n    let { log, config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    let { app_id, app_key, server_url } = config.leancloud_counter_security;\n    var publicDir = this.public_dir;\n    var UrlsFile = pathFn.join(publicDir, 'leancloud_counter_security_urls.json');\n    var urls = JSON.parse(fs.readFileSync(UrlsFile, 'utf8'));\n\n    AV.init({\n        appId    : app_id,\n        appKey   : app_key,\n        serverURL: server_url\n    });\n\n    var currentUser = AV.User.current();\n    if (!currentUser) {\n        var userName = config.leancloud_counter_security.username;\n        var passWord = config.leancloud_counter_security.password;\n        if (!userName) {\n            userName = readlineSync.question('Enter your username: ');\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        } else if (!passWord) {\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        }\n        await AV.User.logIn(userName, passWord).then(loginedUser => {\n            log.info('Logined as: ' + loginedUser.getUsername());\n        }, error => {\n            log.error(error);\n        });\n    }\n\n    log.info('Now syncing your posts list to leancloud counter...');\n    var Counter = AV.Object.extend('Counter');\n    var memoFile = pathFn.join(publicDir, 'leancloud.memo');\n    if (!fs.existsSync(memoFile)) {\n        fs.writeFileSync(memoFile, '[\\n]');\n    }\n    var memoData = fs.readFileSync(memoFile, 'utf-8').split('\\n');\n    var memoIdx = 1;\n    var newData = [];\n    var cnt = 0;\n    var limit = 0;\n    var env = this;\n    urls.sort(cmp).forEach(x => {\n        var y = {};\n        y.title = '';\n        y.url = '';\n        var flag = false;\n        while (memoData[memoIdx] !== ']') {\n            y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > x.url) break;\n            if (y.url === x.url && y.title === x.title) {\n                flag = true;\n                break;\n            }\n            memoIdx++;\n        }\n        if (flag) return;\n\n        log.info('Dealing with record of ' + x.title);\n        limit++;\n        var query = new AV.Query('Counter');\n        query.equalTo('url', x.url);\n        query.count().then(count => {\n            if (count === 0) {\n                var counter = new Counter();\n                counter.set('url', x.url);\n                counter.set('title', x.title);\n                counter.set('time', 0);\n                counter.save().then(obj => {\n                    log.info(x.title + ' is saved as: ' + obj.id);\n                    newData.push(x);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                }, error => {\n                    log.error(error);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                });\n            } else {\n                newData.push(x);\n                cnt++;\n                postOperation(env, cnt, limit, newData, memoData, log);\n            }\n        }, error => {\n            log.error(error);\n            cnt++;\n            postOperation(env, cnt, limit, newData, memoData, log);\n        });\n    });\n}\n\nhexo.extend.deployer.register('leancloud_counter_security_sync', sync);\n\nvar commandOptions = {\n    desc     : packageInfo.description,\n    usage    : ' <argument>',\n    arguments: [\n        {\n            name: 'register | r <username> <password>',\n            desc: 'Register a new user.'\n        }\n    ]\n};\n\nfunction commandFunc(args) {\n    let { log, config } = this;\n\n    if (args._.length !== 3) {\n        log.error('Too Few or Many Arguments.');\n    } else if (args._[0] === 'register' || args._[0] === 'r') {\n        let { app_id, app_key, server_url } = config.leancloud_counter_security;\n        AV.init({\n            appId    : app_id,\n            appKey   : app_key,\n            serverURL: server_url\n        });\n\n        var user = new AV.User();\n        user.setUsername(String(args._[1]));\n        user.setPassword(String(args._[2]));\n        user.signUp().then(loginedUser => {\n            log.info(loginedUser.getUsername() + ' is successfully signed up');\n        }, error => {\n            log.error(error);\n        });\n    } else {\n        log.error('Unknown Command.');\n    }\n}\n\nhexo.extend.console.register('lc-counter', 'hexo-leancloud-counter-security', commandOptions, commandFunc);\n"}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"Cocoapods采坑记 - Podfile.lock 冲突问题","abbrlink":"podfile_lock_conflict","date":"2018-01-10T14:00:43.000Z","_content":"\n## **故事的开端是这样的：**\n\n我们的项目中使用了[FBRetainCycleDetector](https://github.com/facebook/FBRetainCycleDetector)这个第三方库来检查内存泄露，在升级到某一个版本后，出现部分同事的 podfile.lock中FBRetainCycleDetector的checksum 值不一致，每次都需要运行 pod install 来更新 podfile.lock,然后git push 到仓库。其他的同事又出现 podfile.lock 冲突，需要运行 pod install 更新，然后push到 git 仓库。\n\n<!-- more -->\n\n喜剧上演多次后，我们采取少数服从多数的原则，让出现冲突的同事git push 的时候手动去掉 podfile.lock。\n\npodfile.lock冲突{% asset_img podfile.lock冲突.png %}\n\n## **Podfile.lock 不一致的原因：**\n\n**Podfile.lock和Manifest.lock：**\n\n- 项目中集成 cocoapods 的时候，运行 pod install 后，项目根目录中会生成Podfile.lock，而Pods目录中会有Manifest.lock。\n- Xcode 编译项目的时候，会执行 Build Phases 中的[CP] Check Pods Manifest.lock 脚本，这个脚本会比对Podfile.lock和Manifest.lock，**如果两个文件不相同就会报错**。\n\nxcode编译脚本{% asset_img xcode编译脚本.png %}\n\npod check失败{% asset_img \"pod check失败.png\" %}\n\n**Podfile.lock是什么：**\n\n- Podfile.lock 文件主要包含三个块：PODS、DEPENDENCIES、SPEC CHECKSUMS，用来记录每个pod的版本号、依赖的其他库和每个库对应的podspec.json文件的 checksum(SHA-1算法)。通过这些信息可以确保多人协作的时候，大家使用的是相同版本的第三方库。\n\n在我们的项目中遇到的是 podfile.lock 中 checksum 部分的冲突，其实就是由于FBRetainCycleDetector.podspec.json文件的checksum不一致。\n\n通过对比了有冲突的同事 mac 中生产的FBRetainCycleDetector.podspec.json文件，发现主要是repuires_arc 字段中的文件列表顺序不同。\n\n------\n\n在找到问题产生的原因后，就着手解决问题：\n\n一开始怀疑是MAC的 locale 不同导致文件的排序不一致，因为之前使用翻译脚本来做文件排序的时候，也出现过类似的问题。\n\n```shell\nsystem(\"LANG=zh_CN.utf-8 sort $tmpFileOut | uniq >> $fileNameOut”);\n```\n\n但是在设置了 locale环境变量之后，问题还是没有解决。\n\n前两天，在FBRetainCycleDetector的 issues 列表中，发现也有人遇到了[相同的问题](https://github.com/facebook/FBRetainCycleDetector/issues/52)，更加可喜的是，这个小伙子提了一个 [PR](https://github.com/facebook/FBRetainCycleDetector/pull/53/files) 修复了这个问题，其实只有一行代码：\n\nPR 代码{% asset_img \"PR 代码.png\" %}\n\n## **问题是如何解决的：**\n\n在运行 pod install 后，生成FBRetainCycleDetector.podspec.json文件中， repuires_arc字段是需要设置-fno-objc-arc的文件列表，但是不知道某种原因，出现文件路径排序在不同电脑上不同，从而导致最后FBRetainCycleDetector.podspec.json的CHECKSUMS(SHA-1) 值不一致。\n\n**使用 sort 方法后，解决了文件排序问题。Cheers!** \n\n参考资料：\n\n- <http://guides.cocoapods.org/making/specs-and-specs-repo.html>\n- <http://guides.cocoapods.org/syntax/podspec.html>\n- [cocopods在更新过程中产生Podfile.lock 和 Manifest.lock: No such file or directory](https://www.jianshu.com/p/9285be04310c)","source":"_posts/Cocoapods采坑记-Podfile-lock-冲突问题.md","raw":"---\ntitle: Cocoapods采坑记 - Podfile.lock 冲突问题\ncategories: 开发\ntags:\n  - iOS\n  - cocoapods\nabbrlink: podfile_lock_conflict\ndate: 2018-01-10 22:00:43\n---\n\n## **故事的开端是这样的：**\n\n我们的项目中使用了[FBRetainCycleDetector](https://github.com/facebook/FBRetainCycleDetector)这个第三方库来检查内存泄露，在升级到某一个版本后，出现部分同事的 podfile.lock中FBRetainCycleDetector的checksum 值不一致，每次都需要运行 pod install 来更新 podfile.lock,然后git push 到仓库。其他的同事又出现 podfile.lock 冲突，需要运行 pod install 更新，然后push到 git 仓库。\n\n<!-- more -->\n\n喜剧上演多次后，我们采取少数服从多数的原则，让出现冲突的同事git push 的时候手动去掉 podfile.lock。\n\npodfile.lock冲突{% asset_img podfile.lock冲突.png %}\n\n## **Podfile.lock 不一致的原因：**\n\n**Podfile.lock和Manifest.lock：**\n\n- 项目中集成 cocoapods 的时候，运行 pod install 后，项目根目录中会生成Podfile.lock，而Pods目录中会有Manifest.lock。\n- Xcode 编译项目的时候，会执行 Build Phases 中的[CP] Check Pods Manifest.lock 脚本，这个脚本会比对Podfile.lock和Manifest.lock，**如果两个文件不相同就会报错**。\n\nxcode编译脚本{% asset_img xcode编译脚本.png %}\n\npod check失败{% asset_img \"pod check失败.png\" %}\n\n**Podfile.lock是什么：**\n\n- Podfile.lock 文件主要包含三个块：PODS、DEPENDENCIES、SPEC CHECKSUMS，用来记录每个pod的版本号、依赖的其他库和每个库对应的podspec.json文件的 checksum(SHA-1算法)。通过这些信息可以确保多人协作的时候，大家使用的是相同版本的第三方库。\n\n在我们的项目中遇到的是 podfile.lock 中 checksum 部分的冲突，其实就是由于FBRetainCycleDetector.podspec.json文件的checksum不一致。\n\n通过对比了有冲突的同事 mac 中生产的FBRetainCycleDetector.podspec.json文件，发现主要是repuires_arc 字段中的文件列表顺序不同。\n\n------\n\n在找到问题产生的原因后，就着手解决问题：\n\n一开始怀疑是MAC的 locale 不同导致文件的排序不一致，因为之前使用翻译脚本来做文件排序的时候，也出现过类似的问题。\n\n```shell\nsystem(\"LANG=zh_CN.utf-8 sort $tmpFileOut | uniq >> $fileNameOut”);\n```\n\n但是在设置了 locale环境变量之后，问题还是没有解决。\n\n前两天，在FBRetainCycleDetector的 issues 列表中，发现也有人遇到了[相同的问题](https://github.com/facebook/FBRetainCycleDetector/issues/52)，更加可喜的是，这个小伙子提了一个 [PR](https://github.com/facebook/FBRetainCycleDetector/pull/53/files) 修复了这个问题，其实只有一行代码：\n\nPR 代码{% asset_img \"PR 代码.png\" %}\n\n## **问题是如何解决的：**\n\n在运行 pod install 后，生成FBRetainCycleDetector.podspec.json文件中， repuires_arc字段是需要设置-fno-objc-arc的文件列表，但是不知道某种原因，出现文件路径排序在不同电脑上不同，从而导致最后FBRetainCycleDetector.podspec.json的CHECKSUMS(SHA-1) 值不一致。\n\n**使用 sort 方法后，解决了文件排序问题。Cheers!** \n\n参考资料：\n\n- <http://guides.cocoapods.org/making/specs-and-specs-repo.html>\n- <http://guides.cocoapods.org/syntax/podspec.html>\n- [cocopods在更新过程中产生Podfile.lock 和 Manifest.lock: No such file or directory](https://www.jianshu.com/p/9285be04310c)","slug":"Cocoapods采坑记-Podfile-lock-冲突问题","published":1,"updated":"2022-04-05T13:46:10.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6hf968g0001x6u0fp5jes0b","content":"<h2 id=\"故事的开端是这样的：\"><a href=\"#故事的开端是这样的：\" class=\"headerlink\" title=\"故事的开端是这样的：\"></a><strong>故事的开端是这样的：</strong></h2><p>我们的项目中使用了<a href=\"https://github.com/facebook/FBRetainCycleDetector\">FBRetainCycleDetector</a>这个第三方库来检查内存泄露，在升级到某一个版本后，出现部分同事的 podfile.lock中FBRetainCycleDetector的checksum 值不一致，每次都需要运行 pod install 来更新 podfile.lock,然后git push 到仓库。其他的同事又出现 podfile.lock 冲突，需要运行 pod install 更新，然后push到 git 仓库。</p>\n<span id=\"more\"></span>\n\n<p>喜剧上演多次后，我们采取少数服从多数的原则，让出现冲突的同事git push 的时候手动去掉 podfile.lock。</p>\n<p>podfile.lock冲突<img src=\"/posts/podfile_lock_conflict/podfile.lock%E5%86%B2%E7%AA%81.png\" class=\"\"></p>\n<h2 id=\"Podfile-lock-不一致的原因：\"><a href=\"#Podfile-lock-不一致的原因：\" class=\"headerlink\" title=\"Podfile.lock 不一致的原因：\"></a><strong>Podfile.lock 不一致的原因：</strong></h2><p><strong>Podfile.lock和Manifest.lock：</strong></p>\n<ul>\n<li>项目中集成 cocoapods 的时候，运行 pod install 后，项目根目录中会生成Podfile.lock，而Pods目录中会有Manifest.lock。</li>\n<li>Xcode 编译项目的时候，会执行 Build Phases 中的[CP] Check Pods Manifest.lock 脚本，这个脚本会比对Podfile.lock和Manifest.lock，<strong>如果两个文件不相同就会报错</strong>。</li>\n</ul>\n<p>xcode编译脚本<img src=\"/posts/podfile_lock_conflict/xcode%E7%BC%96%E8%AF%91%E8%84%9A%E6%9C%AC.png\" class=\"\"></p>\n<p>pod check失败<img src=\"/posts/podfile_lock_conflict/pod%20check%E5%A4%B1%E8%B4%A5.png\" class=\"\"></p>\n<p><strong>Podfile.lock是什么：</strong></p>\n<ul>\n<li>Podfile.lock 文件主要包含三个块：PODS、DEPENDENCIES、SPEC CHECKSUMS，用来记录每个pod的版本号、依赖的其他库和每个库对应的podspec.json文件的 checksum(SHA-1算法)。通过这些信息可以确保多人协作的时候，大家使用的是相同版本的第三方库。</li>\n</ul>\n<p>在我们的项目中遇到的是 podfile.lock 中 checksum 部分的冲突，其实就是由于FBRetainCycleDetector.podspec.json文件的checksum不一致。</p>\n<p>通过对比了有冲突的同事 mac 中生产的FBRetainCycleDetector.podspec.json文件，发现主要是repuires_arc 字段中的文件列表顺序不同。</p>\n<hr>\n<p>在找到问题产生的原因后，就着手解决问题：</p>\n<p>一开始怀疑是MAC的 locale 不同导致文件的排序不一致，因为之前使用翻译脚本来做文件排序的时候，也出现过类似的问题。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">system(&quot;LANG=zh_CN.utf-8 sort $tmpFileOut | uniq &gt;&gt; $fileNameOut”);</span><br></pre></td></tr></table></figure>\n\n<p>但是在设置了 locale环境变量之后，问题还是没有解决。</p>\n<p>前两天，在FBRetainCycleDetector的 issues 列表中，发现也有人遇到了<a href=\"https://github.com/facebook/FBRetainCycleDetector/issues/52\">相同的问题</a>，更加可喜的是，这个小伙子提了一个 <a href=\"https://github.com/facebook/FBRetainCycleDetector/pull/53/files\">PR</a> 修复了这个问题，其实只有一行代码：</p>\n<p>PR 代码<img src=\"/posts/podfile_lock_conflict/PR%20%E4%BB%A3%E7%A0%81.png\" class=\"\"></p>\n<h2 id=\"问题是如何解决的：\"><a href=\"#问题是如何解决的：\" class=\"headerlink\" title=\"问题是如何解决的：\"></a><strong>问题是如何解决的：</strong></h2><p>在运行 pod install 后，生成FBRetainCycleDetector.podspec.json文件中， repuires_arc字段是需要设置-fno-objc-arc的文件列表，但是不知道某种原因，出现文件路径排序在不同电脑上不同，从而导致最后FBRetainCycleDetector.podspec.json的CHECKSUMS(SHA-1) 值不一致。</p>\n<p><strong>使用 sort 方法后，解决了文件排序问题。Cheers!</strong> </p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"http://guides.cocoapods.org/making/specs-and-specs-repo.html\">http://guides.cocoapods.org/making/specs-and-specs-repo.html</a></li>\n<li><a href=\"http://guides.cocoapods.org/syntax/podspec.html\">http://guides.cocoapods.org/syntax/podspec.html</a></li>\n<li><a href=\"https://www.jianshu.com/p/9285be04310c\">cocopods在更新过程中产生Podfile.lock 和 Manifest.lock: No such file or directory</a></li>\n</ul>\n","site":{"data":{"hexo-leancloud-counter-security-fix":"/* global hexo */\n\n'use strict';\n\nconst AV = require('leancloud-storage');\nconst readlineSync = require('readline-sync');\nconst packageInfo = require('./package.json');\nconst pathFn = require('path');\nconst fs = require('fs');\n\nfunction generate_post_list(locals) {\n    let { config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    var urlsPath = 'leancloud_counter_security_urls.json';\n    var urls = [...locals.posts.toArray()]\n        .filter(x => x.published)\n        .map(x => {\n            return {\n                title: x.title,\n                url  : config.root + x.path\n            };\n        });\n    return {\n        path: urlsPath,\n        data: JSON.stringify(urls)\n    };\n}\n\nhexo.extend.generator.register('leancloud_counter_security_generator', generate_post_list);\n\nfunction cmp(x, y) {\n    if (x.url < y.url) {\n        return -1;\n    } else if (x.url === y.url) {\n        return 0;\n    }\n    return 1;\n}\n\nfunction postOperation(env, cnt, limit, newData, memoData, log) {\n    if (cnt !== limit) return;\n\n    newData.sort(cmp);\n    var sourceDir = env.source_dir;\n    var publicDir = env.public_dir;\n    var memoFile = pathFn.join(sourceDir, 'leancloud.memo');\n    fs.writeFileSync(memoFile, '[\\n');\n\n    var memoIdx = 1;\n    for (var i = 0; newData[i]; i++) {\n        while (memoData[memoIdx] !== ']') {\n            var y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > newData[i].url) break;\n\n            fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n            memoIdx++;\n        }\n        fs.writeFileSync(memoFile, '{\"title\":\"' + newData[i].title + '\",\"url\":\"' + newData[i].url + '\"},\\n', { flag: 'a' });\n    }\n    while (memoData[memoIdx] !== ']') {\n        fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n        memoIdx++;\n    }\n    fs.writeFileSync(memoFile, memoData[memoIdx], { flag: 'a' });\n\n    var srcFile = pathFn.join(sourceDir, 'leancloud.memo');\n    var destFile = pathFn.join(publicDir, 'leancloud.memo');\n    var readStream = fs.createReadStream(srcFile);\n    var writeStream = fs.createWriteStream(destFile);\n    readStream.pipe(writeStream);\n    log.info('leancloud.memo successfully updated.');\n}\n\nasync function sync() {\n    let { log, config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    let { app_id, app_key, server_url } = config.leancloud_counter_security;\n    var publicDir = this.public_dir;\n    var UrlsFile = pathFn.join(publicDir, 'leancloud_counter_security_urls.json');\n    var urls = JSON.parse(fs.readFileSync(UrlsFile, 'utf8'));\n\n    AV.init({\n        appId    : app_id,\n        appKey   : app_key,\n        serverURL: server_url\n    });\n\n    var currentUser = AV.User.current();\n    if (!currentUser) {\n        var userName = config.leancloud_counter_security.username;\n        var passWord = config.leancloud_counter_security.password;\n        if (!userName) {\n            userName = readlineSync.question('Enter your username: ');\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        } else if (!passWord) {\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        }\n        await AV.User.logIn(userName, passWord).then(loginedUser => {\n            log.info('Logined as: ' + loginedUser.getUsername());\n        }, error => {\n            log.error(error);\n        });\n    }\n\n    log.info('Now syncing your posts list to leancloud counter...');\n    var Counter = AV.Object.extend('Counter');\n    var memoFile = pathFn.join(publicDir, 'leancloud.memo');\n    if (!fs.existsSync(memoFile)) {\n        fs.writeFileSync(memoFile, '[\\n]');\n    }\n    var memoData = fs.readFileSync(memoFile, 'utf-8').split('\\n');\n    var memoIdx = 1;\n    var newData = [];\n    var cnt = 0;\n    var limit = 0;\n    var env = this;\n    urls.sort(cmp).forEach(x => {\n        var y = {};\n        y.title = '';\n        y.url = '';\n        var flag = false;\n        while (memoData[memoIdx] !== ']') {\n            y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > x.url) break;\n            if (y.url === x.url && y.title === x.title) {\n                flag = true;\n                break;\n            }\n            memoIdx++;\n        }\n        if (flag) return;\n\n        log.info('Dealing with record of ' + x.title);\n        limit++;\n        var query = new AV.Query('Counter');\n        query.equalTo('url', x.url);\n        query.count().then(count => {\n            if (count === 0) {\n                var counter = new Counter();\n                counter.set('url', x.url);\n                counter.set('title', x.title);\n                counter.set('time', 0);\n                counter.save().then(obj => {\n                    log.info(x.title + ' is saved as: ' + obj.id);\n                    newData.push(x);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                }, error => {\n                    log.error(error);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                });\n            } else {\n                newData.push(x);\n                cnt++;\n                postOperation(env, cnt, limit, newData, memoData, log);\n            }\n        }, error => {\n            log.error(error);\n            cnt++;\n            postOperation(env, cnt, limit, newData, memoData, log);\n        });\n    });\n}\n\nhexo.extend.deployer.register('leancloud_counter_security_sync', sync);\n\nvar commandOptions = {\n    desc     : packageInfo.description,\n    usage    : ' <argument>',\n    arguments: [\n        {\n            name: 'register | r <username> <password>',\n            desc: 'Register a new user.'\n        }\n    ]\n};\n\nfunction commandFunc(args) {\n    let { log, config } = this;\n\n    if (args._.length !== 3) {\n        log.error('Too Few or Many Arguments.');\n    } else if (args._[0] === 'register' || args._[0] === 'r') {\n        let { app_id, app_key, server_url } = config.leancloud_counter_security;\n        AV.init({\n            appId    : app_id,\n            appKey   : app_key,\n            serverURL: server_url\n        });\n\n        var user = new AV.User();\n        user.setUsername(String(args._[1]));\n        user.setPassword(String(args._[2]));\n        user.signUp().then(loginedUser => {\n            log.info(loginedUser.getUsername() + ' is successfully signed up');\n        }, error => {\n            log.error(error);\n        });\n    } else {\n        log.error('Unknown Command.');\n    }\n}\n\nhexo.extend.console.register('lc-counter', 'hexo-leancloud-counter-security', commandOptions, commandFunc);\n"}},"length":1545,"excerpt":"<h2 id=\"故事的开端是这样的：\"><a href=\"#故事的开端是这样的：\" class=\"headerlink\" title=\"故事的开端是这样的：\"></a><strong>故事的开端是这样的：</strong></h2><p>我们的项目中使用了<a href=\"https://github.com/facebook/FBRetainCycleDetector\">FBRetainCycleDetector</a>这个第三方库来检查内存泄露，在升级到某一个版本后，出现部分同事的 podfile.lock中FBRetainCycleDetector的checksum 值不一致，每次都需要运行 pod install 来更新 podfile.lock,然后git push 到仓库。其他的同事又出现 podfile.lock 冲突，需要运行 pod install 更新，然后push到 git 仓库。</p>","more":"<p>喜剧上演多次后，我们采取少数服从多数的原则，让出现冲突的同事git push 的时候手动去掉 podfile.lock。</p>\n<p>podfile.lock冲突<img src=\"/posts/podfile_lock_conflict/podfile.lock%E5%86%B2%E7%AA%81.png\" class=\"\"></p>\n<h2 id=\"Podfile-lock-不一致的原因：\"><a href=\"#Podfile-lock-不一致的原因：\" class=\"headerlink\" title=\"Podfile.lock 不一致的原因：\"></a><strong>Podfile.lock 不一致的原因：</strong></h2><p><strong>Podfile.lock和Manifest.lock：</strong></p>\n<ul>\n<li>项目中集成 cocoapods 的时候，运行 pod install 后，项目根目录中会生成Podfile.lock，而Pods目录中会有Manifest.lock。</li>\n<li>Xcode 编译项目的时候，会执行 Build Phases 中的[CP] Check Pods Manifest.lock 脚本，这个脚本会比对Podfile.lock和Manifest.lock，<strong>如果两个文件不相同就会报错</strong>。</li>\n</ul>\n<p>xcode编译脚本<img src=\"/posts/podfile_lock_conflict/xcode%E7%BC%96%E8%AF%91%E8%84%9A%E6%9C%AC.png\" class=\"\"></p>\n<p>pod check失败<img src=\"/posts/podfile_lock_conflict/pod%20check%E5%A4%B1%E8%B4%A5.png\" class=\"\"></p>\n<p><strong>Podfile.lock是什么：</strong></p>\n<ul>\n<li>Podfile.lock 文件主要包含三个块：PODS、DEPENDENCIES、SPEC CHECKSUMS，用来记录每个pod的版本号、依赖的其他库和每个库对应的podspec.json文件的 checksum(SHA-1算法)。通过这些信息可以确保多人协作的时候，大家使用的是相同版本的第三方库。</li>\n</ul>\n<p>在我们的项目中遇到的是 podfile.lock 中 checksum 部分的冲突，其实就是由于FBRetainCycleDetector.podspec.json文件的checksum不一致。</p>\n<p>通过对比了有冲突的同事 mac 中生产的FBRetainCycleDetector.podspec.json文件，发现主要是repuires_arc 字段中的文件列表顺序不同。</p>\n<hr>\n<p>在找到问题产生的原因后，就着手解决问题：</p>\n<p>一开始怀疑是MAC的 locale 不同导致文件的排序不一致，因为之前使用翻译脚本来做文件排序的时候，也出现过类似的问题。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">system(&quot;LANG=zh_CN.utf-8 sort $tmpFileOut | uniq &gt;&gt; $fileNameOut”);</span><br></pre></td></tr></table></figure>\n\n<p>但是在设置了 locale环境变量之后，问题还是没有解决。</p>\n<p>前两天，在FBRetainCycleDetector的 issues 列表中，发现也有人遇到了<a href=\"https://github.com/facebook/FBRetainCycleDetector/issues/52\">相同的问题</a>，更加可喜的是，这个小伙子提了一个 <a href=\"https://github.com/facebook/FBRetainCycleDetector/pull/53/files\">PR</a> 修复了这个问题，其实只有一行代码：</p>\n<p>PR 代码<img src=\"/posts/podfile_lock_conflict/PR%20%E4%BB%A3%E7%A0%81.png\" class=\"\"></p>\n<h2 id=\"问题是如何解决的：\"><a href=\"#问题是如何解决的：\" class=\"headerlink\" title=\"问题是如何解决的：\"></a><strong>问题是如何解决的：</strong></h2><p>在运行 pod install 后，生成FBRetainCycleDetector.podspec.json文件中， repuires_arc字段是需要设置-fno-objc-arc的文件列表，但是不知道某种原因，出现文件路径排序在不同电脑上不同，从而导致最后FBRetainCycleDetector.podspec.json的CHECKSUMS(SHA-1) 值不一致。</p>\n<p><strong>使用 sort 方法后，解决了文件排序问题。Cheers!</strong> </p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"http://guides.cocoapods.org/making/specs-and-specs-repo.html\">http://guides.cocoapods.org/making/specs-and-specs-repo.html</a></li>\n<li><a href=\"http://guides.cocoapods.org/syntax/podspec.html\">http://guides.cocoapods.org/syntax/podspec.html</a></li>\n<li><a href=\"https://www.jianshu.com/p/9285be04310c\">cocopods在更新过程中产生Podfile.lock 和 Manifest.lock: No such file or directory</a></li>\n</ul>"},{"title":"Swift 与 OC 混编小技巧","abbrlink":"swift-oc-mix","date":"2017-01-07T14:43:35.000Z","_content":"\nSwift 与 OC交织在一起缠绵的爱情故事，在接下来的几年里将伴随着 iOS 开发人员，下面我们起来看看他们的恩怨纠葛。\n\n<!-- more -->\n\n**Swift 和ObjC混编：**\n\n- **[Apple的文档](https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216-CH2-ID0)**\n\n- **Swift中调用OC：**\n\n  - 在 Swift 中调用 OC 的代码时，需要使用到 bridging header 文件来把 OC 的类暴露给 swift\n\n  - 手动添加 bridging header 的步骤，直接把 finder 中的代码文件夹拖拽到 xcode 中:\n\n    [图1-1]{% asset_img 1-1.jpg %}\n\n    如上图，需要选中“**Create groups**”，这样就可以在 xcode代码浏览目录中添加一个 group\n\n    图1-2 {% asset_img 1-2.jpg %}\n\n    但是，这样的操作不会让 Xcode 自动为我们创建 bridging header 文件，需要手动在 Xcode 中**添加 header 文件**，这里要注意命名规范，必须是“ModuleName-Bridging-Header.h”，然后设置**编译选项**\n\n    图1-3{% asset_img 1-3.jpg %}\n\n    图1-4{% asset_img 1-4.jpg %}\n\n  - **自动添加bridging header 的步骤**\n\n    - 其实 xcode 可以自动添加桥接头文件，只是需要我们在刚开始的时候，**拖拽一个 OC 的源文件**(包含.h 和.m 文件)，而不是拖拽整个源代码的目录到 xcode 中\n\n      图2-1{% asset_img 2-1.jpg %}\n\n      图2-2{% asset_img 2-2.jpg %}\n\n    - 下面是拖拽 OC 源代码后的项目浏览结构，xcode自动创建一个 ModuleName-Bridging-Header.h 的头文件，并且设置好了编译选项：\n\n      图2-3{% asset_img 2-3.jpg %}\n\n      图2-4{% asset_img 2-4.jpg %}\n\n- OC中调用Swift：**\n\n  - OC来调用 Swift 的时候，需要依赖一个 Swift **默认提供**的“ModuleName-swift.h”文件，这个文件是隐藏的，**不需要也不能够由开发者来提供**，但是可以使用\\#include包含到 OC 代码中，这个 OC头文件中可以看到 swift 类、结构体、常量的定义。\n\n    图3-1{% asset_img 3-1.jpg %}\n\n    图3-2{% asset_img 3-2.jpg %}\n\n  - 需要注意的是，只有**继承自 NSObject 的swift类才能被 OC 调用**，在 swift.h 文件中是看不到纯 swift类的定义。\n\n- **Swift使用OC中的宏**\n\n  - 可以参考[这个提问](http://stackoverflow.com/questions/24325477/how-to-use-a-objective-c-define-from-swift)\n  - 有哪些问题：\n    - Swift 只能使用OC 中常量的宏定义，如\n      - \\#define MAX_WIDTH  100\n      - \\#define Name_KeyPath @“Name_KeyPath”\n    - 而不同使用函数调用的宏，如\n      - \\#define SCREEN_WIDTH  [[[UIScreen mainScreen] bounds] width]\n      - \\#define DBQuerySuccess YES\n  - 解决方法：\n    - 在 OC 文件中创建一个Constant类，使用类方法(screenWidth)来包装现有的宏定义\n\n- **@objc 关键字的作用**\n\n  - 当 swift 中要使用 OC 的一些特性的时候，如 runtime，@objc 关键字用来 提供这个功能。\n\n- 源代码\n\n  - 具体的使用，可以参见 Github上的[代码](https://github.com/zenghao0708/SwiftOCMixing)","source":"_posts/Swift-与-OC-混编小技巧.md","raw":"---\ntitle: Swift 与 OC 混编小技巧\ntags: iOS\ncategories: 开发\nabbrlink: swift-oc-mix\ndate: 2017-01-07 22:43:35\n---\n\nSwift 与 OC交织在一起缠绵的爱情故事，在接下来的几年里将伴随着 iOS 开发人员，下面我们起来看看他们的恩怨纠葛。\n\n<!-- more -->\n\n**Swift 和ObjC混编：**\n\n- **[Apple的文档](https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216-CH2-ID0)**\n\n- **Swift中调用OC：**\n\n  - 在 Swift 中调用 OC 的代码时，需要使用到 bridging header 文件来把 OC 的类暴露给 swift\n\n  - 手动添加 bridging header 的步骤，直接把 finder 中的代码文件夹拖拽到 xcode 中:\n\n    [图1-1]{% asset_img 1-1.jpg %}\n\n    如上图，需要选中“**Create groups**”，这样就可以在 xcode代码浏览目录中添加一个 group\n\n    图1-2 {% asset_img 1-2.jpg %}\n\n    但是，这样的操作不会让 Xcode 自动为我们创建 bridging header 文件，需要手动在 Xcode 中**添加 header 文件**，这里要注意命名规范，必须是“ModuleName-Bridging-Header.h”，然后设置**编译选项**\n\n    图1-3{% asset_img 1-3.jpg %}\n\n    图1-4{% asset_img 1-4.jpg %}\n\n  - **自动添加bridging header 的步骤**\n\n    - 其实 xcode 可以自动添加桥接头文件，只是需要我们在刚开始的时候，**拖拽一个 OC 的源文件**(包含.h 和.m 文件)，而不是拖拽整个源代码的目录到 xcode 中\n\n      图2-1{% asset_img 2-1.jpg %}\n\n      图2-2{% asset_img 2-2.jpg %}\n\n    - 下面是拖拽 OC 源代码后的项目浏览结构，xcode自动创建一个 ModuleName-Bridging-Header.h 的头文件，并且设置好了编译选项：\n\n      图2-3{% asset_img 2-3.jpg %}\n\n      图2-4{% asset_img 2-4.jpg %}\n\n- OC中调用Swift：**\n\n  - OC来调用 Swift 的时候，需要依赖一个 Swift **默认提供**的“ModuleName-swift.h”文件，这个文件是隐藏的，**不需要也不能够由开发者来提供**，但是可以使用\\#include包含到 OC 代码中，这个 OC头文件中可以看到 swift 类、结构体、常量的定义。\n\n    图3-1{% asset_img 3-1.jpg %}\n\n    图3-2{% asset_img 3-2.jpg %}\n\n  - 需要注意的是，只有**继承自 NSObject 的swift类才能被 OC 调用**，在 swift.h 文件中是看不到纯 swift类的定义。\n\n- **Swift使用OC中的宏**\n\n  - 可以参考[这个提问](http://stackoverflow.com/questions/24325477/how-to-use-a-objective-c-define-from-swift)\n  - 有哪些问题：\n    - Swift 只能使用OC 中常量的宏定义，如\n      - \\#define MAX_WIDTH  100\n      - \\#define Name_KeyPath @“Name_KeyPath”\n    - 而不同使用函数调用的宏，如\n      - \\#define SCREEN_WIDTH  [[[UIScreen mainScreen] bounds] width]\n      - \\#define DBQuerySuccess YES\n  - 解决方法：\n    - 在 OC 文件中创建一个Constant类，使用类方法(screenWidth)来包装现有的宏定义\n\n- **@objc 关键字的作用**\n\n  - 当 swift 中要使用 OC 的一些特性的时候，如 runtime，@objc 关键字用来 提供这个功能。\n\n- 源代码\n\n  - 具体的使用，可以参见 Github上的[代码](https://github.com/zenghao0708/SwiftOCMixing)","slug":"Swift-与-OC-混编小技巧","published":1,"updated":"2022-04-05T13:46:10.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6hf968h0003x6u065wk623v","content":"<p>Swift 与 OC交织在一起缠绵的爱情故事，在接下来的几年里将伴随着 iOS 开发人员，下面我们起来看看他们的恩怨纠葛。</p>\n<span id=\"more\"></span>\n\n<p><strong>Swift 和ObjC混编：</strong></p>\n<ul>\n<li><p><strong><a href=\"https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216-CH2-ID0\">Apple的文档</a></strong></p>\n</li>\n<li><p><strong>Swift中调用OC：</strong></p>\n<ul>\n<li><p>在 Swift 中调用 OC 的代码时，需要使用到 bridging header 文件来把 OC 的类暴露给 swift</p>\n</li>\n<li><p>手动添加 bridging header 的步骤，直接把 finder 中的代码文件夹拖拽到 xcode 中:</p>\n<p>[图1-1]<img src=\"/posts/swift-oc-mix/1-1.jpg\" class=\"\"></p>\n<p>如上图，需要选中“<strong>Create groups</strong>”，这样就可以在 xcode代码浏览目录中添加一个 group</p>\n<p>图1-2 <img src=\"/posts/swift-oc-mix/1-2.jpg\" class=\"\"></p>\n<p>但是，这样的操作不会让 Xcode 自动为我们创建 bridging header 文件，需要手动在 Xcode 中<strong>添加 header 文件</strong>，这里要注意命名规范，必须是“ModuleName-Bridging-Header.h”，然后设置<strong>编译选项</strong></p>\n<p>图1-3<img src=\"/posts/swift-oc-mix/1-3.jpg\" class=\"\"></p>\n<p>图1-4<img src=\"/posts/swift-oc-mix/1-4.jpg\" class=\"\"></p>\n</li>\n<li><p><strong>自动添加bridging header 的步骤</strong></p>\n<ul>\n<li><p>其实 xcode 可以自动添加桥接头文件，只是需要我们在刚开始的时候，<strong>拖拽一个 OC 的源文件</strong>(包含.h 和.m 文件)，而不是拖拽整个源代码的目录到 xcode 中</p>\n<p>图2-1<img src=\"/posts/swift-oc-mix/2-1.jpg\" class=\"\"></p>\n<p>图2-2<img src=\"/posts/swift-oc-mix/2-2.jpg\" class=\"\"></p>\n</li>\n<li><p>下面是拖拽 OC 源代码后的项目浏览结构，xcode自动创建一个 ModuleName-Bridging-Header.h 的头文件，并且设置好了编译选项：</p>\n<p>图2-3<img src=\"/posts/swift-oc-mix/2-3.jpg\" class=\"\"></p>\n<p>图2-4<img src=\"/posts/swift-oc-mix/2-4.jpg\" class=\"\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>OC中调用Swift：**</p>\n<ul>\n<li><p>OC来调用 Swift 的时候，需要依赖一个 Swift <strong>默认提供</strong>的“ModuleName-swift.h”文件，这个文件是隐藏的，<strong>不需要也不能够由开发者来提供</strong>，但是可以使用#include包含到 OC 代码中，这个 OC头文件中可以看到 swift 类、结构体、常量的定义。</p>\n<p>图3-1<img src=\"/posts/swift-oc-mix/3-1.jpg\" class=\"\"></p>\n<p>图3-2<img src=\"/posts/swift-oc-mix/3-2.jpg\" class=\"\"></p>\n</li>\n<li><p>需要注意的是，只有<strong>继承自 NSObject 的swift类才能被 OC 调用</strong>，在 swift.h 文件中是看不到纯 swift类的定义。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>Swift使用OC中的宏</strong></p>\n<ul>\n<li>可以参考<a href=\"http://stackoverflow.com/questions/24325477/how-to-use-a-objective-c-define-from-swift\">这个提问</a></li>\n<li>有哪些问题：<ul>\n<li>Swift 只能使用OC 中常量的宏定义，如<ul>\n<li>#define MAX_WIDTH  100</li>\n<li>#define Name_KeyPath @“Name_KeyPath”</li>\n</ul>\n</li>\n<li>而不同使用函数调用的宏，如<ul>\n<li>#define SCREEN_WIDTH  [[[UIScreen mainScreen] bounds] width]</li>\n<li>#define DBQuerySuccess YES</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>解决方法：<ul>\n<li>在 OC 文件中创建一个Constant类，使用类方法(screenWidth)来包装现有的宏定义</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>@objc 关键字的作用</strong></p>\n<ul>\n<li>当 swift 中要使用 OC 的一些特性的时候，如 runtime，@objc 关键字用来 提供这个功能。</li>\n</ul>\n</li>\n<li><p>源代码</p>\n<ul>\n<li>具体的使用，可以参见 Github上的<a href=\"https://github.com/zenghao0708/SwiftOCMixing\">代码</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"hexo-leancloud-counter-security-fix":"/* global hexo */\n\n'use strict';\n\nconst AV = require('leancloud-storage');\nconst readlineSync = require('readline-sync');\nconst packageInfo = require('./package.json');\nconst pathFn = require('path');\nconst fs = require('fs');\n\nfunction generate_post_list(locals) {\n    let { config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    var urlsPath = 'leancloud_counter_security_urls.json';\n    var urls = [...locals.posts.toArray()]\n        .filter(x => x.published)\n        .map(x => {\n            return {\n                title: x.title,\n                url  : config.root + x.path\n            };\n        });\n    return {\n        path: urlsPath,\n        data: JSON.stringify(urls)\n    };\n}\n\nhexo.extend.generator.register('leancloud_counter_security_generator', generate_post_list);\n\nfunction cmp(x, y) {\n    if (x.url < y.url) {\n        return -1;\n    } else if (x.url === y.url) {\n        return 0;\n    }\n    return 1;\n}\n\nfunction postOperation(env, cnt, limit, newData, memoData, log) {\n    if (cnt !== limit) return;\n\n    newData.sort(cmp);\n    var sourceDir = env.source_dir;\n    var publicDir = env.public_dir;\n    var memoFile = pathFn.join(sourceDir, 'leancloud.memo');\n    fs.writeFileSync(memoFile, '[\\n');\n\n    var memoIdx = 1;\n    for (var i = 0; newData[i]; i++) {\n        while (memoData[memoIdx] !== ']') {\n            var y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > newData[i].url) break;\n\n            fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n            memoIdx++;\n        }\n        fs.writeFileSync(memoFile, '{\"title\":\"' + newData[i].title + '\",\"url\":\"' + newData[i].url + '\"},\\n', { flag: 'a' });\n    }\n    while (memoData[memoIdx] !== ']') {\n        fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n        memoIdx++;\n    }\n    fs.writeFileSync(memoFile, memoData[memoIdx], { flag: 'a' });\n\n    var srcFile = pathFn.join(sourceDir, 'leancloud.memo');\n    var destFile = pathFn.join(publicDir, 'leancloud.memo');\n    var readStream = fs.createReadStream(srcFile);\n    var writeStream = fs.createWriteStream(destFile);\n    readStream.pipe(writeStream);\n    log.info('leancloud.memo successfully updated.');\n}\n\nasync function sync() {\n    let { log, config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    let { app_id, app_key, server_url } = config.leancloud_counter_security;\n    var publicDir = this.public_dir;\n    var UrlsFile = pathFn.join(publicDir, 'leancloud_counter_security_urls.json');\n    var urls = JSON.parse(fs.readFileSync(UrlsFile, 'utf8'));\n\n    AV.init({\n        appId    : app_id,\n        appKey   : app_key,\n        serverURL: server_url\n    });\n\n    var currentUser = AV.User.current();\n    if (!currentUser) {\n        var userName = config.leancloud_counter_security.username;\n        var passWord = config.leancloud_counter_security.password;\n        if (!userName) {\n            userName = readlineSync.question('Enter your username: ');\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        } else if (!passWord) {\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        }\n        await AV.User.logIn(userName, passWord).then(loginedUser => {\n            log.info('Logined as: ' + loginedUser.getUsername());\n        }, error => {\n            log.error(error);\n        });\n    }\n\n    log.info('Now syncing your posts list to leancloud counter...');\n    var Counter = AV.Object.extend('Counter');\n    var memoFile = pathFn.join(publicDir, 'leancloud.memo');\n    if (!fs.existsSync(memoFile)) {\n        fs.writeFileSync(memoFile, '[\\n]');\n    }\n    var memoData = fs.readFileSync(memoFile, 'utf-8').split('\\n');\n    var memoIdx = 1;\n    var newData = [];\n    var cnt = 0;\n    var limit = 0;\n    var env = this;\n    urls.sort(cmp).forEach(x => {\n        var y = {};\n        y.title = '';\n        y.url = '';\n        var flag = false;\n        while (memoData[memoIdx] !== ']') {\n            y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > x.url) break;\n            if (y.url === x.url && y.title === x.title) {\n                flag = true;\n                break;\n            }\n            memoIdx++;\n        }\n        if (flag) return;\n\n        log.info('Dealing with record of ' + x.title);\n        limit++;\n        var query = new AV.Query('Counter');\n        query.equalTo('url', x.url);\n        query.count().then(count => {\n            if (count === 0) {\n                var counter = new Counter();\n                counter.set('url', x.url);\n                counter.set('title', x.title);\n                counter.set('time', 0);\n                counter.save().then(obj => {\n                    log.info(x.title + ' is saved as: ' + obj.id);\n                    newData.push(x);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                }, error => {\n                    log.error(error);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                });\n            } else {\n                newData.push(x);\n                cnt++;\n                postOperation(env, cnt, limit, newData, memoData, log);\n            }\n        }, error => {\n            log.error(error);\n            cnt++;\n            postOperation(env, cnt, limit, newData, memoData, log);\n        });\n    });\n}\n\nhexo.extend.deployer.register('leancloud_counter_security_sync', sync);\n\nvar commandOptions = {\n    desc     : packageInfo.description,\n    usage    : ' <argument>',\n    arguments: [\n        {\n            name: 'register | r <username> <password>',\n            desc: 'Register a new user.'\n        }\n    ]\n};\n\nfunction commandFunc(args) {\n    let { log, config } = this;\n\n    if (args._.length !== 3) {\n        log.error('Too Few or Many Arguments.');\n    } else if (args._[0] === 'register' || args._[0] === 'r') {\n        let { app_id, app_key, server_url } = config.leancloud_counter_security;\n        AV.init({\n            appId    : app_id,\n            appKey   : app_key,\n            serverURL: server_url\n        });\n\n        var user = new AV.User();\n        user.setUsername(String(args._[1]));\n        user.setPassword(String(args._[2]));\n        user.signUp().then(loginedUser => {\n            log.info(loginedUser.getUsername() + ' is successfully signed up');\n        }, error => {\n            log.error(error);\n        });\n    } else {\n        log.error('Unknown Command.');\n    }\n}\n\nhexo.extend.console.register('lc-counter', 'hexo-leancloud-counter-security', commandOptions, commandFunc);\n"}},"length":1090,"excerpt":"<p>Swift 与 OC交织在一起缠绵的爱情故事，在接下来的几年里将伴随着 iOS 开发人员，下面我们起来看看他们的恩怨纠葛。</p>","more":"<p><strong>Swift 和ObjC混编：</strong></p>\n<ul>\n<li><p><strong><a href=\"https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216-CH2-ID0\">Apple的文档</a></strong></p>\n</li>\n<li><p><strong>Swift中调用OC：</strong></p>\n<ul>\n<li><p>在 Swift 中调用 OC 的代码时，需要使用到 bridging header 文件来把 OC 的类暴露给 swift</p>\n</li>\n<li><p>手动添加 bridging header 的步骤，直接把 finder 中的代码文件夹拖拽到 xcode 中:</p>\n<p>[图1-1]<img src=\"/posts/swift-oc-mix/1-1.jpg\" class=\"\"></p>\n<p>如上图，需要选中“<strong>Create groups</strong>”，这样就可以在 xcode代码浏览目录中添加一个 group</p>\n<p>图1-2 <img src=\"/posts/swift-oc-mix/1-2.jpg\" class=\"\"></p>\n<p>但是，这样的操作不会让 Xcode 自动为我们创建 bridging header 文件，需要手动在 Xcode 中<strong>添加 header 文件</strong>，这里要注意命名规范，必须是“ModuleName-Bridging-Header.h”，然后设置<strong>编译选项</strong></p>\n<p>图1-3<img src=\"/posts/swift-oc-mix/1-3.jpg\" class=\"\"></p>\n<p>图1-4<img src=\"/posts/swift-oc-mix/1-4.jpg\" class=\"\"></p>\n</li>\n<li><p><strong>自动添加bridging header 的步骤</strong></p>\n<ul>\n<li><p>其实 xcode 可以自动添加桥接头文件，只是需要我们在刚开始的时候，<strong>拖拽一个 OC 的源文件</strong>(包含.h 和.m 文件)，而不是拖拽整个源代码的目录到 xcode 中</p>\n<p>图2-1<img src=\"/posts/swift-oc-mix/2-1.jpg\" class=\"\"></p>\n<p>图2-2<img src=\"/posts/swift-oc-mix/2-2.jpg\" class=\"\"></p>\n</li>\n<li><p>下面是拖拽 OC 源代码后的项目浏览结构，xcode自动创建一个 ModuleName-Bridging-Header.h 的头文件，并且设置好了编译选项：</p>\n<p>图2-3<img src=\"/posts/swift-oc-mix/2-3.jpg\" class=\"\"></p>\n<p>图2-4<img src=\"/posts/swift-oc-mix/2-4.jpg\" class=\"\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>OC中调用Swift：**</p>\n<ul>\n<li><p>OC来调用 Swift 的时候，需要依赖一个 Swift <strong>默认提供</strong>的“ModuleName-swift.h”文件，这个文件是隐藏的，<strong>不需要也不能够由开发者来提供</strong>，但是可以使用#include包含到 OC 代码中，这个 OC头文件中可以看到 swift 类、结构体、常量的定义。</p>\n<p>图3-1<img src=\"/posts/swift-oc-mix/3-1.jpg\" class=\"\"></p>\n<p>图3-2<img src=\"/posts/swift-oc-mix/3-2.jpg\" class=\"\"></p>\n</li>\n<li><p>需要注意的是，只有<strong>继承自 NSObject 的swift类才能被 OC 调用</strong>，在 swift.h 文件中是看不到纯 swift类的定义。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>Swift使用OC中的宏</strong></p>\n<ul>\n<li>可以参考<a href=\"http://stackoverflow.com/questions/24325477/how-to-use-a-objective-c-define-from-swift\">这个提问</a></li>\n<li>有哪些问题：<ul>\n<li>Swift 只能使用OC 中常量的宏定义，如<ul>\n<li>#define MAX_WIDTH  100</li>\n<li>#define Name_KeyPath @“Name_KeyPath”</li>\n</ul>\n</li>\n<li>而不同使用函数调用的宏，如<ul>\n<li>#define SCREEN_WIDTH  [[[UIScreen mainScreen] bounds] width]</li>\n<li>#define DBQuerySuccess YES</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>解决方法：<ul>\n<li>在 OC 文件中创建一个Constant类，使用类方法(screenWidth)来包装现有的宏定义</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>@objc 关键字的作用</strong></p>\n<ul>\n<li>当 swift 中要使用 OC 的一些特性的时候，如 runtime，@objc 关键字用来 提供这个功能。</li>\n</ul>\n</li>\n<li><p>源代码</p>\n<ul>\n<li>具体的使用，可以参见 Github上的<a href=\"https://github.com/zenghao0708/SwiftOCMixing\">代码</a></li>\n</ul>\n</li>\n</ul>"},{"title":"Xcode 10 beta 版本迁移指南","abbrlink":"xcode-10-migrate","date":"2018-06-21T12:15:29.000Z","_content":"\n今天的主角就是开发者接触最多的 Xcode 10 beta，详细内容可以参考 [WWDC 18 Session](https://developer.apple.com/videos/play/wwdc2018/408/) ，同时可以看下 Xcode 10 的 [release note](https://developerbetas.com/wp-content/uploads/2018/06/Xcode_10_Beta_Release_Notes.pdf), 官方文档永远是学习新内容的第一手资料。\n\n\n\nXcode 10 beta 在 WWDC 18后就对[开发者开放下载](https://developer.apple.com/xcode/)了，WWDC 18的新内容不多，Apple 今年把主要精力放在 Bugfix和性能优化上面，还这几年欠下来的技术债，关于 iOS 11的诟病一直不绝入耳，不得不说，Apple 今年的决策还是比较明智的。\n\n<!-- more -->\n\n我们项目现在是 OC 和 Swift 混编，Xcode 版本是9.4.1，swift 4，平时用公司的 iMac Late 2013编译感觉有点吃力，用自己的 MBP 14则编译速度足够去喝杯咖啡，享受人生。\n\n\n\n我尝试把自己的主力机（iPhone 7）升级到 iOS 12后，内心抑制不住冲动把14年的 iPhone 6也升级下 iOS 12试试，重新体会到了之前 iOS 的那种流畅，真的是老泪纵横。平时 iPhone 6只能沦为测试手机，跑跑单元测试啥的。\n\n\n\n升级了 iOS 12后，Xcode 9已经不能进行调试了，本着生命不息，折腾不止的精神，顺带体验了一下 Xcode 10的各种新功能，总结了一下升级 Xcode 10过程中踩的坑。\n\n\n\n- Xcode 10 beta 版本迁移指南：\n\n  - > **指定 swift版本**：4.1，Xcode 10使用的是 swift 4.2版本，而 Xcode 9.4则使用 Swift 4.1,基本改动不大，为了兼容 Xcode 9，这里统一使用 Swift 4.1。\n\n    - podfile设置如下:\n\n      - ```\n        config.build_settings['SWIFT_VERSION'] = '4.1'\n        ```\n\n        ​\n\n    - xcode 项目设置：\n\n      - **SWIFT_VERSION**为 swift 4\n\n    - xcode command tool设置: 使用 Xcode 10\n\n      - sudo xcode-select --switch /Applications/Xcode-beta.app\n\n      - xcodebuild -version可以查看\n\n        - ```\n          - Xcode 10.0\n          - Build version 10L176w\n          ```\n\n          ​\n\n  - > 更新部分 pod 库：\n\n    - RACObjcBridge/RACObjc升级到3.1.0，之前是3.0.0版本，swift 版本导致需要升级。\n    - 删除 Tencent SDK pod spec 中的s.resource_bundle字段，参见 xcode 10 beta release note。多个相同的输入文件导致冲突，这个也是 xcode 10新增的功能，为了加快编译速度，对编译依赖检测得很严格。\n    - 使用 Carthage 的话，则需要指定手动指定 Swift 版本：\n      - carthage update --platform iOS --toolchain com.apple.dt.toolchain.Swift_4_1 --no-use-binaries REPO_NAME\n\n  - > 更新 swift lint: disable identifier_name\n\n    - 参见[False positive for rule identifier_name in Xcode 10 beta](https://github.com/realm/SwiftLint/issues/2231)\n\n  - > 其他错误：\n\n    - [Command CompileC failed with a nonzero exit code](https://github.com/mapbox/mapbox-gl-native/issues/12084)\n\n整个升级过程中，需要注意的几点：\n\n- 及时清理 DerivedData目录，由于整个编译过程中会产生众多的中间文件，非常容易导致编译依赖检测出错。\n- 更新 carthage framework和使用 pod install 重新编译第三方库。\n- New Build System: Xcode 9.4引入了 preview 版本，Xcode 10则是默认开启，开启后，编译速度确认有所提升，但是也会导致一些比较奇怪的编译问题，上面只是记录了笔者遇到的几个问题。\n- 完成升级后，Xcode 9.4和 Xcode 10 beta 可以共存，笔者使用 Xcode 10 beta，其他开发同事继续使用 Xcode 9。","source":"_posts/Xcode-10-beta-版本迁移指南.md","raw":"---\ntitle: Xcode 10 beta 版本迁移指南\ncategories: 开发\ntags:\n  - iOS\nabbrlink: xcode-10-migrate\ndate: 2018-06-21 20:15:29\n---\n\n今天的主角就是开发者接触最多的 Xcode 10 beta，详细内容可以参考 [WWDC 18 Session](https://developer.apple.com/videos/play/wwdc2018/408/) ，同时可以看下 Xcode 10 的 [release note](https://developerbetas.com/wp-content/uploads/2018/06/Xcode_10_Beta_Release_Notes.pdf), 官方文档永远是学习新内容的第一手资料。\n\n\n\nXcode 10 beta 在 WWDC 18后就对[开发者开放下载](https://developer.apple.com/xcode/)了，WWDC 18的新内容不多，Apple 今年把主要精力放在 Bugfix和性能优化上面，还这几年欠下来的技术债，关于 iOS 11的诟病一直不绝入耳，不得不说，Apple 今年的决策还是比较明智的。\n\n<!-- more -->\n\n我们项目现在是 OC 和 Swift 混编，Xcode 版本是9.4.1，swift 4，平时用公司的 iMac Late 2013编译感觉有点吃力，用自己的 MBP 14则编译速度足够去喝杯咖啡，享受人生。\n\n\n\n我尝试把自己的主力机（iPhone 7）升级到 iOS 12后，内心抑制不住冲动把14年的 iPhone 6也升级下 iOS 12试试，重新体会到了之前 iOS 的那种流畅，真的是老泪纵横。平时 iPhone 6只能沦为测试手机，跑跑单元测试啥的。\n\n\n\n升级了 iOS 12后，Xcode 9已经不能进行调试了，本着生命不息，折腾不止的精神，顺带体验了一下 Xcode 10的各种新功能，总结了一下升级 Xcode 10过程中踩的坑。\n\n\n\n- Xcode 10 beta 版本迁移指南：\n\n  - > **指定 swift版本**：4.1，Xcode 10使用的是 swift 4.2版本，而 Xcode 9.4则使用 Swift 4.1,基本改动不大，为了兼容 Xcode 9，这里统一使用 Swift 4.1。\n\n    - podfile设置如下:\n\n      - ```\n        config.build_settings['SWIFT_VERSION'] = '4.1'\n        ```\n\n        ​\n\n    - xcode 项目设置：\n\n      - **SWIFT_VERSION**为 swift 4\n\n    - xcode command tool设置: 使用 Xcode 10\n\n      - sudo xcode-select --switch /Applications/Xcode-beta.app\n\n      - xcodebuild -version可以查看\n\n        - ```\n          - Xcode 10.0\n          - Build version 10L176w\n          ```\n\n          ​\n\n  - > 更新部分 pod 库：\n\n    - RACObjcBridge/RACObjc升级到3.1.0，之前是3.0.0版本，swift 版本导致需要升级。\n    - 删除 Tencent SDK pod spec 中的s.resource_bundle字段，参见 xcode 10 beta release note。多个相同的输入文件导致冲突，这个也是 xcode 10新增的功能，为了加快编译速度，对编译依赖检测得很严格。\n    - 使用 Carthage 的话，则需要指定手动指定 Swift 版本：\n      - carthage update --platform iOS --toolchain com.apple.dt.toolchain.Swift_4_1 --no-use-binaries REPO_NAME\n\n  - > 更新 swift lint: disable identifier_name\n\n    - 参见[False positive for rule identifier_name in Xcode 10 beta](https://github.com/realm/SwiftLint/issues/2231)\n\n  - > 其他错误：\n\n    - [Command CompileC failed with a nonzero exit code](https://github.com/mapbox/mapbox-gl-native/issues/12084)\n\n整个升级过程中，需要注意的几点：\n\n- 及时清理 DerivedData目录，由于整个编译过程中会产生众多的中间文件，非常容易导致编译依赖检测出错。\n- 更新 carthage framework和使用 pod install 重新编译第三方库。\n- New Build System: Xcode 9.4引入了 preview 版本，Xcode 10则是默认开启，开启后，编译速度确认有所提升，但是也会导致一些比较奇怪的编译问题，上面只是记录了笔者遇到的几个问题。\n- 完成升级后，Xcode 9.4和 Xcode 10 beta 可以共存，笔者使用 Xcode 10 beta，其他开发同事继续使用 Xcode 9。","slug":"Xcode-10-beta-版本迁移指南","published":1,"updated":"2022-04-05T13:46:10.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6hf968j0007x6u09dm6dnhp","content":"<p>今天的主角就是开发者接触最多的 Xcode 10 beta，详细内容可以参考 <a href=\"https://developer.apple.com/videos/play/wwdc2018/408/\">WWDC 18 Session</a> ，同时可以看下 Xcode 10 的 <a href=\"https://developerbetas.com/wp-content/uploads/2018/06/Xcode_10_Beta_Release_Notes.pdf\">release note</a>, 官方文档永远是学习新内容的第一手资料。</p>\n<p>Xcode 10 beta 在 WWDC 18后就对<a href=\"https://developer.apple.com/xcode/\">开发者开放下载</a>了，WWDC 18的新内容不多，Apple 今年把主要精力放在 Bugfix和性能优化上面，还这几年欠下来的技术债，关于 iOS 11的诟病一直不绝入耳，不得不说，Apple 今年的决策还是比较明智的。</p>\n<span id=\"more\"></span>\n\n<p>我们项目现在是 OC 和 Swift 混编，Xcode 版本是9.4.1，swift 4，平时用公司的 iMac Late 2013编译感觉有点吃力，用自己的 MBP 14则编译速度足够去喝杯咖啡，享受人生。</p>\n<p>我尝试把自己的主力机（iPhone 7）升级到 iOS 12后，内心抑制不住冲动把14年的 iPhone 6也升级下 iOS 12试试，重新体会到了之前 iOS 的那种流畅，真的是老泪纵横。平时 iPhone 6只能沦为测试手机，跑跑单元测试啥的。</p>\n<p>升级了 iOS 12后，Xcode 9已经不能进行调试了，本着生命不息，折腾不止的精神，顺带体验了一下 Xcode 10的各种新功能，总结了一下升级 Xcode 10过程中踩的坑。</p>\n<ul>\n<li><p>Xcode 10 beta 版本迁移指南：</p>\n<ul>\n<li><blockquote>\n<p><strong>指定 swift版本</strong>：4.1，Xcode 10使用的是 swift 4.2版本，而 Xcode 9.4则使用 Swift 4.1,基本改动不大，为了兼容 Xcode 9，这里统一使用 Swift 4.1。</p>\n</blockquote>\n<ul>\n<li><p>podfile设置如下:</p>\n<ul>\n<li>&#96;&#96;&#96;<br>config.build_settings[‘SWIFT_VERSION’] &#x3D; ‘4.1’<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    ​</span><br><span class=\"line\"></span><br><span class=\"line\">- xcode 项目设置：</span><br><span class=\"line\"></span><br><span class=\"line\">  - **SWIFT_VERSION**为 swift 4</span><br><span class=\"line\"></span><br><span class=\"line\">- xcode command tool设置: 使用 Xcode 10</span><br><span class=\"line\"></span><br><span class=\"line\">  - sudo xcode-select --switch /Applications/Xcode-beta.app</span><br><span class=\"line\"></span><br><span class=\"line\">  - xcodebuild -version可以查看</span><br><span class=\"line\"></span><br><span class=\"line\">    - ```</span><br><span class=\"line\">      - Xcode 10.0</span><br><span class=\"line\">      - Build version 10L176w</span><br></pre></td></tr></table></figure>\n\n  ​</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><blockquote>\n<p>更新部分 pod 库：</p>\n</blockquote>\n<ul>\n<li>RACObjcBridge&#x2F;RACObjc升级到3.1.0，之前是3.0.0版本，swift 版本导致需要升级。</li>\n<li>删除 Tencent SDK pod spec 中的s.resource_bundle字段，参见 xcode 10 beta release note。多个相同的输入文件导致冲突，这个也是 xcode 10新增的功能，为了加快编译速度，对编译依赖检测得很严格。</li>\n<li>使用 Carthage 的话，则需要指定手动指定 Swift 版本：<ul>\n<li>carthage update –platform iOS –toolchain com.apple.dt.toolchain.Swift_4_1 –no-use-binaries REPO_NAME</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><blockquote>\n<p>更新 swift lint: disable identifier_name</p>\n</blockquote>\n<ul>\n<li>参见<a href=\"https://github.com/realm/SwiftLint/issues/2231\">False positive for rule identifier_name in Xcode 10 beta</a></li>\n</ul>\n</li>\n<li><blockquote>\n<p>其他错误：</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/mapbox/mapbox-gl-native/issues/12084\">Command CompileC failed with a nonzero exit code</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>整个升级过程中，需要注意的几点：</p>\n<ul>\n<li>及时清理 DerivedData目录，由于整个编译过程中会产生众多的中间文件，非常容易导致编译依赖检测出错。</li>\n<li>更新 carthage framework和使用 pod install 重新编译第三方库。</li>\n<li>New Build System: Xcode 9.4引入了 preview 版本，Xcode 10则是默认开启，开启后，编译速度确认有所提升，但是也会导致一些比较奇怪的编译问题，上面只是记录了笔者遇到的几个问题。</li>\n<li>完成升级后，Xcode 9.4和 Xcode 10 beta 可以共存，笔者使用 Xcode 10 beta，其他开发同事继续使用 Xcode 9。</li>\n</ul>\n","site":{"data":{"hexo-leancloud-counter-security-fix":"/* global hexo */\n\n'use strict';\n\nconst AV = require('leancloud-storage');\nconst readlineSync = require('readline-sync');\nconst packageInfo = require('./package.json');\nconst pathFn = require('path');\nconst fs = require('fs');\n\nfunction generate_post_list(locals) {\n    let { config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    var urlsPath = 'leancloud_counter_security_urls.json';\n    var urls = [...locals.posts.toArray()]\n        .filter(x => x.published)\n        .map(x => {\n            return {\n                title: x.title,\n                url  : config.root + x.path\n            };\n        });\n    return {\n        path: urlsPath,\n        data: JSON.stringify(urls)\n    };\n}\n\nhexo.extend.generator.register('leancloud_counter_security_generator', generate_post_list);\n\nfunction cmp(x, y) {\n    if (x.url < y.url) {\n        return -1;\n    } else if (x.url === y.url) {\n        return 0;\n    }\n    return 1;\n}\n\nfunction postOperation(env, cnt, limit, newData, memoData, log) {\n    if (cnt !== limit) return;\n\n    newData.sort(cmp);\n    var sourceDir = env.source_dir;\n    var publicDir = env.public_dir;\n    var memoFile = pathFn.join(sourceDir, 'leancloud.memo');\n    fs.writeFileSync(memoFile, '[\\n');\n\n    var memoIdx = 1;\n    for (var i = 0; newData[i]; i++) {\n        while (memoData[memoIdx] !== ']') {\n            var y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > newData[i].url) break;\n\n            fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n            memoIdx++;\n        }\n        fs.writeFileSync(memoFile, '{\"title\":\"' + newData[i].title + '\",\"url\":\"' + newData[i].url + '\"},\\n', { flag: 'a' });\n    }\n    while (memoData[memoIdx] !== ']') {\n        fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n        memoIdx++;\n    }\n    fs.writeFileSync(memoFile, memoData[memoIdx], { flag: 'a' });\n\n    var srcFile = pathFn.join(sourceDir, 'leancloud.memo');\n    var destFile = pathFn.join(publicDir, 'leancloud.memo');\n    var readStream = fs.createReadStream(srcFile);\n    var writeStream = fs.createWriteStream(destFile);\n    readStream.pipe(writeStream);\n    log.info('leancloud.memo successfully updated.');\n}\n\nasync function sync() {\n    let { log, config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    let { app_id, app_key, server_url } = config.leancloud_counter_security;\n    var publicDir = this.public_dir;\n    var UrlsFile = pathFn.join(publicDir, 'leancloud_counter_security_urls.json');\n    var urls = JSON.parse(fs.readFileSync(UrlsFile, 'utf8'));\n\n    AV.init({\n        appId    : app_id,\n        appKey   : app_key,\n        serverURL: server_url\n    });\n\n    var currentUser = AV.User.current();\n    if (!currentUser) {\n        var userName = config.leancloud_counter_security.username;\n        var passWord = config.leancloud_counter_security.password;\n        if (!userName) {\n            userName = readlineSync.question('Enter your username: ');\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        } else if (!passWord) {\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        }\n        await AV.User.logIn(userName, passWord).then(loginedUser => {\n            log.info('Logined as: ' + loginedUser.getUsername());\n        }, error => {\n            log.error(error);\n        });\n    }\n\n    log.info('Now syncing your posts list to leancloud counter...');\n    var Counter = AV.Object.extend('Counter');\n    var memoFile = pathFn.join(publicDir, 'leancloud.memo');\n    if (!fs.existsSync(memoFile)) {\n        fs.writeFileSync(memoFile, '[\\n]');\n    }\n    var memoData = fs.readFileSync(memoFile, 'utf-8').split('\\n');\n    var memoIdx = 1;\n    var newData = [];\n    var cnt = 0;\n    var limit = 0;\n    var env = this;\n    urls.sort(cmp).forEach(x => {\n        var y = {};\n        y.title = '';\n        y.url = '';\n        var flag = false;\n        while (memoData[memoIdx] !== ']') {\n            y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > x.url) break;\n            if (y.url === x.url && y.title === x.title) {\n                flag = true;\n                break;\n            }\n            memoIdx++;\n        }\n        if (flag) return;\n\n        log.info('Dealing with record of ' + x.title);\n        limit++;\n        var query = new AV.Query('Counter');\n        query.equalTo('url', x.url);\n        query.count().then(count => {\n            if (count === 0) {\n                var counter = new Counter();\n                counter.set('url', x.url);\n                counter.set('title', x.title);\n                counter.set('time', 0);\n                counter.save().then(obj => {\n                    log.info(x.title + ' is saved as: ' + obj.id);\n                    newData.push(x);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                }, error => {\n                    log.error(error);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                });\n            } else {\n                newData.push(x);\n                cnt++;\n                postOperation(env, cnt, limit, newData, memoData, log);\n            }\n        }, error => {\n            log.error(error);\n            cnt++;\n            postOperation(env, cnt, limit, newData, memoData, log);\n        });\n    });\n}\n\nhexo.extend.deployer.register('leancloud_counter_security_sync', sync);\n\nvar commandOptions = {\n    desc     : packageInfo.description,\n    usage    : ' <argument>',\n    arguments: [\n        {\n            name: 'register | r <username> <password>',\n            desc: 'Register a new user.'\n        }\n    ]\n};\n\nfunction commandFunc(args) {\n    let { log, config } = this;\n\n    if (args._.length !== 3) {\n        log.error('Too Few or Many Arguments.');\n    } else if (args._[0] === 'register' || args._[0] === 'r') {\n        let { app_id, app_key, server_url } = config.leancloud_counter_security;\n        AV.init({\n            appId    : app_id,\n            appKey   : app_key,\n            serverURL: server_url\n        });\n\n        var user = new AV.User();\n        user.setUsername(String(args._[1]));\n        user.setPassword(String(args._[2]));\n        user.signUp().then(loginedUser => {\n            log.info(loginedUser.getUsername() + ' is successfully signed up');\n        }, error => {\n            log.error(error);\n        });\n    } else {\n        log.error('Unknown Command.');\n    }\n}\n\nhexo.extend.console.register('lc-counter', 'hexo-leancloud-counter-security', commandOptions, commandFunc);\n"}},"length":1604,"excerpt":"<p>今天的主角就是开发者接触最多的 Xcode 10 beta，详细内容可以参考 <a href=\"https://developer.apple.com/videos/play/wwdc2018/408/\">WWDC 18 Session</a> ，同时可以看下 Xcode 10 的 <a href=\"https://developerbetas.com/wp-content/uploads/2018/06/Xcode_10_Beta_Release_Notes.pdf\">release note</a>, 官方文档永远是学习新内容的第一手资料。</p>\n<p>Xcode 10 beta 在 WWDC 18后就对<a href=\"https://developer.apple.com/xcode/\">开发者开放下载</a>了，WWDC 18的新内容不多，Apple 今年把主要精力放在 Bugfix和性能优化上面，还这几年欠下来的技术债，关于 iOS 11的诟病一直不绝入耳，不得不说，Apple 今年的决策还是比较明智的。</p>","more":"<p>我们项目现在是 OC 和 Swift 混编，Xcode 版本是9.4.1，swift 4，平时用公司的 iMac Late 2013编译感觉有点吃力，用自己的 MBP 14则编译速度足够去喝杯咖啡，享受人生。</p>\n<p>我尝试把自己的主力机（iPhone 7）升级到 iOS 12后，内心抑制不住冲动把14年的 iPhone 6也升级下 iOS 12试试，重新体会到了之前 iOS 的那种流畅，真的是老泪纵横。平时 iPhone 6只能沦为测试手机，跑跑单元测试啥的。</p>\n<p>升级了 iOS 12后，Xcode 9已经不能进行调试了，本着生命不息，折腾不止的精神，顺带体验了一下 Xcode 10的各种新功能，总结了一下升级 Xcode 10过程中踩的坑。</p>\n<ul>\n<li><p>Xcode 10 beta 版本迁移指南：</p>\n<ul>\n<li><blockquote>\n<p><strong>指定 swift版本</strong>：4.1，Xcode 10使用的是 swift 4.2版本，而 Xcode 9.4则使用 Swift 4.1,基本改动不大，为了兼容 Xcode 9，这里统一使用 Swift 4.1。</p>\n</blockquote>\n<ul>\n<li><p>podfile设置如下:</p>\n<ul>\n<li>&#96;&#96;&#96;<br>config.build_settings[‘SWIFT_VERSION’] &#x3D; ‘4.1’<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    ​</span><br><span class=\"line\"></span><br><span class=\"line\">- xcode 项目设置：</span><br><span class=\"line\"></span><br><span class=\"line\">  - **SWIFT_VERSION**为 swift 4</span><br><span class=\"line\"></span><br><span class=\"line\">- xcode command tool设置: 使用 Xcode 10</span><br><span class=\"line\"></span><br><span class=\"line\">  - sudo xcode-select --switch /Applications/Xcode-beta.app</span><br><span class=\"line\"></span><br><span class=\"line\">  - xcodebuild -version可以查看</span><br><span class=\"line\"></span><br><span class=\"line\">    - ```</span><br><span class=\"line\">      - Xcode 10.0</span><br><span class=\"line\">      - Build version 10L176w</span><br></pre></td></tr></table></figure>\n\n  ​</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><blockquote>\n<p>更新部分 pod 库：</p>\n</blockquote>\n<ul>\n<li>RACObjcBridge&#x2F;RACObjc升级到3.1.0，之前是3.0.0版本，swift 版本导致需要升级。</li>\n<li>删除 Tencent SDK pod spec 中的s.resource_bundle字段，参见 xcode 10 beta release note。多个相同的输入文件导致冲突，这个也是 xcode 10新增的功能，为了加快编译速度，对编译依赖检测得很严格。</li>\n<li>使用 Carthage 的话，则需要指定手动指定 Swift 版本：<ul>\n<li>carthage update –platform iOS –toolchain com.apple.dt.toolchain.Swift_4_1 –no-use-binaries REPO_NAME</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><blockquote>\n<p>更新 swift lint: disable identifier_name</p>\n</blockquote>\n<ul>\n<li>参见<a href=\"https://github.com/realm/SwiftLint/issues/2231\">False positive for rule identifier_name in Xcode 10 beta</a></li>\n</ul>\n</li>\n<li><blockquote>\n<p>其他错误：</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/mapbox/mapbox-gl-native/issues/12084\">Command CompileC failed with a nonzero exit code</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>整个升级过程中，需要注意的几点：</p>\n<ul>\n<li>及时清理 DerivedData目录，由于整个编译过程中会产生众多的中间文件，非常容易导致编译依赖检测出错。</li>\n<li>更新 carthage framework和使用 pod install 重新编译第三方库。</li>\n<li>New Build System: Xcode 9.4引入了 preview 版本，Xcode 10则是默认开启，开启后，编译速度确认有所提升，但是也会导致一些比较奇怪的编译问题，上面只是记录了笔者遇到的几个问题。</li>\n<li>完成升级后，Xcode 9.4和 Xcode 10 beta 可以共存，笔者使用 Xcode 10 beta，其他开发同事继续使用 Xcode 9。</li>\n</ul>"},{"title":"Xcode问题锦集","abbrlink":"xcode-tips","date":"2017-08-12T12:59:56.000Z","_content":"\nXcode 是 iOS开发人员的利器，偶尔也会变为“猪队友”，下面是本人在开发中积累的一些遇到的问题和解决方案。\n\n<!-- more -->\n\n1. **代码提示不起作用**：\n   This fix from apple dev forums works for me. I have had autocomplete issues with Xcode 6.1/Yosemite.\n   1. Quit Xcode.\n   2. Restart the computer (this is to clear any in-memory caches).\n   3. Delete the contents of the DerivedData folder (~/Library/Developer/Xcode/DerivedData), precisely run, \n      a) **cd ~/Library/Developer/Xcode/DerivedData/** \n      b) **rm -rf ***\n   4. (Try this if Steps 1-3 dont really work as it rebuilds the cache later on restart which takes time) Delete the contents of folder ~/Library/Caches/com.apple.dt.Xcode, i.e., \n      a) **cd ~/Library/Caches/com.apple.dt.Xcode** \n      b) **rm -rf ***\n   5. Now launch Xcode once more…\n2. **Logic Testing Unavailable**：\n   Logic Testing on iOS devices is not supported. You can run logic tests on the Simulator.\n   [http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported](http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported)\n   [Log](http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported)\n   ic test need a framework which has not installed with iOS device. Set a Host Application for Unit Test can resolve this issue: App will run first and Uint Test run.\n3. **$(inherited) in xcode**:\n   1. inherited值的是xcode设置项的继承关系。\n   2. 每个项目都有PROJECT的设置与TARGETS设置，TARGETS一般情况下就是继承自PROJECT\n4. **“Xcode 6.3: Can not verify build to install on device\"**\n   1. $(inherited) can be used to inherit build settings from the project level to the target level. When you define library or header search paths at the project level you can use $(inherited) in the target build settings to use these search paths in the search paths of the project targets.\n5. **Verify Xcode:**\n   1. spctl --assess --verbose /Applications/Xcode.app\n6. **Xcode显示模拟器时，使用的是UUID，而不是系统型号**\n   1. [http://stackoverflow.com/questions/26533025/xcode-using-guid-instead-of-ios-version-number-in-simulator-selection](http://stackoverflow.com/questions/26533025/xcode-using-guid-instead-of-ios-version-number-in-simulator-selection)\n   2. 在Xcode->Devices里，选中重复的模拟器，右键菜单“删除”，即可。\n7. **iPhone Simulator没有网络**\n   1. [http://stackoverflow.com/questions/13542706/iphone-simulator-cannot-connect-to-internet](http://stackoverflow.com/questions/13542706/iphone-simulator-cannot-connect-to-internet)\n   2. iOS Simulator (menu, top left) > Reset Content and Settings... fixed it for me. Note this will delete all the apps and associated data you have on the simulator.\n8. **ineligible device**\n   1. 当前iOS版本比xcode版本高，就会出现这种情况，如iOS 9.1 就不能在Xcode 7上面进行调试，而只能在xcode 7.1进行调试。\n9. **更新xcode版本后，出现插件不兼容的问题**\n   1. [fix-xcode-upgrade-plugin-invalid](http://joeshang.github.io/2015/04/10/fix-xcode-upgrade-plugin-invalid/)\n   2. find ~/Library/Application\\ Support/Developer/Shared/Xcode/Plug-ins -name Info.plist -maxdepth 3 | xargs -I{} defaults write {} DVTPlugInCompatibilityUUIDs -array-add `defaults read /Applications/Xcode.app/Contents/Info.plist DVTPlugInCompatibilityUUID`\n10. **检查代码中的FIXME、TODO、ERROR**\n   1. [http://krakendev.io/blog/generating-warnings-in-xcode](http://krakendev.io/blog/generating-warnings-in-xcode)\n11. **Xcode 7.3(Swift 2.2) Release配置出现Crash：**\n    1. 在Debug和Staging配置环境下的build没有问题，但是Release编译出来的build会出现crash: unrecognised selector sent to instance\n    2. 尝试方法\n       1. 《[iOS开发调试技巧](http://www.jianshu.com/p/06fcd298ef4c)》\n    3. 解决方法：\n       1. 在Swift Compiler -> Code Generation选择,使用**Fast [-O]，而不能使用Fast, Whole Module Optimization**\n12. **查看所有的Simulator：**\n    1. xcrun simctl list devices\n13. **Xcode 注释功能不起作用：**\n    1. 重启 Xcode,重启 MAC\n    2. 运行：sudo usr/libexec/xpccachectl\n    3. 重命名 Xcode，然后打开，恢复后，重新改名为 Xcode\n14. **使用 Code Snippet**\n    1. [Xcode开发技巧之code snippets(代码片段)](http://blog.csdn.net/wzzvictory/article/details/12163939)\n    2. <#type#>占位符\n    3. Xcode中的代码片段默认放在下面的目录中：~/Library/Developer/Xcode/UserData/CodeSnippets","source":"_posts/Xcode问题锦集.md","raw":"---\ntitle: Xcode问题锦集\ntags:\n  - iOS\ncategories: 开发\nabbrlink: xcode-tips\ndate: 2017-08-12 20:59:56\n---\n\nXcode 是 iOS开发人员的利器，偶尔也会变为“猪队友”，下面是本人在开发中积累的一些遇到的问题和解决方案。\n\n<!-- more -->\n\n1. **代码提示不起作用**：\n   This fix from apple dev forums works for me. I have had autocomplete issues with Xcode 6.1/Yosemite.\n   1. Quit Xcode.\n   2. Restart the computer (this is to clear any in-memory caches).\n   3. Delete the contents of the DerivedData folder (~/Library/Developer/Xcode/DerivedData), precisely run, \n      a) **cd ~/Library/Developer/Xcode/DerivedData/** \n      b) **rm -rf ***\n   4. (Try this if Steps 1-3 dont really work as it rebuilds the cache later on restart which takes time) Delete the contents of folder ~/Library/Caches/com.apple.dt.Xcode, i.e., \n      a) **cd ~/Library/Caches/com.apple.dt.Xcode** \n      b) **rm -rf ***\n   5. Now launch Xcode once more…\n2. **Logic Testing Unavailable**：\n   Logic Testing on iOS devices is not supported. You can run logic tests on the Simulator.\n   [http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported](http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported)\n   [Log](http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported)\n   ic test need a framework which has not installed with iOS device. Set a Host Application for Unit Test can resolve this issue: App will run first and Uint Test run.\n3. **$(inherited) in xcode**:\n   1. inherited值的是xcode设置项的继承关系。\n   2. 每个项目都有PROJECT的设置与TARGETS设置，TARGETS一般情况下就是继承自PROJECT\n4. **“Xcode 6.3: Can not verify build to install on device\"**\n   1. $(inherited) can be used to inherit build settings from the project level to the target level. When you define library or header search paths at the project level you can use $(inherited) in the target build settings to use these search paths in the search paths of the project targets.\n5. **Verify Xcode:**\n   1. spctl --assess --verbose /Applications/Xcode.app\n6. **Xcode显示模拟器时，使用的是UUID，而不是系统型号**\n   1. [http://stackoverflow.com/questions/26533025/xcode-using-guid-instead-of-ios-version-number-in-simulator-selection](http://stackoverflow.com/questions/26533025/xcode-using-guid-instead-of-ios-version-number-in-simulator-selection)\n   2. 在Xcode->Devices里，选中重复的模拟器，右键菜单“删除”，即可。\n7. **iPhone Simulator没有网络**\n   1. [http://stackoverflow.com/questions/13542706/iphone-simulator-cannot-connect-to-internet](http://stackoverflow.com/questions/13542706/iphone-simulator-cannot-connect-to-internet)\n   2. iOS Simulator (menu, top left) > Reset Content and Settings... fixed it for me. Note this will delete all the apps and associated data you have on the simulator.\n8. **ineligible device**\n   1. 当前iOS版本比xcode版本高，就会出现这种情况，如iOS 9.1 就不能在Xcode 7上面进行调试，而只能在xcode 7.1进行调试。\n9. **更新xcode版本后，出现插件不兼容的问题**\n   1. [fix-xcode-upgrade-plugin-invalid](http://joeshang.github.io/2015/04/10/fix-xcode-upgrade-plugin-invalid/)\n   2. find ~/Library/Application\\ Support/Developer/Shared/Xcode/Plug-ins -name Info.plist -maxdepth 3 | xargs -I{} defaults write {} DVTPlugInCompatibilityUUIDs -array-add `defaults read /Applications/Xcode.app/Contents/Info.plist DVTPlugInCompatibilityUUID`\n10. **检查代码中的FIXME、TODO、ERROR**\n   1. [http://krakendev.io/blog/generating-warnings-in-xcode](http://krakendev.io/blog/generating-warnings-in-xcode)\n11. **Xcode 7.3(Swift 2.2) Release配置出现Crash：**\n    1. 在Debug和Staging配置环境下的build没有问题，但是Release编译出来的build会出现crash: unrecognised selector sent to instance\n    2. 尝试方法\n       1. 《[iOS开发调试技巧](http://www.jianshu.com/p/06fcd298ef4c)》\n    3. 解决方法：\n       1. 在Swift Compiler -> Code Generation选择,使用**Fast [-O]，而不能使用Fast, Whole Module Optimization**\n12. **查看所有的Simulator：**\n    1. xcrun simctl list devices\n13. **Xcode 注释功能不起作用：**\n    1. 重启 Xcode,重启 MAC\n    2. 运行：sudo usr/libexec/xpccachectl\n    3. 重命名 Xcode，然后打开，恢复后，重新改名为 Xcode\n14. **使用 Code Snippet**\n    1. [Xcode开发技巧之code snippets(代码片段)](http://blog.csdn.net/wzzvictory/article/details/12163939)\n    2. <#type#>占位符\n    3. Xcode中的代码片段默认放在下面的目录中：~/Library/Developer/Xcode/UserData/CodeSnippets","slug":"Xcode问题锦集","published":1,"updated":"2022-04-05T13:46:10.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6hf968j0008x6u04vhgex2y","content":"<p>Xcode 是 iOS开发人员的利器，偶尔也会变为“猪队友”，下面是本人在开发中积累的一些遇到的问题和解决方案。</p>\n<span id=\"more\"></span>\n\n<ol>\n<li><strong>代码提示不起作用</strong>：<br>This fix from apple dev forums works for me. I have had autocomplete issues with Xcode 6.1&#x2F;Yosemite.<ol>\n<li>Quit Xcode.</li>\n<li>Restart the computer (this is to clear any in-memory caches).</li>\n<li>Delete the contents of the DerivedData folder (~&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData), precisely run,<br>a) <strong>cd ~&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData&#x2F;</strong><br>b) **rm -rf ***</li>\n<li>(Try this if Steps 1-3 dont really work as it rebuilds the cache later on restart which takes time) Delete the contents of folder ~&#x2F;Library&#x2F;Caches&#x2F;com.apple.dt.Xcode, i.e.,<br>a) <strong>cd ~&#x2F;Library&#x2F;Caches&#x2F;com.apple.dt.Xcode</strong><br>b) **rm -rf ***</li>\n<li>Now launch Xcode once more…</li>\n</ol>\n</li>\n<li><strong>Logic Testing Unavailable</strong>：<br>Logic Testing on iOS devices is not supported. You can run logic tests on the Simulator.<br><a href=\"http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported\">http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported</a><br><a href=\"http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported\">Log</a><br>ic test need a framework which has not installed with iOS device. Set a Host Application for Unit Test can resolve this issue: App will run first and Uint Test run.</li>\n<li><strong>$(inherited) in xcode</strong>:<ol>\n<li>inherited值的是xcode设置项的继承关系。</li>\n<li>每个项目都有PROJECT的设置与TARGETS设置，TARGETS一般情况下就是继承自PROJECT</li>\n</ol>\n</li>\n<li><strong>“Xcode 6.3: Can not verify build to install on device”</strong><ol>\n<li>$(inherited) can be used to inherit build settings from the project level to the target level. When you define library or header search paths at the project level you can use $(inherited) in the target build settings to use these search paths in the search paths of the project targets.</li>\n</ol>\n</li>\n<li><strong>Verify Xcode:</strong><ol>\n<li>spctl –assess –verbose &#x2F;Applications&#x2F;Xcode.app</li>\n</ol>\n</li>\n<li><strong>Xcode显示模拟器时，使用的是UUID，而不是系统型号</strong><ol>\n<li><a href=\"http://stackoverflow.com/questions/26533025/xcode-using-guid-instead-of-ios-version-number-in-simulator-selection\">http://stackoverflow.com/questions/26533025/xcode-using-guid-instead-of-ios-version-number-in-simulator-selection</a></li>\n<li>在Xcode-&gt;Devices里，选中重复的模拟器，右键菜单“删除”，即可。</li>\n</ol>\n</li>\n<li><strong>iPhone Simulator没有网络</strong><ol>\n<li><a href=\"http://stackoverflow.com/questions/13542706/iphone-simulator-cannot-connect-to-internet\">http://stackoverflow.com/questions/13542706/iphone-simulator-cannot-connect-to-internet</a></li>\n<li>iOS Simulator (menu, top left) &gt; Reset Content and Settings… fixed it for me. Note this will delete all the apps and associated data you have on the simulator.</li>\n</ol>\n</li>\n<li><strong>ineligible device</strong><ol>\n<li>当前iOS版本比xcode版本高，就会出现这种情况，如iOS 9.1 就不能在Xcode 7上面进行调试，而只能在xcode 7.1进行调试。</li>\n</ol>\n</li>\n<li><strong>更新xcode版本后，出现插件不兼容的问题</strong><ol>\n<li><a href=\"http://joeshang.github.io/2015/04/10/fix-xcode-upgrade-plugin-invalid/\">fix-xcode-upgrade-plugin-invalid</a></li>\n<li>find ~&#x2F;Library&#x2F;Application\\ Support&#x2F;Developer&#x2F;Shared&#x2F;Xcode&#x2F;Plug-ins -name Info.plist -maxdepth 3 | xargs -I{} defaults write {} DVTPlugInCompatibilityUUIDs -array-add <code>defaults read /Applications/Xcode.app/Contents/Info.plist DVTPlugInCompatibilityUUID</code></li>\n</ol>\n</li>\n<li><strong>检查代码中的FIXME、TODO、ERROR</strong></li>\n<li><a href=\"http://krakendev.io/blog/generating-warnings-in-xcode\">http://krakendev.io/blog/generating-warnings-in-xcode</a></li>\n<li><strong>Xcode 7.3(Swift 2.2) Release配置出现Crash：</strong><ol>\n<li>在Debug和Staging配置环境下的build没有问题，但是Release编译出来的build会出现crash: unrecognised selector sent to instance</li>\n<li>尝试方法<ol>\n<li>《<a href=\"http://www.jianshu.com/p/06fcd298ef4c\">iOS开发调试技巧</a>》</li>\n</ol>\n</li>\n<li>解决方法：<ol>\n<li>在Swift Compiler -&gt; Code Generation选择,使用<strong>Fast [-O]，而不能使用Fast, Whole Module Optimization</strong></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><strong>查看所有的Simulator：</strong><ol>\n<li>xcrun simctl list devices</li>\n</ol>\n</li>\n<li><strong>Xcode 注释功能不起作用：</strong><ol>\n<li>重启 Xcode,重启 MAC</li>\n<li>运行：sudo usr&#x2F;libexec&#x2F;xpccachectl</li>\n<li>重命名 Xcode，然后打开，恢复后，重新改名为 Xcode</li>\n</ol>\n</li>\n<li><strong>使用 Code Snippet</strong><ol>\n<li><a href=\"http://blog.csdn.net/wzzvictory/article/details/12163939\">Xcode开发技巧之code snippets(代码片段)</a></li>\n<li>&lt;#type#&gt;占位符</li>\n<li>Xcode中的代码片段默认放在下面的目录中：~&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;UserData&#x2F;CodeSnippets</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{"hexo-leancloud-counter-security-fix":"/* global hexo */\n\n'use strict';\n\nconst AV = require('leancloud-storage');\nconst readlineSync = require('readline-sync');\nconst packageInfo = require('./package.json');\nconst pathFn = require('path');\nconst fs = require('fs');\n\nfunction generate_post_list(locals) {\n    let { config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    var urlsPath = 'leancloud_counter_security_urls.json';\n    var urls = [...locals.posts.toArray()]\n        .filter(x => x.published)\n        .map(x => {\n            return {\n                title: x.title,\n                url  : config.root + x.path\n            };\n        });\n    return {\n        path: urlsPath,\n        data: JSON.stringify(urls)\n    };\n}\n\nhexo.extend.generator.register('leancloud_counter_security_generator', generate_post_list);\n\nfunction cmp(x, y) {\n    if (x.url < y.url) {\n        return -1;\n    } else if (x.url === y.url) {\n        return 0;\n    }\n    return 1;\n}\n\nfunction postOperation(env, cnt, limit, newData, memoData, log) {\n    if (cnt !== limit) return;\n\n    newData.sort(cmp);\n    var sourceDir = env.source_dir;\n    var publicDir = env.public_dir;\n    var memoFile = pathFn.join(sourceDir, 'leancloud.memo');\n    fs.writeFileSync(memoFile, '[\\n');\n\n    var memoIdx = 1;\n    for (var i = 0; newData[i]; i++) {\n        while (memoData[memoIdx] !== ']') {\n            var y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > newData[i].url) break;\n\n            fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n            memoIdx++;\n        }\n        fs.writeFileSync(memoFile, '{\"title\":\"' + newData[i].title + '\",\"url\":\"' + newData[i].url + '\"},\\n', { flag: 'a' });\n    }\n    while (memoData[memoIdx] !== ']') {\n        fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n        memoIdx++;\n    }\n    fs.writeFileSync(memoFile, memoData[memoIdx], { flag: 'a' });\n\n    var srcFile = pathFn.join(sourceDir, 'leancloud.memo');\n    var destFile = pathFn.join(publicDir, 'leancloud.memo');\n    var readStream = fs.createReadStream(srcFile);\n    var writeStream = fs.createWriteStream(destFile);\n    readStream.pipe(writeStream);\n    log.info('leancloud.memo successfully updated.');\n}\n\nasync function sync() {\n    let { log, config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    let { app_id, app_key, server_url } = config.leancloud_counter_security;\n    var publicDir = this.public_dir;\n    var UrlsFile = pathFn.join(publicDir, 'leancloud_counter_security_urls.json');\n    var urls = JSON.parse(fs.readFileSync(UrlsFile, 'utf8'));\n\n    AV.init({\n        appId    : app_id,\n        appKey   : app_key,\n        serverURL: server_url\n    });\n\n    var currentUser = AV.User.current();\n    if (!currentUser) {\n        var userName = config.leancloud_counter_security.username;\n        var passWord = config.leancloud_counter_security.password;\n        if (!userName) {\n            userName = readlineSync.question('Enter your username: ');\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        } else if (!passWord) {\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        }\n        await AV.User.logIn(userName, passWord).then(loginedUser => {\n            log.info('Logined as: ' + loginedUser.getUsername());\n        }, error => {\n            log.error(error);\n        });\n    }\n\n    log.info('Now syncing your posts list to leancloud counter...');\n    var Counter = AV.Object.extend('Counter');\n    var memoFile = pathFn.join(publicDir, 'leancloud.memo');\n    if (!fs.existsSync(memoFile)) {\n        fs.writeFileSync(memoFile, '[\\n]');\n    }\n    var memoData = fs.readFileSync(memoFile, 'utf-8').split('\\n');\n    var memoIdx = 1;\n    var newData = [];\n    var cnt = 0;\n    var limit = 0;\n    var env = this;\n    urls.sort(cmp).forEach(x => {\n        var y = {};\n        y.title = '';\n        y.url = '';\n        var flag = false;\n        while (memoData[memoIdx] !== ']') {\n            y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > x.url) break;\n            if (y.url === x.url && y.title === x.title) {\n                flag = true;\n                break;\n            }\n            memoIdx++;\n        }\n        if (flag) return;\n\n        log.info('Dealing with record of ' + x.title);\n        limit++;\n        var query = new AV.Query('Counter');\n        query.equalTo('url', x.url);\n        query.count().then(count => {\n            if (count === 0) {\n                var counter = new Counter();\n                counter.set('url', x.url);\n                counter.set('title', x.title);\n                counter.set('time', 0);\n                counter.save().then(obj => {\n                    log.info(x.title + ' is saved as: ' + obj.id);\n                    newData.push(x);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                }, error => {\n                    log.error(error);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                });\n            } else {\n                newData.push(x);\n                cnt++;\n                postOperation(env, cnt, limit, newData, memoData, log);\n            }\n        }, error => {\n            log.error(error);\n            cnt++;\n            postOperation(env, cnt, limit, newData, memoData, log);\n        });\n    });\n}\n\nhexo.extend.deployer.register('leancloud_counter_security_sync', sync);\n\nvar commandOptions = {\n    desc     : packageInfo.description,\n    usage    : ' <argument>',\n    arguments: [\n        {\n            name: 'register | r <username> <password>',\n            desc: 'Register a new user.'\n        }\n    ]\n};\n\nfunction commandFunc(args) {\n    let { log, config } = this;\n\n    if (args._.length !== 3) {\n        log.error('Too Few or Many Arguments.');\n    } else if (args._[0] === 'register' || args._[0] === 'r') {\n        let { app_id, app_key, server_url } = config.leancloud_counter_security;\n        AV.init({\n            appId    : app_id,\n            appKey   : app_key,\n            serverURL: server_url\n        });\n\n        var user = new AV.User();\n        user.setUsername(String(args._[1]));\n        user.setPassword(String(args._[2]));\n        user.signUp().then(loginedUser => {\n            log.info(loginedUser.getUsername() + ' is successfully signed up');\n        }, error => {\n            log.error(error);\n        });\n    } else {\n        log.error('Unknown Command.');\n    }\n}\n\nhexo.extend.console.register('lc-counter', 'hexo-leancloud-counter-security', commandOptions, commandFunc);\n"}},"length":2829,"excerpt":"<p>Xcode 是 iOS开发人员的利器，偶尔也会变为“猪队友”，下面是本人在开发中积累的一些遇到的问题和解决方案。</p>","more":"<ol>\n<li><strong>代码提示不起作用</strong>：<br>This fix from apple dev forums works for me. I have had autocomplete issues with Xcode 6.1&#x2F;Yosemite.<ol>\n<li>Quit Xcode.</li>\n<li>Restart the computer (this is to clear any in-memory caches).</li>\n<li>Delete the contents of the DerivedData folder (~&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData), precisely run,<br>a) <strong>cd ~&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData&#x2F;</strong><br>b) **rm -rf ***</li>\n<li>(Try this if Steps 1-3 dont really work as it rebuilds the cache later on restart which takes time) Delete the contents of folder ~&#x2F;Library&#x2F;Caches&#x2F;com.apple.dt.Xcode, i.e.,<br>a) <strong>cd ~&#x2F;Library&#x2F;Caches&#x2F;com.apple.dt.Xcode</strong><br>b) **rm -rf ***</li>\n<li>Now launch Xcode once more…</li>\n</ol>\n</li>\n<li><strong>Logic Testing Unavailable</strong>：<br>Logic Testing on iOS devices is not supported. You can run logic tests on the Simulator.<br><a href=\"http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported\">http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported</a><br><a href=\"http://stackoverflow.com/questions/8454935/logic-testing-on-ios-devices-is-not-supported\">Log</a><br>ic test need a framework which has not installed with iOS device. Set a Host Application for Unit Test can resolve this issue: App will run first and Uint Test run.</li>\n<li><strong>$(inherited) in xcode</strong>:<ol>\n<li>inherited值的是xcode设置项的继承关系。</li>\n<li>每个项目都有PROJECT的设置与TARGETS设置，TARGETS一般情况下就是继承自PROJECT</li>\n</ol>\n</li>\n<li><strong>“Xcode 6.3: Can not verify build to install on device”</strong><ol>\n<li>$(inherited) can be used to inherit build settings from the project level to the target level. When you define library or header search paths at the project level you can use $(inherited) in the target build settings to use these search paths in the search paths of the project targets.</li>\n</ol>\n</li>\n<li><strong>Verify Xcode:</strong><ol>\n<li>spctl –assess –verbose &#x2F;Applications&#x2F;Xcode.app</li>\n</ol>\n</li>\n<li><strong>Xcode显示模拟器时，使用的是UUID，而不是系统型号</strong><ol>\n<li><a href=\"http://stackoverflow.com/questions/26533025/xcode-using-guid-instead-of-ios-version-number-in-simulator-selection\">http://stackoverflow.com/questions/26533025/xcode-using-guid-instead-of-ios-version-number-in-simulator-selection</a></li>\n<li>在Xcode-&gt;Devices里，选中重复的模拟器，右键菜单“删除”，即可。</li>\n</ol>\n</li>\n<li><strong>iPhone Simulator没有网络</strong><ol>\n<li><a href=\"http://stackoverflow.com/questions/13542706/iphone-simulator-cannot-connect-to-internet\">http://stackoverflow.com/questions/13542706/iphone-simulator-cannot-connect-to-internet</a></li>\n<li>iOS Simulator (menu, top left) &gt; Reset Content and Settings… fixed it for me. Note this will delete all the apps and associated data you have on the simulator.</li>\n</ol>\n</li>\n<li><strong>ineligible device</strong><ol>\n<li>当前iOS版本比xcode版本高，就会出现这种情况，如iOS 9.1 就不能在Xcode 7上面进行调试，而只能在xcode 7.1进行调试。</li>\n</ol>\n</li>\n<li><strong>更新xcode版本后，出现插件不兼容的问题</strong><ol>\n<li><a href=\"http://joeshang.github.io/2015/04/10/fix-xcode-upgrade-plugin-invalid/\">fix-xcode-upgrade-plugin-invalid</a></li>\n<li>find ~&#x2F;Library&#x2F;Application\\ Support&#x2F;Developer&#x2F;Shared&#x2F;Xcode&#x2F;Plug-ins -name Info.plist -maxdepth 3 | xargs -I{} defaults write {} DVTPlugInCompatibilityUUIDs -array-add <code>defaults read /Applications/Xcode.app/Contents/Info.plist DVTPlugInCompatibilityUUID</code></li>\n</ol>\n</li>\n<li><strong>检查代码中的FIXME、TODO、ERROR</strong></li>\n<li><a href=\"http://krakendev.io/blog/generating-warnings-in-xcode\">http://krakendev.io/blog/generating-warnings-in-xcode</a></li>\n<li><strong>Xcode 7.3(Swift 2.2) Release配置出现Crash：</strong><ol>\n<li>在Debug和Staging配置环境下的build没有问题，但是Release编译出来的build会出现crash: unrecognised selector sent to instance</li>\n<li>尝试方法<ol>\n<li>《<a href=\"http://www.jianshu.com/p/06fcd298ef4c\">iOS开发调试技巧</a>》</li>\n</ol>\n</li>\n<li>解决方法：<ol>\n<li>在Swift Compiler -&gt; Code Generation选择,使用<strong>Fast [-O]，而不能使用Fast, Whole Module Optimization</strong></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><strong>查看所有的Simulator：</strong><ol>\n<li>xcrun simctl list devices</li>\n</ol>\n</li>\n<li><strong>Xcode 注释功能不起作用：</strong><ol>\n<li>重启 Xcode,重启 MAC</li>\n<li>运行：sudo usr&#x2F;libexec&#x2F;xpccachectl</li>\n<li>重命名 Xcode，然后打开，恢复后，重新改名为 Xcode</li>\n</ol>\n</li>\n<li><strong>使用 Code Snippet</strong><ol>\n<li><a href=\"http://blog.csdn.net/wzzvictory/article/details/12163939\">Xcode开发技巧之code snippets(代码片段)</a></li>\n<li>&lt;#type#&gt;占位符</li>\n<li>Xcode中的代码片段默认放在下面的目录中：~&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;UserData&#x2F;CodeSnippets</li>\n</ol>\n</li>\n</ol>"},{"title":"git常用手册","abbrlink":"git_manual","date":"2016-11-11T08:26:14.000Z","_content":"\nGit 是每个开发童鞋必须掌握的工具，本文记录博主日常开发使用 git时，遇到的问题和常用的解决方法：\n\n<!-- more -->\n\n1. No submodule mapping found in .gitmodules for path 'Frameworks/XXX'\n    1. 参考：http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule\n    2. $**git submodule**\n    3. $**git rm 'Frameworks/XXX'**\n2. 检查非法的branch名字\n    1. A branch name can not:\n- Have a path component that begins with \".\"\n- Have a double dot \"..\"\n- Have an ASCII control character, \"~\", \"^\", \":\" or SP, anywhere\n- End with a \"/\" - End with \".lock\"\n- Contain a \"\\\" (backslash\n3. 拉取其他分支代码到当前分支：Git pull rebase\n    1. 当我们需要从别的分支上面拉取代码，并且希望被拉取的commit能够很好地rebase到当前分支,我们就需要用到pull rebase\n    2. 示例：从develop拉取代码到当前分支：\n        * 确保本地分支代码和develop都已经push到origin\n        * git pull --rebase origin develop\n            * 把develop分支代码拉取到当前分支，此时会发现当前分支和develop分支代码并没有rebase,还是在两条不同的线上\n            * 拉取完成后会发现如下的一些提示：\n                * On branch feature/music\n                * Your branch and 'origin/feature/xxx' have diverged,\n                * and have 9 and 6 different commits each, respectively.\n                * (use \"git pull\" to merge the remote branch into yours)\n                * nothing to commit, working directory clean\n        * git push -f\n            * 把本地分支和develop分支强行push到origin\n            * git push 会导致错误，因为使用pull rebase操作会生成两个不同的分支（Your branch and 'origin/feature/music' have diverged）\n4. Git分支管理策略\n     1.推荐阅读 《[Git分支管理策略 - 阮一峰的网络日志](http://www.ruanyifeng.com/blog/2012/07/git.html)》\n5. git workflow:\n        1. 只需要保留master和develop分支。\n        2. 日常开发时，从develop上面开一个feature分支，完成开发后，按需merge到develop分支中，merge成功后，可以删除feature分支。\n        3. 发布前，使用release分支\n        4. 产品上线后，使用从master分支fork出hotfix分支，完成bug修复后，merge到master和develop分支。\n6. Github pull request\n    1. 《Mort | Pull Request的正确打开方式（如何在GitHub上贡献开源项目）》 -- 原文404，可以参考转载\n7. Github Repo Migration:\n    1. Github fork repo\n    2. Github import repo\n8. Git 修改commit message:\n    1. git commit --amend -m \"New commit message\"\n9. 查找commit message:\n    1. git log --oneline | grep PATTERN\n10. 多个github账号的管理：\n   1. https://gist.github.com/jexchan/2351996\n   2. 本人常年使用公司和个人的Github帐号，在正确配置github帐号后，可以用命令行进行帐号切换。\n11. 清除git缓存：\n    1. 有的时候会出现.gitignore文件不起作用的情况，需要清理git缓存：\n    2. $ git rm --cached -r FOLDER_NAME\n    3. $ git add .\n    4. $ git commit -m “COMMIT_MSG\"","source":"_posts/git常用手册.md","raw":"---\ntitle: git常用手册\ntags: git\ncategories: 开发\nabbrlink: git_manual\ndate: 2016-11-11 16:26:14\n---\n\nGit 是每个开发童鞋必须掌握的工具，本文记录博主日常开发使用 git时，遇到的问题和常用的解决方法：\n\n<!-- more -->\n\n1. No submodule mapping found in .gitmodules for path 'Frameworks/XXX'\n    1. 参考：http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule\n    2. $**git submodule**\n    3. $**git rm 'Frameworks/XXX'**\n2. 检查非法的branch名字\n    1. A branch name can not:\n- Have a path component that begins with \".\"\n- Have a double dot \"..\"\n- Have an ASCII control character, \"~\", \"^\", \":\" or SP, anywhere\n- End with a \"/\" - End with \".lock\"\n- Contain a \"\\\" (backslash\n3. 拉取其他分支代码到当前分支：Git pull rebase\n    1. 当我们需要从别的分支上面拉取代码，并且希望被拉取的commit能够很好地rebase到当前分支,我们就需要用到pull rebase\n    2. 示例：从develop拉取代码到当前分支：\n        * 确保本地分支代码和develop都已经push到origin\n        * git pull --rebase origin develop\n            * 把develop分支代码拉取到当前分支，此时会发现当前分支和develop分支代码并没有rebase,还是在两条不同的线上\n            * 拉取完成后会发现如下的一些提示：\n                * On branch feature/music\n                * Your branch and 'origin/feature/xxx' have diverged,\n                * and have 9 and 6 different commits each, respectively.\n                * (use \"git pull\" to merge the remote branch into yours)\n                * nothing to commit, working directory clean\n        * git push -f\n            * 把本地分支和develop分支强行push到origin\n            * git push 会导致错误，因为使用pull rebase操作会生成两个不同的分支（Your branch and 'origin/feature/music' have diverged）\n4. Git分支管理策略\n     1.推荐阅读 《[Git分支管理策略 - 阮一峰的网络日志](http://www.ruanyifeng.com/blog/2012/07/git.html)》\n5. git workflow:\n        1. 只需要保留master和develop分支。\n        2. 日常开发时，从develop上面开一个feature分支，完成开发后，按需merge到develop分支中，merge成功后，可以删除feature分支。\n        3. 发布前，使用release分支\n        4. 产品上线后，使用从master分支fork出hotfix分支，完成bug修复后，merge到master和develop分支。\n6. Github pull request\n    1. 《Mort | Pull Request的正确打开方式（如何在GitHub上贡献开源项目）》 -- 原文404，可以参考转载\n7. Github Repo Migration:\n    1. Github fork repo\n    2. Github import repo\n8. Git 修改commit message:\n    1. git commit --amend -m \"New commit message\"\n9. 查找commit message:\n    1. git log --oneline | grep PATTERN\n10. 多个github账号的管理：\n   1. https://gist.github.com/jexchan/2351996\n   2. 本人常年使用公司和个人的Github帐号，在正确配置github帐号后，可以用命令行进行帐号切换。\n11. 清除git缓存：\n    1. 有的时候会出现.gitignore文件不起作用的情况，需要清理git缓存：\n    2. $ git rm --cached -r FOLDER_NAME\n    3. $ git add .\n    4. $ git commit -m “COMMIT_MSG\"","slug":"git常用手册","published":1,"updated":"2022-04-05T13:46:10.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6hf968k0009x6u0eo9rh8rq","content":"<p>Git 是每个开发童鞋必须掌握的工具，本文记录博主日常开发使用 git时，遇到的问题和常用的解决方法：</p>\n<span id=\"more\"></span>\n\n<ol>\n<li>No submodule mapping found in .gitmodules for path ‘Frameworks&#x2F;XXX’<ol>\n<li>参考：<a href=\"http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule\">http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule</a></li>\n<li>$<strong>git submodule</strong></li>\n<li>$<strong>git rm ‘Frameworks&#x2F;XXX’</strong></li>\n</ol>\n</li>\n<li>检查非法的branch名字<ol>\n<li>A branch name can not:</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>Have a path component that begins with “.”</li>\n<li>Have a double dot “..”</li>\n<li>Have an ASCII control character, “~”, “^”, “:” or SP, anywhere</li>\n<li>End with a “&#x2F;“ - End with “.lock”</li>\n<li>Contain a “&quot; (backslash</li>\n</ul>\n<ol start=\"3\">\n<li>拉取其他分支代码到当前分支：Git pull rebase<ol>\n<li>当我们需要从别的分支上面拉取代码，并且希望被拉取的commit能够很好地rebase到当前分支,我们就需要用到pull rebase</li>\n<li>示例：从develop拉取代码到当前分支：<ul>\n<li>确保本地分支代码和develop都已经push到origin</li>\n<li>git pull –rebase origin develop<ul>\n<li>把develop分支代码拉取到当前分支，此时会发现当前分支和develop分支代码并没有rebase,还是在两条不同的线上</li>\n<li>拉取完成后会发现如下的一些提示：<ul>\n<li>On branch feature&#x2F;music</li>\n<li>Your branch and ‘origin&#x2F;feature&#x2F;xxx’ have diverged,</li>\n<li>and have 9 and 6 different commits each, respectively.</li>\n<li>(use “git pull” to merge the remote branch into yours)</li>\n<li>nothing to commit, working directory clean</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>git push -f<ul>\n<li>把本地分支和develop分支强行push到origin</li>\n<li>git push 会导致错误，因为使用pull rebase操作会生成两个不同的分支（Your branch and ‘origin&#x2F;feature&#x2F;music’ have diverged）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Git分支管理策略<br>  1.推荐阅读 《<a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\">Git分支管理策略 - 阮一峰的网络日志</a>》</li>\n<li>git workflow:<br> 1. 只需要保留master和develop分支。<br> 2. 日常开发时，从develop上面开一个feature分支，完成开发后，按需merge到develop分支中，merge成功后，可以删除feature分支。<br> 3. 发布前，使用release分支<br> 4. 产品上线后，使用从master分支fork出hotfix分支，完成bug修复后，merge到master和develop分支。</li>\n<li>Github pull request<ol>\n<li>《Mort | Pull Request的正确打开方式（如何在GitHub上贡献开源项目）》 – 原文404，可以参考转载</li>\n</ol>\n</li>\n<li>Github Repo Migration:<ol>\n<li>Github fork repo</li>\n<li>Github import repo</li>\n</ol>\n</li>\n<li>Git 修改commit message:<ol>\n<li>git commit –amend -m “New commit message”</li>\n</ol>\n</li>\n<li>查找commit message:<ol>\n<li>git log –oneline | grep PATTERN</li>\n</ol>\n</li>\n<li>多个github账号的管理：</li>\n<li><a href=\"https://gist.github.com/jexchan/2351996\">https://gist.github.com/jexchan/2351996</a></li>\n<li>本人常年使用公司和个人的Github帐号，在正确配置github帐号后，可以用命令行进行帐号切换。</li>\n<li>清除git缓存：<ol>\n<li>有的时候会出现.gitignore文件不起作用的情况，需要清理git缓存：</li>\n<li>$ git rm –cached -r FOLDER_NAME</li>\n<li>$ git add .</li>\n<li>$ git commit -m “COMMIT_MSG”</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{"hexo-leancloud-counter-security-fix":"/* global hexo */\n\n'use strict';\n\nconst AV = require('leancloud-storage');\nconst readlineSync = require('readline-sync');\nconst packageInfo = require('./package.json');\nconst pathFn = require('path');\nconst fs = require('fs');\n\nfunction generate_post_list(locals) {\n    let { config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    var urlsPath = 'leancloud_counter_security_urls.json';\n    var urls = [...locals.posts.toArray()]\n        .filter(x => x.published)\n        .map(x => {\n            return {\n                title: x.title,\n                url  : config.root + x.path\n            };\n        });\n    return {\n        path: urlsPath,\n        data: JSON.stringify(urls)\n    };\n}\n\nhexo.extend.generator.register('leancloud_counter_security_generator', generate_post_list);\n\nfunction cmp(x, y) {\n    if (x.url < y.url) {\n        return -1;\n    } else if (x.url === y.url) {\n        return 0;\n    }\n    return 1;\n}\n\nfunction postOperation(env, cnt, limit, newData, memoData, log) {\n    if (cnt !== limit) return;\n\n    newData.sort(cmp);\n    var sourceDir = env.source_dir;\n    var publicDir = env.public_dir;\n    var memoFile = pathFn.join(sourceDir, 'leancloud.memo');\n    fs.writeFileSync(memoFile, '[\\n');\n\n    var memoIdx = 1;\n    for (var i = 0; newData[i]; i++) {\n        while (memoData[memoIdx] !== ']') {\n            var y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > newData[i].url) break;\n\n            fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n            memoIdx++;\n        }\n        fs.writeFileSync(memoFile, '{\"title\":\"' + newData[i].title + '\",\"url\":\"' + newData[i].url + '\"},\\n', { flag: 'a' });\n    }\n    while (memoData[memoIdx] !== ']') {\n        fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n        memoIdx++;\n    }\n    fs.writeFileSync(memoFile, memoData[memoIdx], { flag: 'a' });\n\n    var srcFile = pathFn.join(sourceDir, 'leancloud.memo');\n    var destFile = pathFn.join(publicDir, 'leancloud.memo');\n    var readStream = fs.createReadStream(srcFile);\n    var writeStream = fs.createWriteStream(destFile);\n    readStream.pipe(writeStream);\n    log.info('leancloud.memo successfully updated.');\n}\n\nasync function sync() {\n    let { log, config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    let { app_id, app_key, server_url } = config.leancloud_counter_security;\n    var publicDir = this.public_dir;\n    var UrlsFile = pathFn.join(publicDir, 'leancloud_counter_security_urls.json');\n    var urls = JSON.parse(fs.readFileSync(UrlsFile, 'utf8'));\n\n    AV.init({\n        appId    : app_id,\n        appKey   : app_key,\n        serverURL: server_url\n    });\n\n    var currentUser = AV.User.current();\n    if (!currentUser) {\n        var userName = config.leancloud_counter_security.username;\n        var passWord = config.leancloud_counter_security.password;\n        if (!userName) {\n            userName = readlineSync.question('Enter your username: ');\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        } else if (!passWord) {\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        }\n        await AV.User.logIn(userName, passWord).then(loginedUser => {\n            log.info('Logined as: ' + loginedUser.getUsername());\n        }, error => {\n            log.error(error);\n        });\n    }\n\n    log.info('Now syncing your posts list to leancloud counter...');\n    var Counter = AV.Object.extend('Counter');\n    var memoFile = pathFn.join(publicDir, 'leancloud.memo');\n    if (!fs.existsSync(memoFile)) {\n        fs.writeFileSync(memoFile, '[\\n]');\n    }\n    var memoData = fs.readFileSync(memoFile, 'utf-8').split('\\n');\n    var memoIdx = 1;\n    var newData = [];\n    var cnt = 0;\n    var limit = 0;\n    var env = this;\n    urls.sort(cmp).forEach(x => {\n        var y = {};\n        y.title = '';\n        y.url = '';\n        var flag = false;\n        while (memoData[memoIdx] !== ']') {\n            y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > x.url) break;\n            if (y.url === x.url && y.title === x.title) {\n                flag = true;\n                break;\n            }\n            memoIdx++;\n        }\n        if (flag) return;\n\n        log.info('Dealing with record of ' + x.title);\n        limit++;\n        var query = new AV.Query('Counter');\n        query.equalTo('url', x.url);\n        query.count().then(count => {\n            if (count === 0) {\n                var counter = new Counter();\n                counter.set('url', x.url);\n                counter.set('title', x.title);\n                counter.set('time', 0);\n                counter.save().then(obj => {\n                    log.info(x.title + ' is saved as: ' + obj.id);\n                    newData.push(x);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                }, error => {\n                    log.error(error);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                });\n            } else {\n                newData.push(x);\n                cnt++;\n                postOperation(env, cnt, limit, newData, memoData, log);\n            }\n        }, error => {\n            log.error(error);\n            cnt++;\n            postOperation(env, cnt, limit, newData, memoData, log);\n        });\n    });\n}\n\nhexo.extend.deployer.register('leancloud_counter_security_sync', sync);\n\nvar commandOptions = {\n    desc     : packageInfo.description,\n    usage    : ' <argument>',\n    arguments: [\n        {\n            name: 'register | r <username> <password>',\n            desc: 'Register a new user.'\n        }\n    ]\n};\n\nfunction commandFunc(args) {\n    let { log, config } = this;\n\n    if (args._.length !== 3) {\n        log.error('Too Few or Many Arguments.');\n    } else if (args._[0] === 'register' || args._[0] === 'r') {\n        let { app_id, app_key, server_url } = config.leancloud_counter_security;\n        AV.init({\n            appId    : app_id,\n            appKey   : app_key,\n            serverURL: server_url\n        });\n\n        var user = new AV.User();\n        user.setUsername(String(args._[1]));\n        user.setPassword(String(args._[2]));\n        user.signUp().then(loginedUser => {\n            log.info(loginedUser.getUsername() + ' is successfully signed up');\n        }, error => {\n            log.error(error);\n        });\n    } else {\n        log.error('Unknown Command.');\n    }\n}\n\nhexo.extend.console.register('lc-counter', 'hexo-leancloud-counter-security', commandOptions, commandFunc);\n"}},"length":1670,"excerpt":"<p>Git 是每个开发童鞋必须掌握的工具，本文记录博主日常开发使用 git时，遇到的问题和常用的解决方法：</p>","more":"<ol>\n<li>No submodule mapping found in .gitmodules for path ‘Frameworks&#x2F;XXX’<ol>\n<li>参考：<a href=\"http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule\">http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule</a></li>\n<li>$<strong>git submodule</strong></li>\n<li>$<strong>git rm ‘Frameworks&#x2F;XXX’</strong></li>\n</ol>\n</li>\n<li>检查非法的branch名字<ol>\n<li>A branch name can not:</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>Have a path component that begins with “.”</li>\n<li>Have a double dot “..”</li>\n<li>Have an ASCII control character, “~”, “^”, “:” or SP, anywhere</li>\n<li>End with a “&#x2F;“ - End with “.lock”</li>\n<li>Contain a “&quot; (backslash</li>\n</ul>\n<ol start=\"3\">\n<li>拉取其他分支代码到当前分支：Git pull rebase<ol>\n<li>当我们需要从别的分支上面拉取代码，并且希望被拉取的commit能够很好地rebase到当前分支,我们就需要用到pull rebase</li>\n<li>示例：从develop拉取代码到当前分支：<ul>\n<li>确保本地分支代码和develop都已经push到origin</li>\n<li>git pull –rebase origin develop<ul>\n<li>把develop分支代码拉取到当前分支，此时会发现当前分支和develop分支代码并没有rebase,还是在两条不同的线上</li>\n<li>拉取完成后会发现如下的一些提示：<ul>\n<li>On branch feature&#x2F;music</li>\n<li>Your branch and ‘origin&#x2F;feature&#x2F;xxx’ have diverged,</li>\n<li>and have 9 and 6 different commits each, respectively.</li>\n<li>(use “git pull” to merge the remote branch into yours)</li>\n<li>nothing to commit, working directory clean</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>git push -f<ul>\n<li>把本地分支和develop分支强行push到origin</li>\n<li>git push 会导致错误，因为使用pull rebase操作会生成两个不同的分支（Your branch and ‘origin&#x2F;feature&#x2F;music’ have diverged）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Git分支管理策略<br>  1.推荐阅读 《<a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\">Git分支管理策略 - 阮一峰的网络日志</a>》</li>\n<li>git workflow:<br> 1. 只需要保留master和develop分支。<br> 2. 日常开发时，从develop上面开一个feature分支，完成开发后，按需merge到develop分支中，merge成功后，可以删除feature分支。<br> 3. 发布前，使用release分支<br> 4. 产品上线后，使用从master分支fork出hotfix分支，完成bug修复后，merge到master和develop分支。</li>\n<li>Github pull request<ol>\n<li>《Mort | Pull Request的正确打开方式（如何在GitHub上贡献开源项目）》 – 原文404，可以参考转载</li>\n</ol>\n</li>\n<li>Github Repo Migration:<ol>\n<li>Github fork repo</li>\n<li>Github import repo</li>\n</ol>\n</li>\n<li>Git 修改commit message:<ol>\n<li>git commit –amend -m “New commit message”</li>\n</ol>\n</li>\n<li>查找commit message:<ol>\n<li>git log –oneline | grep PATTERN</li>\n</ol>\n</li>\n<li>多个github账号的管理：</li>\n<li><a href=\"https://gist.github.com/jexchan/2351996\">https://gist.github.com/jexchan/2351996</a></li>\n<li>本人常年使用公司和个人的Github帐号，在正确配置github帐号后，可以用命令行进行帐号切换。</li>\n<li>清除git缓存：<ol>\n<li>有的时候会出现.gitignore文件不起作用的情况，需要清理git缓存：</li>\n<li>$ git rm –cached -r FOLDER_NAME</li>\n<li>$ git add .</li>\n<li>$ git commit -m “COMMIT_MSG”</li>\n</ol>\n</li>\n</ol>"},{"title":"iOS ReactNative私有库指南","abbrlink":"react-native-private-repo","date":"2018-10-20T14:11:52.000Z","_content":"\n# 创建RN私有库\n\n为了加速RN的下载和方便集成，我把RN(0.56.0)做成私有pod放到了gitlab的私有源中，参考《[使用Cocoapods创建私有podspec](http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/)》、《[私有Pods集成react-native库](https://imfong.com/post/Private-Pods-Add-react-native#yoga)》。\n\n<!-- more -->\n\n开始之前，需要搞清楚两个概念：\n\ncocoapods 是通过spec repos + pod source code repo 来进行代码版本管理，cocoapods 的[master spec repo](https://github.com/CocoaPods/Specs)来管理所有的第三方库 spec，每个 spec 中都包含了对于 pod 的 source code pod。\n\n**私有源仓库：**类似于 cocoapods 官方来管理 specs 的仓库，用来管理私有库的 spec，下文中使用`YOUR_SPECS_REPO`来指代。同时，这个 repo 也有自己的 git 地址，下文使用`YOUR_SPECS_GIT`\n\n**私有 pod 代码仓库**：存放私有库 source code 的 repo。\n\n\n\n下面是具体的操作步骤：\n\n## 创建私有ReactNative repo\n\n- 把 github 上的源码 clone 下来，然后 push 到自己的私有库 git 中\n- **仓库代码是github源码**\n- 修复0.56.0中WebSocket问题\n\n## 创建&修改 podspec.json\n\n- **切换到对应的tag commit: 如v0.56.0，下面的yoga和React需要保存version一致。**\n  - 然后按照《[私有Pods集成react-native库](https://imfong.com/post/Private-Pods-Add-react-native)》中生成和修改了yoga.podspec.json、React.podspec.json，需要修改yoga.podspec.json的source_files和public_header_files\n\n```bash\npod ipc spec React.podspec >> React.podspec.json\ncd ReactCommon/yoga\npod ipc spec yoga.podspec >> yoga.podspec.json\n```\n\n- 修改yoga.podspec.json\n```ruby\n\"git\": \"YOUR_RN_GIT\"\n\"source_files\": \"ReactCommon/yoga/**/*.{cpp,h}\",\n\"public_header_files\": \"ReactCommon/yoga/**/{Yoga,YGEnums,YGMacros}.h\"\n```\n\n## lint & push podspec.json\n\n- 需要注意的是，修改后的podspec.json文件，需要进行lint校验、上传到私有源，下面是yoga的方法\n```bash\npod spec lint yoga.podspec.json --no-clean --verbose --allow-warnings\npod repo push YOUR_SPECS_REPO yoga.podspec.json --allow-warnings\n```\n\n- 通过上面的方法可以吧RN和yoga添加到私有源中，但是我们pod install的时候，还是会报错\n\n  {% asset_img Folly-error.png %}\n\n  - Folly在RN中被CxxBridge、jschelpers等subspecs依赖，Folly.podspec文件本身在RN源码目录third-party-podspecs中，需要把Folly.podspec也上传到私有源中，否则pod install会出现错误\n\n  - 由于Folly在cocoapods公共源中已经没有维护，但是有志愿者维护了一个folly-ios的pod，需要我们添加到私有源中，添加方法和上面类似\n``` bash\npod repo push YOUR_SPECS_REPO Folly.podspec --allow-warnings\n```\n- 类似的，我们也需要把React.podspec.json文件提交到私有源中：\n```bash\npod spec lint React.podspec.json --no-clean --fail-fast --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.git\npod repo push YOUR_SPECS_REPO React.podspec.json --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.git\n```\n最终，我们总共需要添加了三个私有repo：**RN/Folly/yoga**\n\n## 创建离线js bundle包\n\n使用下面命令生成js bundle:\n\n```bash\nreact-native bundle --dev true --entry-file index.ios.js --bundle-output ios/main.jsbundle --platform ios\n```\n\n通过--dev参数(true/false)控制生成debug/release包\n\n# 如何维护RN版本\n\n同步Github上的ReactNative源码，在sourceTree中，添加remote:\n{% asset_img sourcetree.png %}\n\n切换到当前的分支(0.57-stable)，可以从github上面拉取最新代码（使用rebase）\n更新podspec.json\n\n```bash\npod ipc spec React.podspec >> React.podspec.json\ncd ReactCommon/yoga\npod ipc spec yoga.podspec >> yoga.podspec.json\n```\n\n**创建RN私有库**的中已经提供了需要修改的地方。\n\n**lint & push podspec.json**，或者直接在私有源中进行修改。\n\n## RN代码有bug怎么办？\n\n从RN 0.56.0到RN 0.57.3，都没有解决websocket crash问题。\n\n解决方法：\n\n1. 查看github issue，寻找问题解决方法。已web socket为例，已经用人[提了PR](https://github.com/facebook/react-native/pull/19489)\n\n2. 把PR中的源代码下载到本地，然后本地进行验证。验证通过后，则commit && push到当前tag 所在的分支\n\n3. 由于更新了RN源码，我们需要修改私有库中tag对应的commit：\n   1. 删除之前的tag（0.57.3），在最新的commit中来添加新tag（0.57.3)\n   2. 在React.podspec.json中，使用branch替代tag\n\n```\n\"source\": {\n    \"git\": \"YOUR_RN_GIT\",\n    \"branch\": \"0.57-stable\"\n  },\n```\n\n# 专治疑难杂症\n\n## **RN 0.56.0 问题：**\n\n- [**com.squareup.SocketRocket.NetworkThread(18): EXC_BAD_ACCESS**](https://github.com/facebook/react-native/issues/21086)\n\n  - 解决的PR:<https://github.com/facebook/react-native/pull/19489>\n\n- [**WebSocket `registerEvents` is undefined when running master**](https://github.com/facebook/react-native/issues/20567)\n\n  - 解决方法：<https://stackoverflow.com/a/52486616>\n\n## **RN 0.57.3 问题：**\n\n- **Unable to resolve module `schedule/tracking`**\n\n  {% asset_img schedule-error.png %}\n\n# **参考资料：**\n\n- [swift cocoapods Could not build Objective-C module 'React'](https://github.com/facebook/react-native/issues/19892)\n\n- [含泪导入React-native 0.54到Swift原生项目](https://www.jianshu.com/p/611b49ccf351)\n\n- [React Native 0.50.0 集成遇到的问题](https://www.jianshu.com/p/57ed76e90605)\n\n- 《[使用Cocoapods创建私有podspec](http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/)》\n\n- 《[私有Pods集成react-native库](https://imfong.com/post/Private-Pods-Add-react-native#yoga)》\n\n- [What's the difference between 'pod spec lint' and 'pod lib lint'?](https://stackoverflow.com/questions/32304421/whats-the-difference-between-pod-spec-lint-and-pod-lib-lint)","source":"_posts/iOS-ReactNative私有库指南.md","raw":"---\ntitle: iOS ReactNative私有库指南\ncategories:\n  - 开发\n  - ReactNative\ntags:\n  - iOS\n  - ReactNative\nabbrlink: react-native-private-repo\ndate: 2018-10-20 22:11:52\n---\n\n# 创建RN私有库\n\n为了加速RN的下载和方便集成，我把RN(0.56.0)做成私有pod放到了gitlab的私有源中，参考《[使用Cocoapods创建私有podspec](http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/)》、《[私有Pods集成react-native库](https://imfong.com/post/Private-Pods-Add-react-native#yoga)》。\n\n<!-- more -->\n\n开始之前，需要搞清楚两个概念：\n\ncocoapods 是通过spec repos + pod source code repo 来进行代码版本管理，cocoapods 的[master spec repo](https://github.com/CocoaPods/Specs)来管理所有的第三方库 spec，每个 spec 中都包含了对于 pod 的 source code pod。\n\n**私有源仓库：**类似于 cocoapods 官方来管理 specs 的仓库，用来管理私有库的 spec，下文中使用`YOUR_SPECS_REPO`来指代。同时，这个 repo 也有自己的 git 地址，下文使用`YOUR_SPECS_GIT`\n\n**私有 pod 代码仓库**：存放私有库 source code 的 repo。\n\n\n\n下面是具体的操作步骤：\n\n## 创建私有ReactNative repo\n\n- 把 github 上的源码 clone 下来，然后 push 到自己的私有库 git 中\n- **仓库代码是github源码**\n- 修复0.56.0中WebSocket问题\n\n## 创建&修改 podspec.json\n\n- **切换到对应的tag commit: 如v0.56.0，下面的yoga和React需要保存version一致。**\n  - 然后按照《[私有Pods集成react-native库](https://imfong.com/post/Private-Pods-Add-react-native)》中生成和修改了yoga.podspec.json、React.podspec.json，需要修改yoga.podspec.json的source_files和public_header_files\n\n```bash\npod ipc spec React.podspec >> React.podspec.json\ncd ReactCommon/yoga\npod ipc spec yoga.podspec >> yoga.podspec.json\n```\n\n- 修改yoga.podspec.json\n```ruby\n\"git\": \"YOUR_RN_GIT\"\n\"source_files\": \"ReactCommon/yoga/**/*.{cpp,h}\",\n\"public_header_files\": \"ReactCommon/yoga/**/{Yoga,YGEnums,YGMacros}.h\"\n```\n\n## lint & push podspec.json\n\n- 需要注意的是，修改后的podspec.json文件，需要进行lint校验、上传到私有源，下面是yoga的方法\n```bash\npod spec lint yoga.podspec.json --no-clean --verbose --allow-warnings\npod repo push YOUR_SPECS_REPO yoga.podspec.json --allow-warnings\n```\n\n- 通过上面的方法可以吧RN和yoga添加到私有源中，但是我们pod install的时候，还是会报错\n\n  {% asset_img Folly-error.png %}\n\n  - Folly在RN中被CxxBridge、jschelpers等subspecs依赖，Folly.podspec文件本身在RN源码目录third-party-podspecs中，需要把Folly.podspec也上传到私有源中，否则pod install会出现错误\n\n  - 由于Folly在cocoapods公共源中已经没有维护，但是有志愿者维护了一个folly-ios的pod，需要我们添加到私有源中，添加方法和上面类似\n``` bash\npod repo push YOUR_SPECS_REPO Folly.podspec --allow-warnings\n```\n- 类似的，我们也需要把React.podspec.json文件提交到私有源中：\n```bash\npod spec lint React.podspec.json --no-clean --fail-fast --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.git\npod repo push YOUR_SPECS_REPO React.podspec.json --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.git\n```\n最终，我们总共需要添加了三个私有repo：**RN/Folly/yoga**\n\n## 创建离线js bundle包\n\n使用下面命令生成js bundle:\n\n```bash\nreact-native bundle --dev true --entry-file index.ios.js --bundle-output ios/main.jsbundle --platform ios\n```\n\n通过--dev参数(true/false)控制生成debug/release包\n\n# 如何维护RN版本\n\n同步Github上的ReactNative源码，在sourceTree中，添加remote:\n{% asset_img sourcetree.png %}\n\n切换到当前的分支(0.57-stable)，可以从github上面拉取最新代码（使用rebase）\n更新podspec.json\n\n```bash\npod ipc spec React.podspec >> React.podspec.json\ncd ReactCommon/yoga\npod ipc spec yoga.podspec >> yoga.podspec.json\n```\n\n**创建RN私有库**的中已经提供了需要修改的地方。\n\n**lint & push podspec.json**，或者直接在私有源中进行修改。\n\n## RN代码有bug怎么办？\n\n从RN 0.56.0到RN 0.57.3，都没有解决websocket crash问题。\n\n解决方法：\n\n1. 查看github issue，寻找问题解决方法。已web socket为例，已经用人[提了PR](https://github.com/facebook/react-native/pull/19489)\n\n2. 把PR中的源代码下载到本地，然后本地进行验证。验证通过后，则commit && push到当前tag 所在的分支\n\n3. 由于更新了RN源码，我们需要修改私有库中tag对应的commit：\n   1. 删除之前的tag（0.57.3），在最新的commit中来添加新tag（0.57.3)\n   2. 在React.podspec.json中，使用branch替代tag\n\n```\n\"source\": {\n    \"git\": \"YOUR_RN_GIT\",\n    \"branch\": \"0.57-stable\"\n  },\n```\n\n# 专治疑难杂症\n\n## **RN 0.56.0 问题：**\n\n- [**com.squareup.SocketRocket.NetworkThread(18): EXC_BAD_ACCESS**](https://github.com/facebook/react-native/issues/21086)\n\n  - 解决的PR:<https://github.com/facebook/react-native/pull/19489>\n\n- [**WebSocket `registerEvents` is undefined when running master**](https://github.com/facebook/react-native/issues/20567)\n\n  - 解决方法：<https://stackoverflow.com/a/52486616>\n\n## **RN 0.57.3 问题：**\n\n- **Unable to resolve module `schedule/tracking`**\n\n  {% asset_img schedule-error.png %}\n\n# **参考资料：**\n\n- [swift cocoapods Could not build Objective-C module 'React'](https://github.com/facebook/react-native/issues/19892)\n\n- [含泪导入React-native 0.54到Swift原生项目](https://www.jianshu.com/p/611b49ccf351)\n\n- [React Native 0.50.0 集成遇到的问题](https://www.jianshu.com/p/57ed76e90605)\n\n- 《[使用Cocoapods创建私有podspec](http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/)》\n\n- 《[私有Pods集成react-native库](https://imfong.com/post/Private-Pods-Add-react-native#yoga)》\n\n- [What's the difference between 'pod spec lint' and 'pod lib lint'?](https://stackoverflow.com/questions/32304421/whats-the-difference-between-pod-spec-lint-and-pod-lib-lint)","slug":"iOS-ReactNative私有库指南","published":1,"updated":"2022-04-05T13:46:10.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6hf968l000dx6u01ksr730j","content":"<h1 id=\"创建RN私有库\"><a href=\"#创建RN私有库\" class=\"headerlink\" title=\"创建RN私有库\"></a>创建RN私有库</h1><p>为了加速RN的下载和方便集成，我把RN(0.56.0)做成私有pod放到了gitlab的私有源中，参考《<a href=\"http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/\">使用Cocoapods创建私有podspec</a>》、《<a href=\"https://imfong.com/post/Private-Pods-Add-react-native#yoga\">私有Pods集成react-native库</a>》。</p>\n<span id=\"more\"></span>\n\n<p>开始之前，需要搞清楚两个概念：</p>\n<p>cocoapods 是通过spec repos + pod source code repo 来进行代码版本管理，cocoapods 的<a href=\"https://github.com/CocoaPods/Specs\">master spec repo</a>来管理所有的第三方库 spec，每个 spec 中都包含了对于 pod 的 source code pod。</p>\n<p><strong>私有源仓库：</strong>类似于 cocoapods 官方来管理 specs 的仓库，用来管理私有库的 spec，下文中使用<code>YOUR_SPECS_REPO</code>来指代。同时，这个 repo 也有自己的 git 地址，下文使用<code>YOUR_SPECS_GIT</code></p>\n<p><strong>私有 pod 代码仓库</strong>：存放私有库 source code 的 repo。</p>\n<p>下面是具体的操作步骤：</p>\n<h2 id=\"创建私有ReactNative-repo\"><a href=\"#创建私有ReactNative-repo\" class=\"headerlink\" title=\"创建私有ReactNative repo\"></a>创建私有ReactNative repo</h2><ul>\n<li>把 github 上的源码 clone 下来，然后 push 到自己的私有库 git 中</li>\n<li><strong>仓库代码是github源码</strong></li>\n<li>修复0.56.0中WebSocket问题</li>\n</ul>\n<h2 id=\"创建-amp-修改-podspec-json\"><a href=\"#创建-amp-修改-podspec-json\" class=\"headerlink\" title=\"创建&amp;修改 podspec.json\"></a>创建&amp;修改 podspec.json</h2><ul>\n<li><strong>切换到对应的tag commit: 如v0.56.0，下面的yoga和React需要保存version一致。</strong><ul>\n<li>然后按照《<a href=\"https://imfong.com/post/Private-Pods-Add-react-native\">私有Pods集成react-native库</a>》中生成和修改了yoga.podspec.json、React.podspec.json，需要修改yoga.podspec.json的source_files和public_header_files</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod ipc spec React.podspec &gt;&gt; React.podspec.json</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ReactCommon/yoga</span><br><span class=\"line\">pod ipc spec yoga.podspec &gt;&gt; yoga.podspec.json</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改yoga.podspec.json<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;git&quot;</span>: <span class=\"string\">&quot;YOUR_RN_GIT&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;source_files&quot;</span>: <span class=\"string\">&quot;ReactCommon/yoga/**/*.&#123;cpp,h&#125;&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;public_header_files&quot;</span>: <span class=\"string\">&quot;ReactCommon/yoga/**/&#123;Yoga,YGEnums,YGMacros&#125;.h&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"lint-amp-push-podspec-json\"><a href=\"#lint-amp-push-podspec-json\" class=\"headerlink\" title=\"lint &amp; push podspec.json\"></a>lint &amp; push podspec.json</h2><ul>\n<li><p>需要注意的是，修改后的podspec.json文件，需要进行lint校验、上传到私有源，下面是yoga的方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec lint yoga.podspec.json --no-clean --verbose --allow-warnings</span><br><span class=\"line\">pod repo push YOUR_SPECS_REPO yoga.podspec.json --allow-warnings</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过上面的方法可以吧RN和yoga添加到私有源中，但是我们pod install的时候，还是会报错</p>\n<img src=\"/posts/react-native-private-repo/Folly-error.png\" class=\"\">\n\n<ul>\n<li><p>Folly在RN中被CxxBridge、jschelpers等subspecs依赖，Folly.podspec文件本身在RN源码目录third-party-podspecs中，需要把Folly.podspec也上传到私有源中，否则pod install会出现错误</p>\n</li>\n<li><p>由于Folly在cocoapods公共源中已经没有维护，但是有志愿者维护了一个folly-ios的pod，需要我们添加到私有源中，添加方法和上面类似</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod repo push YOUR_SPECS_REPO Folly.podspec --allow-warnings</span><br></pre></td></tr></table></figure>\n<ul>\n<li>类似的，我们也需要把React.podspec.json文件提交到私有源中：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec lint React.podspec.json --no-clean --fail-fast --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.git</span><br><span class=\"line\">pod repo push YOUR_SPECS_REPO React.podspec.json --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.git</span><br></pre></td></tr></table></figure>\n最终，我们总共需要添加了三个私有repo：<strong>RN&#x2F;Folly&#x2F;yoga</strong></li>\n</ul>\n<h2 id=\"创建离线js-bundle包\"><a href=\"#创建离线js-bundle包\" class=\"headerlink\" title=\"创建离线js bundle包\"></a>创建离线js bundle包</h2><p>使用下面命令生成js bundle:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native bundle --dev <span class=\"literal\">true</span> --entry-file index.ios.js --bundle-output ios/main.jsbundle --platform ios</span><br></pre></td></tr></table></figure>\n\n<p>通过–dev参数(true&#x2F;false)控制生成debug&#x2F;release包</p>\n<h1 id=\"如何维护RN版本\"><a href=\"#如何维护RN版本\" class=\"headerlink\" title=\"如何维护RN版本\"></a>如何维护RN版本</h1><p>同步Github上的ReactNative源码，在sourceTree中，添加remote:</p>\n<img src=\"/posts/react-native-private-repo/sourcetree.png\" class=\"\">\n\n<p>切换到当前的分支(0.57-stable)，可以从github上面拉取最新代码（使用rebase）<br>更新podspec.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod ipc spec React.podspec &gt;&gt; React.podspec.json</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ReactCommon/yoga</span><br><span class=\"line\">pod ipc spec yoga.podspec &gt;&gt; yoga.podspec.json</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建RN私有库</strong>的中已经提供了需要修改的地方。</p>\n<p><strong>lint &amp; push podspec.json</strong>，或者直接在私有源中进行修改。</p>\n<h2 id=\"RN代码有bug怎么办？\"><a href=\"#RN代码有bug怎么办？\" class=\"headerlink\" title=\"RN代码有bug怎么办？\"></a>RN代码有bug怎么办？</h2><p>从RN 0.56.0到RN 0.57.3，都没有解决websocket crash问题。</p>\n<p>解决方法：</p>\n<ol>\n<li><p>查看github issue，寻找问题解决方法。已web socket为例，已经用人<a href=\"https://github.com/facebook/react-native/pull/19489\">提了PR</a></p>\n</li>\n<li><p>把PR中的源代码下载到本地，然后本地进行验证。验证通过后，则commit &amp;&amp; push到当前tag 所在的分支</p>\n</li>\n<li><p>由于更新了RN源码，我们需要修改私有库中tag对应的commit：</p>\n<ol>\n<li>删除之前的tag（0.57.3），在最新的commit中来添加新tag（0.57.3)</li>\n<li>在React.podspec.json中，使用branch替代tag</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;source&quot;: &#123;</span><br><span class=\"line\">    &quot;git&quot;: &quot;YOUR_RN_GIT&quot;,</span><br><span class=\"line\">    &quot;branch&quot;: &quot;0.57-stable&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"专治疑难杂症\"><a href=\"#专治疑难杂症\" class=\"headerlink\" title=\"专治疑难杂症\"></a>专治疑难杂症</h1><h2 id=\"RN-0-56-0-问题：\"><a href=\"#RN-0-56-0-问题：\" class=\"headerlink\" title=\"RN 0.56.0 问题：\"></a><strong>RN 0.56.0 问题：</strong></h2><ul>\n<li><p><a href=\"https://github.com/facebook/react-native/issues/21086\"><strong>com.squareup.SocketRocket.NetworkThread(18): EXC_BAD_ACCESS</strong></a></p>\n<ul>\n<li>解决的PR:<a href=\"https://github.com/facebook/react-native/pull/19489\">https://github.com/facebook/react-native/pull/19489</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/facebook/react-native/issues/20567\"><strong>WebSocket <code>registerEvents</code> is undefined when running master</strong></a></p>\n<ul>\n<li>解决方法：<a href=\"https://stackoverflow.com/a/52486616\">https://stackoverflow.com/a/52486616</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"RN-0-57-3-问题：\"><a href=\"#RN-0-57-3-问题：\" class=\"headerlink\" title=\"RN 0.57.3 问题：\"></a><strong>RN 0.57.3 问题：</strong></h2><ul>\n<li><p><strong>Unable to resolve module <code>schedule/tracking</code></strong></p>\n<img src=\"/posts/react-native-private-repo/schedule-error.png\" class=\"\"></li>\n</ul>\n<h1 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a><strong>参考资料：</strong></h1><ul>\n<li><p><a href=\"https://github.com/facebook/react-native/issues/19892\">swift cocoapods Could not build Objective-C module ‘React’</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/611b49ccf351\">含泪导入React-native 0.54到Swift原生项目</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/57ed76e90605\">React Native 0.50.0 集成遇到的问题</a></p>\n</li>\n<li><p>《<a href=\"http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/\">使用Cocoapods创建私有podspec</a>》</p>\n</li>\n<li><p>《<a href=\"https://imfong.com/post/Private-Pods-Add-react-native#yoga\">私有Pods集成react-native库</a>》</p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/questions/32304421/whats-the-difference-between-pod-spec-lint-and-pod-lib-lint\">What’s the difference between ‘pod spec lint’ and ‘pod lib lint’?</a></p>\n</li>\n</ul>\n","site":{"data":{"hexo-leancloud-counter-security-fix":"/* global hexo */\n\n'use strict';\n\nconst AV = require('leancloud-storage');\nconst readlineSync = require('readline-sync');\nconst packageInfo = require('./package.json');\nconst pathFn = require('path');\nconst fs = require('fs');\n\nfunction generate_post_list(locals) {\n    let { config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    var urlsPath = 'leancloud_counter_security_urls.json';\n    var urls = [...locals.posts.toArray()]\n        .filter(x => x.published)\n        .map(x => {\n            return {\n                title: x.title,\n                url  : config.root + x.path\n            };\n        });\n    return {\n        path: urlsPath,\n        data: JSON.stringify(urls)\n    };\n}\n\nhexo.extend.generator.register('leancloud_counter_security_generator', generate_post_list);\n\nfunction cmp(x, y) {\n    if (x.url < y.url) {\n        return -1;\n    } else if (x.url === y.url) {\n        return 0;\n    }\n    return 1;\n}\n\nfunction postOperation(env, cnt, limit, newData, memoData, log) {\n    if (cnt !== limit) return;\n\n    newData.sort(cmp);\n    var sourceDir = env.source_dir;\n    var publicDir = env.public_dir;\n    var memoFile = pathFn.join(sourceDir, 'leancloud.memo');\n    fs.writeFileSync(memoFile, '[\\n');\n\n    var memoIdx = 1;\n    for (var i = 0; newData[i]; i++) {\n        while (memoData[memoIdx] !== ']') {\n            var y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > newData[i].url) break;\n\n            fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n            memoIdx++;\n        }\n        fs.writeFileSync(memoFile, '{\"title\":\"' + newData[i].title + '\",\"url\":\"' + newData[i].url + '\"},\\n', { flag: 'a' });\n    }\n    while (memoData[memoIdx] !== ']') {\n        fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n        memoIdx++;\n    }\n    fs.writeFileSync(memoFile, memoData[memoIdx], { flag: 'a' });\n\n    var srcFile = pathFn.join(sourceDir, 'leancloud.memo');\n    var destFile = pathFn.join(publicDir, 'leancloud.memo');\n    var readStream = fs.createReadStream(srcFile);\n    var writeStream = fs.createWriteStream(destFile);\n    readStream.pipe(writeStream);\n    log.info('leancloud.memo successfully updated.');\n}\n\nasync function sync() {\n    let { log, config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    let { app_id, app_key, server_url } = config.leancloud_counter_security;\n    var publicDir = this.public_dir;\n    var UrlsFile = pathFn.join(publicDir, 'leancloud_counter_security_urls.json');\n    var urls = JSON.parse(fs.readFileSync(UrlsFile, 'utf8'));\n\n    AV.init({\n        appId    : app_id,\n        appKey   : app_key,\n        serverURL: server_url\n    });\n\n    var currentUser = AV.User.current();\n    if (!currentUser) {\n        var userName = config.leancloud_counter_security.username;\n        var passWord = config.leancloud_counter_security.password;\n        if (!userName) {\n            userName = readlineSync.question('Enter your username: ');\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        } else if (!passWord) {\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        }\n        await AV.User.logIn(userName, passWord).then(loginedUser => {\n            log.info('Logined as: ' + loginedUser.getUsername());\n        }, error => {\n            log.error(error);\n        });\n    }\n\n    log.info('Now syncing your posts list to leancloud counter...');\n    var Counter = AV.Object.extend('Counter');\n    var memoFile = pathFn.join(publicDir, 'leancloud.memo');\n    if (!fs.existsSync(memoFile)) {\n        fs.writeFileSync(memoFile, '[\\n]');\n    }\n    var memoData = fs.readFileSync(memoFile, 'utf-8').split('\\n');\n    var memoIdx = 1;\n    var newData = [];\n    var cnt = 0;\n    var limit = 0;\n    var env = this;\n    urls.sort(cmp).forEach(x => {\n        var y = {};\n        y.title = '';\n        y.url = '';\n        var flag = false;\n        while (memoData[memoIdx] !== ']') {\n            y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > x.url) break;\n            if (y.url === x.url && y.title === x.title) {\n                flag = true;\n                break;\n            }\n            memoIdx++;\n        }\n        if (flag) return;\n\n        log.info('Dealing with record of ' + x.title);\n        limit++;\n        var query = new AV.Query('Counter');\n        query.equalTo('url', x.url);\n        query.count().then(count => {\n            if (count === 0) {\n                var counter = new Counter();\n                counter.set('url', x.url);\n                counter.set('title', x.title);\n                counter.set('time', 0);\n                counter.save().then(obj => {\n                    log.info(x.title + ' is saved as: ' + obj.id);\n                    newData.push(x);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                }, error => {\n                    log.error(error);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                });\n            } else {\n                newData.push(x);\n                cnt++;\n                postOperation(env, cnt, limit, newData, memoData, log);\n            }\n        }, error => {\n            log.error(error);\n            cnt++;\n            postOperation(env, cnt, limit, newData, memoData, log);\n        });\n    });\n}\n\nhexo.extend.deployer.register('leancloud_counter_security_sync', sync);\n\nvar commandOptions = {\n    desc     : packageInfo.description,\n    usage    : ' <argument>',\n    arguments: [\n        {\n            name: 'register | r <username> <password>',\n            desc: 'Register a new user.'\n        }\n    ]\n};\n\nfunction commandFunc(args) {\n    let { log, config } = this;\n\n    if (args._.length !== 3) {\n        log.error('Too Few or Many Arguments.');\n    } else if (args._[0] === 'register' || args._[0] === 'r') {\n        let { app_id, app_key, server_url } = config.leancloud_counter_security;\n        AV.init({\n            appId    : app_id,\n            appKey   : app_key,\n            serverURL: server_url\n        });\n\n        var user = new AV.User();\n        user.setUsername(String(args._[1]));\n        user.setPassword(String(args._[2]));\n        user.signUp().then(loginedUser => {\n            log.info(loginedUser.getUsername() + ' is successfully signed up');\n        }, error => {\n            log.error(error);\n        });\n    } else {\n        log.error('Unknown Command.');\n    }\n}\n\nhexo.extend.console.register('lc-counter', 'hexo-leancloud-counter-security', commandOptions, commandFunc);\n"}},"length":3242,"excerpt":"<h1 id=\"创建RN私有库\"><a href=\"#创建RN私有库\" class=\"headerlink\" title=\"创建RN私有库\"></a>创建RN私有库</h1><p>为了加速RN的下载和方便集成，我把RN(0.56.0)做成私有pod放到了gitlab的私有源中，参考《<a href=\"http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/\">使用Cocoapods创建私有podspec</a>》、《<a href=\"https://imfong.com/post/Private-Pods-Add-react-native#yoga\">私有Pods集成react-native库</a>》。</p>","more":"<p>开始之前，需要搞清楚两个概念：</p>\n<p>cocoapods 是通过spec repos + pod source code repo 来进行代码版本管理，cocoapods 的<a href=\"https://github.com/CocoaPods/Specs\">master spec repo</a>来管理所有的第三方库 spec，每个 spec 中都包含了对于 pod 的 source code pod。</p>\n<p><strong>私有源仓库：</strong>类似于 cocoapods 官方来管理 specs 的仓库，用来管理私有库的 spec，下文中使用<code>YOUR_SPECS_REPO</code>来指代。同时，这个 repo 也有自己的 git 地址，下文使用<code>YOUR_SPECS_GIT</code></p>\n<p><strong>私有 pod 代码仓库</strong>：存放私有库 source code 的 repo。</p>\n<p>下面是具体的操作步骤：</p>\n<h2 id=\"创建私有ReactNative-repo\"><a href=\"#创建私有ReactNative-repo\" class=\"headerlink\" title=\"创建私有ReactNative repo\"></a>创建私有ReactNative repo</h2><ul>\n<li>把 github 上的源码 clone 下来，然后 push 到自己的私有库 git 中</li>\n<li><strong>仓库代码是github源码</strong></li>\n<li>修复0.56.0中WebSocket问题</li>\n</ul>\n<h2 id=\"创建-amp-修改-podspec-json\"><a href=\"#创建-amp-修改-podspec-json\" class=\"headerlink\" title=\"创建&amp;修改 podspec.json\"></a>创建&amp;修改 podspec.json</h2><ul>\n<li><strong>切换到对应的tag commit: 如v0.56.0，下面的yoga和React需要保存version一致。</strong><ul>\n<li>然后按照《<a href=\"https://imfong.com/post/Private-Pods-Add-react-native\">私有Pods集成react-native库</a>》中生成和修改了yoga.podspec.json、React.podspec.json，需要修改yoga.podspec.json的source_files和public_header_files</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod ipc spec React.podspec &gt;&gt; React.podspec.json</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ReactCommon/yoga</span><br><span class=\"line\">pod ipc spec yoga.podspec &gt;&gt; yoga.podspec.json</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改yoga.podspec.json<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;git&quot;</span>: <span class=\"string\">&quot;YOUR_RN_GIT&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;source_files&quot;</span>: <span class=\"string\">&quot;ReactCommon/yoga/**/*.&#123;cpp,h&#125;&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;public_header_files&quot;</span>: <span class=\"string\">&quot;ReactCommon/yoga/**/&#123;Yoga,YGEnums,YGMacros&#125;.h&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"lint-amp-push-podspec-json\"><a href=\"#lint-amp-push-podspec-json\" class=\"headerlink\" title=\"lint &amp; push podspec.json\"></a>lint &amp; push podspec.json</h2><ul>\n<li><p>需要注意的是，修改后的podspec.json文件，需要进行lint校验、上传到私有源，下面是yoga的方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec lint yoga.podspec.json --no-clean --verbose --allow-warnings</span><br><span class=\"line\">pod repo push YOUR_SPECS_REPO yoga.podspec.json --allow-warnings</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过上面的方法可以吧RN和yoga添加到私有源中，但是我们pod install的时候，还是会报错</p>\n<img src=\"/posts/react-native-private-repo/Folly-error.png\" class=\"\">\n\n<ul>\n<li><p>Folly在RN中被CxxBridge、jschelpers等subspecs依赖，Folly.podspec文件本身在RN源码目录third-party-podspecs中，需要把Folly.podspec也上传到私有源中，否则pod install会出现错误</p>\n</li>\n<li><p>由于Folly在cocoapods公共源中已经没有维护，但是有志愿者维护了一个folly-ios的pod，需要我们添加到私有源中，添加方法和上面类似</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod repo push YOUR_SPECS_REPO Folly.podspec --allow-warnings</span><br></pre></td></tr></table></figure>\n<ul>\n<li>类似的，我们也需要把React.podspec.json文件提交到私有源中：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec lint React.podspec.json --no-clean --fail-fast --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.git</span><br><span class=\"line\">pod repo push YOUR_SPECS_REPO React.podspec.json --verbose --allow-warnings --sources=YOUR_SPECS_GIT,https://github.com/CocoaPods/Specs.git</span><br></pre></td></tr></table></figure>\n最终，我们总共需要添加了三个私有repo：<strong>RN&#x2F;Folly&#x2F;yoga</strong></li>\n</ul>\n<h2 id=\"创建离线js-bundle包\"><a href=\"#创建离线js-bundle包\" class=\"headerlink\" title=\"创建离线js bundle包\"></a>创建离线js bundle包</h2><p>使用下面命令生成js bundle:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native bundle --dev <span class=\"literal\">true</span> --entry-file index.ios.js --bundle-output ios/main.jsbundle --platform ios</span><br></pre></td></tr></table></figure>\n\n<p>通过–dev参数(true&#x2F;false)控制生成debug&#x2F;release包</p>\n<h1 id=\"如何维护RN版本\"><a href=\"#如何维护RN版本\" class=\"headerlink\" title=\"如何维护RN版本\"></a>如何维护RN版本</h1><p>同步Github上的ReactNative源码，在sourceTree中，添加remote:</p>\n<img src=\"/posts/react-native-private-repo/sourcetree.png\" class=\"\">\n\n<p>切换到当前的分支(0.57-stable)，可以从github上面拉取最新代码（使用rebase）<br>更新podspec.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod ipc spec React.podspec &gt;&gt; React.podspec.json</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ReactCommon/yoga</span><br><span class=\"line\">pod ipc spec yoga.podspec &gt;&gt; yoga.podspec.json</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建RN私有库</strong>的中已经提供了需要修改的地方。</p>\n<p><strong>lint &amp; push podspec.json</strong>，或者直接在私有源中进行修改。</p>\n<h2 id=\"RN代码有bug怎么办？\"><a href=\"#RN代码有bug怎么办？\" class=\"headerlink\" title=\"RN代码有bug怎么办？\"></a>RN代码有bug怎么办？</h2><p>从RN 0.56.0到RN 0.57.3，都没有解决websocket crash问题。</p>\n<p>解决方法：</p>\n<ol>\n<li><p>查看github issue，寻找问题解决方法。已web socket为例，已经用人<a href=\"https://github.com/facebook/react-native/pull/19489\">提了PR</a></p>\n</li>\n<li><p>把PR中的源代码下载到本地，然后本地进行验证。验证通过后，则commit &amp;&amp; push到当前tag 所在的分支</p>\n</li>\n<li><p>由于更新了RN源码，我们需要修改私有库中tag对应的commit：</p>\n<ol>\n<li>删除之前的tag（0.57.3），在最新的commit中来添加新tag（0.57.3)</li>\n<li>在React.podspec.json中，使用branch替代tag</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;source&quot;: &#123;</span><br><span class=\"line\">    &quot;git&quot;: &quot;YOUR_RN_GIT&quot;,</span><br><span class=\"line\">    &quot;branch&quot;: &quot;0.57-stable&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"专治疑难杂症\"><a href=\"#专治疑难杂症\" class=\"headerlink\" title=\"专治疑难杂症\"></a>专治疑难杂症</h1><h2 id=\"RN-0-56-0-问题：\"><a href=\"#RN-0-56-0-问题：\" class=\"headerlink\" title=\"RN 0.56.0 问题：\"></a><strong>RN 0.56.0 问题：</strong></h2><ul>\n<li><p><a href=\"https://github.com/facebook/react-native/issues/21086\"><strong>com.squareup.SocketRocket.NetworkThread(18): EXC_BAD_ACCESS</strong></a></p>\n<ul>\n<li>解决的PR:<a href=\"https://github.com/facebook/react-native/pull/19489\">https://github.com/facebook/react-native/pull/19489</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/facebook/react-native/issues/20567\"><strong>WebSocket <code>registerEvents</code> is undefined when running master</strong></a></p>\n<ul>\n<li>解决方法：<a href=\"https://stackoverflow.com/a/52486616\">https://stackoverflow.com/a/52486616</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"RN-0-57-3-问题：\"><a href=\"#RN-0-57-3-问题：\" class=\"headerlink\" title=\"RN 0.57.3 问题：\"></a><strong>RN 0.57.3 问题：</strong></h2><ul>\n<li><p><strong>Unable to resolve module <code>schedule/tracking</code></strong></p>\n<img src=\"/posts/react-native-private-repo/schedule-error.png\" class=\"\"></li>\n</ul>\n<h1 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a><strong>参考资料：</strong></h1><ul>\n<li><p><a href=\"https://github.com/facebook/react-native/issues/19892\">swift cocoapods Could not build Objective-C module ‘React’</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/611b49ccf351\">含泪导入React-native 0.54到Swift原生项目</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/57ed76e90605\">React Native 0.50.0 集成遇到的问题</a></p>\n</li>\n<li><p>《<a href=\"http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/\">使用Cocoapods创建私有podspec</a>》</p>\n</li>\n<li><p>《<a href=\"https://imfong.com/post/Private-Pods-Add-react-native#yoga\">私有Pods集成react-native库</a>》</p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/questions/32304421/whats-the-difference-between-pod-spec-lint-and-pod-lib-lint\">What’s the difference between ‘pod spec lint’ and ‘pod lib lint’?</a></p>\n</li>\n</ul>"},{"title":"iOS多线程开发笔记","abbrlink":"ios-thread-tips","date":"2016-11-15T13:51:37.000Z","_content":"\n[TOC]\n\n## GCD、NSOperation和多线程编程推荐阅读\n\n**五星：**\n\n1. [iOS 并发编程之 Operation Queues](http://blog.leichunfeng.com/blog/2015/07/29/ios-concurrency-programming-operation-queues/)\n2. [GCD 深入理解：第一部分](https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md#gcd-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86)\n3. [iOS并发编程对比总结,NSThread,NSOperation,GCD - iOS](http://blog.csdn.net/zyq522376829/article/details/52373154) \n\n**四星：**\n\n1. [NSOperation in NShipster](http://nshipster.cn/nsoperation/) \n2. [深入浅出 Cocoa 多线程编程之 block 与 dispatch quene](http://www.cppblog.com/kesalin/archive/2011/08/26/154411.aspx)\n3. [GCD使用经验与技巧浅谈](http://tutuge.me/2015/04/03/something-about-gcd/)\n\n<!-- more -->\n\n## 多线程编程概念\n\n### 基本概念、术语：\n\n1. 进程（Precess）：进程是操作系统管理和分配资源的最小单位，每个进程都有自己的内存空间、系统资源，至少有一个主线程和多个辅助线程。在iOS中，每个App运行的时候，都有对应的进程。\n2. 线程（Thread）：线程则是操作系统具体的执行单元，代码的执行是在线程来完成的。在iOS中，线程的底层实现是基于POSIX thread API的，也就是我们常说的pthread。\n3. 任务（Task）：任务是我们抽象出来的需要执行的工作，一般指代一段代码。\n4. 同步 vs 异步\n   1. 同步是指函数的调用会阻塞当前的线程，必须等待函数返回才能继续执行接下来的代码。\n   2. 异步函数的调用则不会阻塞当前线程，函数调用之后立刻返回，一般通过回调函数来处理函数的执行结果。\n   3. 异步函数能够有效的完成一些耗时的任务，而不必影响代码的执行流，能够提高代码的处理效率。\n5. 串行 vs 并发\n   1. 串行指的是在同一个时间只能有一个任务在执行。\n   2. 并发指的是在同一个时间可以有多个任务一起执行。\n   3. 并发一般用于多核编程，通过高效的利用多核的优势，把不同的任务分配到各个执行单元来提高效率。\n6. Dispatch Queue vs Operation Queue\n   1. GCD和NSOperation/NSOperationQueue是iOS上面来处理多线程开发的工具，对应的概念分别是Dispatch Queue和Operation Queue。\n\n### iOS并发编程模型\n\n1. 在其他的操作系统中，我们往往需要手动创建线程、管理线程的生命周期，在不需要的时候负责销毁线程和线程使用的资源，更加痛苦的是需要使用线程锁、信号量、代码临界区等手段完成线程的同步工作，这些操作往往容易出错而且繁杂。\n2. iOS通过抽象出队列的概念，让开发者更加关注于任务的安排和调度，而从线程的管理工作中解脱出来。在很多时候，iOS把一些繁杂且容易出错的工作（ARC代替MRC）抽离到底层中，能够让开发者把注意力更多地放到真正的任务上，这也是iOS能够吸引广大开发者的原因之一吧。\n\n## NSThread vs GCD vs NSOperation，它们到底是什么？ \n\n### 三种解决方案\n\n1. NSThread：一个封装pthread API的线程对象，需要进行线程创建、销毁和处理线程同步，是最接近系统底层的解决方案。\n2. GCD：苹果基于C语言开发的，一个用于多核编程的解决方案，是一个轻量级的、以FIFO的顺序来执行并发任务的库。\n3. NSOperation：建立在GCD的基础上，面向对象的解决方案，比GCD更加灵活，也更加强大。\n\n#### 它们具体是什么？\n\n1. NSThread: Cocoa对于pthread API的封装，提供了一套面向对象的接口，需要开发者自行管理线程的生命周期、处理线程同步。大多是的时候，我们是不需要直接使用这些底层的对象，而是使用GCD或者NSOperation等更加高级的接口。\n2. 关于Operation对象\n   1. NSOperation对象本身是一个抽象类，不能直接使用。要么使用系统预定义的两个子类NSInvocationOperation和NSBlockOperation或者定义它的子类。\n   2. NSInvocationOperation:可以使用**object**和**selector**来创建一个NSInvocationOperation，非常的方便和灵活。当代码中已经有相关的处理逻辑方法时，建议直接使用NSInvocationOperation来进行替代。\n   3. NSBlockOperation：可以使用NSBlockOperation来并发的执行一个或者多个block，只有当所有的block都执行完毕，NSBlockOperation才算执行完成，有点像dispatch_group的概念。\n   4. 所有的Operation都有下面的特性：\n      1. 支持在 operation 之间建立依赖关系，只有当一个 operation 所依赖的所有 operation 都执行完成时，这个 operation 才能开始执行；\n      2. 支持一个可选的 completion block ，这个 block 将会在 operation 的主任务执行完成时被调用，在任务被取消的时候也会执行；\n      3. 支持通过 KVO 来观察 operation 执行状态的变化，Operation正是通过KVO通知来实现依赖运行，所以我们需要在自定义的子类中的处理好KVO的属性；\n      4. 支持设置执行的优先级，从而影响 operation 之间的相对执行顺序；\n      5. 支持取消操作，可以允许我们停止正在执行的 operation 。\n3. GCD队列：\n   1. 以FIFO顺序执行任务的队列调度系统，先入队列的任务一定先执行。\n   2. 两种类型的队列：\n      1. 串行队列（Serial Queue）:同一时间内只能有一个任务正在被执行。\n      2. 并发队列（Concurrent Queue）:同一时间内可以有多个任务同时被执行。\n      3. iOS默认提供5个队列：\n         1. 主队列（Main Queue）：应用程序主线程应用的队列，用于更新UI，属于串行队列。\n         2. 四个全局队列：\n            1. 按照队列优先级排序，分别是：High、Default、Low、Background。\n            2. 这四个全局队列是由系统提供的，在所有的App中共享，当然也包含了Apple的应用。\n         3. 并发队列中任务的执行顺序：\n            1. 由于队列的并发数是有系统根据当前的资源动态管理的，我们不知道也不能够设置队列中任务执行的时机和所需时长。\n            2. 只有当位于队列前面的任务执行完毕、出队列后，才会执行后面的任务，但是当前并发执行的任务数量我们不得而知。\n   3. 自定义队列：\n      1. 我们可以自定义串行或者并发队列来完成任务的执行和调度。\n\n\n\n### 各自的优势和劣势\n\n1. 优势：\n   1. NSThread：\n      1. 能够执行实时任务。其他两者都是由系统管理的队列，不能保证实时性。\n   2. GCD：\n      1. 可以非常简洁的完成简单异步任务的调用，如在主线程更新UI，延迟执行。\n      2. 只需要把任务分发到队列之后，不需要管理任务的调度情况。\n   3. NSOperation：\n      1. 给任务添加依赖\n      2. 取消或者暂停一个正在执行的任务\n      3. 有一个可选的completionBlock\n      4. 可以通过KVO来查看任务的执行情况\n      5. 可以给任务设置优先级，从而影响任务的执行顺序\n2. 短板：\n   1. NSThread：需要进行线程的创建、销毁，以及处理线程同步的问题，过于繁杂，而且容易出错。\n   2. GCD:\n      1. 对于任务的管理不够：如不能取消任务、设置依赖和优先级等。\n   3. NSOperation:\n      1. 相比于GCD，会增加系统的额外开销。\n\n## 多线程代码中，需要注意哪些问题？\n\n1. 有了GCD来调度block，我们为什么还需要NSBlockOperation?\n   1. 现有代码已经在使用OperationQueue，而我们不想使用Dispatch Queue的时候，NSBlockOperation提供了一个面向对象的封装。\n   2. 当我们需要dispatch queue不能提供的功能时，如KVO观察Operation状态变化、设置operation之间依赖等。\n2. NSInvocationOperation的灵活性是什么意思？\n   1. 我们可以通过上下文来改变selector和object对象。\n3. 如何定义一个非并发的operation？\n   1. 对于非并发的operation，我们只需要实现main方法和能够正常响应取消事件。\n   2. 其他复杂的工作如KVO通知、依赖设置等工作NSOperation类的start方法已经帮我们提供了默认实现。\n   3. 简单实现：\n      1. 提供一个自定义的初始化方法\n      2. 重写main方法\n4. 如何实现一个并发的operation？\n   1. 一般我们不需要实现并发的operation，当operation和operation queue一起使用的时候，Operation Queue会为非并发的operation创建单独的线程。\n   2. 默认情况下，operation是同步执行的，也就是我们直接使用start方法的时候，它是在调用者的线程中执行的。\n   3. Operation的isConcurrent属性表明一个operation是否支持并发。\n   4. 配置并发的Operation：只有当我们需要手动执行operation，并且希望支持并发执行，需要重写下面的方法。\n      1. start：必须，配置任务执行的线程和其他资源，但是一定**不能调用父类的实现**。\n      2. main：可选，一般用来执行具体的任务，而start方法更多是用来配置初始环境，当然也可以用来执行具体的任务。\n      3. isExecuting和isFinished：必须，并发的Operation需要自己来配置环境，同时还需要向外界来传递状态的变化，而isExecuting和isFinished这两个状态的变化需要使用KVO来通知外部。\n      4. isConcurrent：必须，用来标识一个Operation是否支持并发。\n5. 如何完成自定义operation的cancel操作？\n   1. 在下面这几个关键点的检查isCancelled属性\n      1. 在真正开始执行operaiton之前\n      2. 至少在一次循环之中需要检查一次，如果单次循环耗时较长，则需要更加频繁的检查\n      3. 在任何相对比较容易终止Operation的地方\n   2. 需要注意的是虽然Operation支持取消操作，但是并不是立刻就可以被终止的，而是在下一个isCancelled的检查点。\n   3. 在我们自定义Operation子类的时候，即使operation是被cancel了，我们仍然需要设置isFinished方法为true，因为在设置operation依赖的时候，它们的operation就是通过KVO来观察isFinished方法来判断时候可以执行的，如果在cancel的时候，没有设置isFinished方法，那么其他的operation将永远不会执行。\n6. 如何定制Operation对象的执行行为：\n   1. 在Operation添加到Operation Queue之前，我们可以配置Operation的一些行为。\n   2. 配置依赖关系\n      1. 依赖关系是在Operation之间的，与是否在同一个Operation Queue没有关系，也就是说，我们在位于不同的Operation Queue中的Operation之间设置依赖。\n      2. 注意不要产生依赖循环。\n      3. 在把operation添加到Operation Queue之前就需要配置好依赖，在添加后设置的依赖可能无效。\n   3. 修改operation在队列中的优先级\n      1. Operation在队列中的执行顺序取决于isReady状态和队列优先级。\n      2. isReady受它所依赖的operation状态的影响，只有当依赖的所有operation都变为isFinished的时候，isReady状态才为true。\n      3. queuePriority只能作用与相同队列中的operation，并且队列优先级只有当isReady为true的时候，才会决定operation的执行顺序。\n      4. isReady为FALSE的时候，isReady为true的低队列优先级的operation也会先执行。\n7. 一个串行的 operation queue 与一个串行的 dispatch queue是一样的么？\n   1. 两者都是在同一时间内只能有一个任务被执行，但是在任务的执行顺序上是不同的：\n      1. dispatch queue 的执行顺序一直是 FIFO 的\n      2. operation queue中的operation执行的顺序取决于isReady和queuePriority状态。\n8. 如何用GCD实现一个线程安全的单例？\n   1. ObjC\n   2. Swift","source":"_posts/iOS多线程开发笔记.md","raw":"---\ntitle: iOS多线程开发笔记\ntags:\n  - iOS\n  - 多线程\ncategories: 开发\nabbrlink: ios-thread-tips\ndate: 2016-11-15 21:51:37\n---\n\n[TOC]\n\n## GCD、NSOperation和多线程编程推荐阅读\n\n**五星：**\n\n1. [iOS 并发编程之 Operation Queues](http://blog.leichunfeng.com/blog/2015/07/29/ios-concurrency-programming-operation-queues/)\n2. [GCD 深入理解：第一部分](https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md#gcd-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86)\n3. [iOS并发编程对比总结,NSThread,NSOperation,GCD - iOS](http://blog.csdn.net/zyq522376829/article/details/52373154) \n\n**四星：**\n\n1. [NSOperation in NShipster](http://nshipster.cn/nsoperation/) \n2. [深入浅出 Cocoa 多线程编程之 block 与 dispatch quene](http://www.cppblog.com/kesalin/archive/2011/08/26/154411.aspx)\n3. [GCD使用经验与技巧浅谈](http://tutuge.me/2015/04/03/something-about-gcd/)\n\n<!-- more -->\n\n## 多线程编程概念\n\n### 基本概念、术语：\n\n1. 进程（Precess）：进程是操作系统管理和分配资源的最小单位，每个进程都有自己的内存空间、系统资源，至少有一个主线程和多个辅助线程。在iOS中，每个App运行的时候，都有对应的进程。\n2. 线程（Thread）：线程则是操作系统具体的执行单元，代码的执行是在线程来完成的。在iOS中，线程的底层实现是基于POSIX thread API的，也就是我们常说的pthread。\n3. 任务（Task）：任务是我们抽象出来的需要执行的工作，一般指代一段代码。\n4. 同步 vs 异步\n   1. 同步是指函数的调用会阻塞当前的线程，必须等待函数返回才能继续执行接下来的代码。\n   2. 异步函数的调用则不会阻塞当前线程，函数调用之后立刻返回，一般通过回调函数来处理函数的执行结果。\n   3. 异步函数能够有效的完成一些耗时的任务，而不必影响代码的执行流，能够提高代码的处理效率。\n5. 串行 vs 并发\n   1. 串行指的是在同一个时间只能有一个任务在执行。\n   2. 并发指的是在同一个时间可以有多个任务一起执行。\n   3. 并发一般用于多核编程，通过高效的利用多核的优势，把不同的任务分配到各个执行单元来提高效率。\n6. Dispatch Queue vs Operation Queue\n   1. GCD和NSOperation/NSOperationQueue是iOS上面来处理多线程开发的工具，对应的概念分别是Dispatch Queue和Operation Queue。\n\n### iOS并发编程模型\n\n1. 在其他的操作系统中，我们往往需要手动创建线程、管理线程的生命周期，在不需要的时候负责销毁线程和线程使用的资源，更加痛苦的是需要使用线程锁、信号量、代码临界区等手段完成线程的同步工作，这些操作往往容易出错而且繁杂。\n2. iOS通过抽象出队列的概念，让开发者更加关注于任务的安排和调度，而从线程的管理工作中解脱出来。在很多时候，iOS把一些繁杂且容易出错的工作（ARC代替MRC）抽离到底层中，能够让开发者把注意力更多地放到真正的任务上，这也是iOS能够吸引广大开发者的原因之一吧。\n\n## NSThread vs GCD vs NSOperation，它们到底是什么？ \n\n### 三种解决方案\n\n1. NSThread：一个封装pthread API的线程对象，需要进行线程创建、销毁和处理线程同步，是最接近系统底层的解决方案。\n2. GCD：苹果基于C语言开发的，一个用于多核编程的解决方案，是一个轻量级的、以FIFO的顺序来执行并发任务的库。\n3. NSOperation：建立在GCD的基础上，面向对象的解决方案，比GCD更加灵活，也更加强大。\n\n#### 它们具体是什么？\n\n1. NSThread: Cocoa对于pthread API的封装，提供了一套面向对象的接口，需要开发者自行管理线程的生命周期、处理线程同步。大多是的时候，我们是不需要直接使用这些底层的对象，而是使用GCD或者NSOperation等更加高级的接口。\n2. 关于Operation对象\n   1. NSOperation对象本身是一个抽象类，不能直接使用。要么使用系统预定义的两个子类NSInvocationOperation和NSBlockOperation或者定义它的子类。\n   2. NSInvocationOperation:可以使用**object**和**selector**来创建一个NSInvocationOperation，非常的方便和灵活。当代码中已经有相关的处理逻辑方法时，建议直接使用NSInvocationOperation来进行替代。\n   3. NSBlockOperation：可以使用NSBlockOperation来并发的执行一个或者多个block，只有当所有的block都执行完毕，NSBlockOperation才算执行完成，有点像dispatch_group的概念。\n   4. 所有的Operation都有下面的特性：\n      1. 支持在 operation 之间建立依赖关系，只有当一个 operation 所依赖的所有 operation 都执行完成时，这个 operation 才能开始执行；\n      2. 支持一个可选的 completion block ，这个 block 将会在 operation 的主任务执行完成时被调用，在任务被取消的时候也会执行；\n      3. 支持通过 KVO 来观察 operation 执行状态的变化，Operation正是通过KVO通知来实现依赖运行，所以我们需要在自定义的子类中的处理好KVO的属性；\n      4. 支持设置执行的优先级，从而影响 operation 之间的相对执行顺序；\n      5. 支持取消操作，可以允许我们停止正在执行的 operation 。\n3. GCD队列：\n   1. 以FIFO顺序执行任务的队列调度系统，先入队列的任务一定先执行。\n   2. 两种类型的队列：\n      1. 串行队列（Serial Queue）:同一时间内只能有一个任务正在被执行。\n      2. 并发队列（Concurrent Queue）:同一时间内可以有多个任务同时被执行。\n      3. iOS默认提供5个队列：\n         1. 主队列（Main Queue）：应用程序主线程应用的队列，用于更新UI，属于串行队列。\n         2. 四个全局队列：\n            1. 按照队列优先级排序，分别是：High、Default、Low、Background。\n            2. 这四个全局队列是由系统提供的，在所有的App中共享，当然也包含了Apple的应用。\n         3. 并发队列中任务的执行顺序：\n            1. 由于队列的并发数是有系统根据当前的资源动态管理的，我们不知道也不能够设置队列中任务执行的时机和所需时长。\n            2. 只有当位于队列前面的任务执行完毕、出队列后，才会执行后面的任务，但是当前并发执行的任务数量我们不得而知。\n   3. 自定义队列：\n      1. 我们可以自定义串行或者并发队列来完成任务的执行和调度。\n\n\n\n### 各自的优势和劣势\n\n1. 优势：\n   1. NSThread：\n      1. 能够执行实时任务。其他两者都是由系统管理的队列，不能保证实时性。\n   2. GCD：\n      1. 可以非常简洁的完成简单异步任务的调用，如在主线程更新UI，延迟执行。\n      2. 只需要把任务分发到队列之后，不需要管理任务的调度情况。\n   3. NSOperation：\n      1. 给任务添加依赖\n      2. 取消或者暂停一个正在执行的任务\n      3. 有一个可选的completionBlock\n      4. 可以通过KVO来查看任务的执行情况\n      5. 可以给任务设置优先级，从而影响任务的执行顺序\n2. 短板：\n   1. NSThread：需要进行线程的创建、销毁，以及处理线程同步的问题，过于繁杂，而且容易出错。\n   2. GCD:\n      1. 对于任务的管理不够：如不能取消任务、设置依赖和优先级等。\n   3. NSOperation:\n      1. 相比于GCD，会增加系统的额外开销。\n\n## 多线程代码中，需要注意哪些问题？\n\n1. 有了GCD来调度block，我们为什么还需要NSBlockOperation?\n   1. 现有代码已经在使用OperationQueue，而我们不想使用Dispatch Queue的时候，NSBlockOperation提供了一个面向对象的封装。\n   2. 当我们需要dispatch queue不能提供的功能时，如KVO观察Operation状态变化、设置operation之间依赖等。\n2. NSInvocationOperation的灵活性是什么意思？\n   1. 我们可以通过上下文来改变selector和object对象。\n3. 如何定义一个非并发的operation？\n   1. 对于非并发的operation，我们只需要实现main方法和能够正常响应取消事件。\n   2. 其他复杂的工作如KVO通知、依赖设置等工作NSOperation类的start方法已经帮我们提供了默认实现。\n   3. 简单实现：\n      1. 提供一个自定义的初始化方法\n      2. 重写main方法\n4. 如何实现一个并发的operation？\n   1. 一般我们不需要实现并发的operation，当operation和operation queue一起使用的时候，Operation Queue会为非并发的operation创建单独的线程。\n   2. 默认情况下，operation是同步执行的，也就是我们直接使用start方法的时候，它是在调用者的线程中执行的。\n   3. Operation的isConcurrent属性表明一个operation是否支持并发。\n   4. 配置并发的Operation：只有当我们需要手动执行operation，并且希望支持并发执行，需要重写下面的方法。\n      1. start：必须，配置任务执行的线程和其他资源，但是一定**不能调用父类的实现**。\n      2. main：可选，一般用来执行具体的任务，而start方法更多是用来配置初始环境，当然也可以用来执行具体的任务。\n      3. isExecuting和isFinished：必须，并发的Operation需要自己来配置环境，同时还需要向外界来传递状态的变化，而isExecuting和isFinished这两个状态的变化需要使用KVO来通知外部。\n      4. isConcurrent：必须，用来标识一个Operation是否支持并发。\n5. 如何完成自定义operation的cancel操作？\n   1. 在下面这几个关键点的检查isCancelled属性\n      1. 在真正开始执行operaiton之前\n      2. 至少在一次循环之中需要检查一次，如果单次循环耗时较长，则需要更加频繁的检查\n      3. 在任何相对比较容易终止Operation的地方\n   2. 需要注意的是虽然Operation支持取消操作，但是并不是立刻就可以被终止的，而是在下一个isCancelled的检查点。\n   3. 在我们自定义Operation子类的时候，即使operation是被cancel了，我们仍然需要设置isFinished方法为true，因为在设置operation依赖的时候，它们的operation就是通过KVO来观察isFinished方法来判断时候可以执行的，如果在cancel的时候，没有设置isFinished方法，那么其他的operation将永远不会执行。\n6. 如何定制Operation对象的执行行为：\n   1. 在Operation添加到Operation Queue之前，我们可以配置Operation的一些行为。\n   2. 配置依赖关系\n      1. 依赖关系是在Operation之间的，与是否在同一个Operation Queue没有关系，也就是说，我们在位于不同的Operation Queue中的Operation之间设置依赖。\n      2. 注意不要产生依赖循环。\n      3. 在把operation添加到Operation Queue之前就需要配置好依赖，在添加后设置的依赖可能无效。\n   3. 修改operation在队列中的优先级\n      1. Operation在队列中的执行顺序取决于isReady状态和队列优先级。\n      2. isReady受它所依赖的operation状态的影响，只有当依赖的所有operation都变为isFinished的时候，isReady状态才为true。\n      3. queuePriority只能作用与相同队列中的operation，并且队列优先级只有当isReady为true的时候，才会决定operation的执行顺序。\n      4. isReady为FALSE的时候，isReady为true的低队列优先级的operation也会先执行。\n7. 一个串行的 operation queue 与一个串行的 dispatch queue是一样的么？\n   1. 两者都是在同一时间内只能有一个任务被执行，但是在任务的执行顺序上是不同的：\n      1. dispatch queue 的执行顺序一直是 FIFO 的\n      2. operation queue中的operation执行的顺序取决于isReady和queuePriority状态。\n8. 如何用GCD实现一个线程安全的单例？\n   1. ObjC\n   2. Swift","slug":"iOS多线程开发笔记","published":1,"updated":"2022-04-05T13:46:10.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6hf968n000yx6u0a0bnd44a","content":"<p>[TOC]</p>\n<h2 id=\"GCD、NSOperation和多线程编程推荐阅读\"><a href=\"#GCD、NSOperation和多线程编程推荐阅读\" class=\"headerlink\" title=\"GCD、NSOperation和多线程编程推荐阅读\"></a>GCD、NSOperation和多线程编程推荐阅读</h2><p><strong>五星：</strong></p>\n<ol>\n<li><a href=\"http://blog.leichunfeng.com/blog/2015/07/29/ios-concurrency-programming-operation-queues/\">iOS 并发编程之 Operation Queues</a></li>\n<li><a href=\"https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md#gcd-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86\">GCD 深入理解：第一部分</a></li>\n<li><a href=\"http://blog.csdn.net/zyq522376829/article/details/52373154\">iOS并发编程对比总结,NSThread,NSOperation,GCD - iOS</a></li>\n</ol>\n<p> </p>\n<p><strong>四星：</strong></p>\n<ol>\n<li><a href=\"http://nshipster.cn/nsoperation/\">NSOperation in NShipster</a> </li>\n<li><a href=\"http://www.cppblog.com/kesalin/archive/2011/08/26/154411.aspx\">深入浅出 Cocoa 多线程编程之 block 与 dispatch quene</a></li>\n<li><a href=\"http://tutuge.me/2015/04/03/something-about-gcd/\">GCD使用经验与技巧浅谈</a></li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"多线程编程概念\"><a href=\"#多线程编程概念\" class=\"headerlink\" title=\"多线程编程概念\"></a>多线程编程概念</h2><h3 id=\"基本概念、术语：\"><a href=\"#基本概念、术语：\" class=\"headerlink\" title=\"基本概念、术语：\"></a>基本概念、术语：</h3><ol>\n<li>进程（Precess）：进程是操作系统管理和分配资源的最小单位，每个进程都有自己的内存空间、系统资源，至少有一个主线程和多个辅助线程。在iOS中，每个App运行的时候，都有对应的进程。</li>\n<li>线程（Thread）：线程则是操作系统具体的执行单元，代码的执行是在线程来完成的。在iOS中，线程的底层实现是基于POSIX thread API的，也就是我们常说的pthread。</li>\n<li>任务（Task）：任务是我们抽象出来的需要执行的工作，一般指代一段代码。</li>\n<li>同步 vs 异步<ol>\n<li>同步是指函数的调用会阻塞当前的线程，必须等待函数返回才能继续执行接下来的代码。</li>\n<li>异步函数的调用则不会阻塞当前线程，函数调用之后立刻返回，一般通过回调函数来处理函数的执行结果。</li>\n<li>异步函数能够有效的完成一些耗时的任务，而不必影响代码的执行流，能够提高代码的处理效率。</li>\n</ol>\n</li>\n<li>串行 vs 并发<ol>\n<li>串行指的是在同一个时间只能有一个任务在执行。</li>\n<li>并发指的是在同一个时间可以有多个任务一起执行。</li>\n<li>并发一般用于多核编程，通过高效的利用多核的优势，把不同的任务分配到各个执行单元来提高效率。</li>\n</ol>\n</li>\n<li>Dispatch Queue vs Operation Queue<ol>\n<li>GCD和NSOperation&#x2F;NSOperationQueue是iOS上面来处理多线程开发的工具，对应的概念分别是Dispatch Queue和Operation Queue。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"iOS并发编程模型\"><a href=\"#iOS并发编程模型\" class=\"headerlink\" title=\"iOS并发编程模型\"></a>iOS并发编程模型</h3><ol>\n<li>在其他的操作系统中，我们往往需要手动创建线程、管理线程的生命周期，在不需要的时候负责销毁线程和线程使用的资源，更加痛苦的是需要使用线程锁、信号量、代码临界区等手段完成线程的同步工作，这些操作往往容易出错而且繁杂。</li>\n<li>iOS通过抽象出队列的概念，让开发者更加关注于任务的安排和调度，而从线程的管理工作中解脱出来。在很多时候，iOS把一些繁杂且容易出错的工作（ARC代替MRC）抽离到底层中，能够让开发者把注意力更多地放到真正的任务上，这也是iOS能够吸引广大开发者的原因之一吧。</li>\n</ol>\n<h2 id=\"NSThread-vs-GCD-vs-NSOperation，它们到底是什么？\"><a href=\"#NSThread-vs-GCD-vs-NSOperation，它们到底是什么？\" class=\"headerlink\" title=\"NSThread vs GCD vs NSOperation，它们到底是什么？\"></a>NSThread vs GCD vs NSOperation，它们到底是什么？</h2><h3 id=\"三种解决方案\"><a href=\"#三种解决方案\" class=\"headerlink\" title=\"三种解决方案\"></a>三种解决方案</h3><ol>\n<li>NSThread：一个封装pthread API的线程对象，需要进行线程创建、销毁和处理线程同步，是最接近系统底层的解决方案。</li>\n<li>GCD：苹果基于C语言开发的，一个用于多核编程的解决方案，是一个轻量级的、以FIFO的顺序来执行并发任务的库。</li>\n<li>NSOperation：建立在GCD的基础上，面向对象的解决方案，比GCD更加灵活，也更加强大。</li>\n</ol>\n<h4 id=\"它们具体是什么？\"><a href=\"#它们具体是什么？\" class=\"headerlink\" title=\"它们具体是什么？\"></a>它们具体是什么？</h4><ol>\n<li>NSThread: Cocoa对于pthread API的封装，提供了一套面向对象的接口，需要开发者自行管理线程的生命周期、处理线程同步。大多是的时候，我们是不需要直接使用这些底层的对象，而是使用GCD或者NSOperation等更加高级的接口。</li>\n<li>关于Operation对象<ol>\n<li>NSOperation对象本身是一个抽象类，不能直接使用。要么使用系统预定义的两个子类NSInvocationOperation和NSBlockOperation或者定义它的子类。</li>\n<li>NSInvocationOperation:可以使用<strong>object</strong>和<strong>selector</strong>来创建一个NSInvocationOperation，非常的方便和灵活。当代码中已经有相关的处理逻辑方法时，建议直接使用NSInvocationOperation来进行替代。</li>\n<li>NSBlockOperation：可以使用NSBlockOperation来并发的执行一个或者多个block，只有当所有的block都执行完毕，NSBlockOperation才算执行完成，有点像dispatch_group的概念。</li>\n<li>所有的Operation都有下面的特性：<ol>\n<li>支持在 operation 之间建立依赖关系，只有当一个 operation 所依赖的所有 operation 都执行完成时，这个 operation 才能开始执行；</li>\n<li>支持一个可选的 completion block ，这个 block 将会在 operation 的主任务执行完成时被调用，在任务被取消的时候也会执行；</li>\n<li>支持通过 KVO 来观察 operation 执行状态的变化，Operation正是通过KVO通知来实现依赖运行，所以我们需要在自定义的子类中的处理好KVO的属性；</li>\n<li>支持设置执行的优先级，从而影响 operation 之间的相对执行顺序；</li>\n<li>支持取消操作，可以允许我们停止正在执行的 operation 。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>GCD队列：<ol>\n<li>以FIFO顺序执行任务的队列调度系统，先入队列的任务一定先执行。</li>\n<li>两种类型的队列：<ol>\n<li>串行队列（Serial Queue）:同一时间内只能有一个任务正在被执行。</li>\n<li>并发队列（Concurrent Queue）:同一时间内可以有多个任务同时被执行。</li>\n<li>iOS默认提供5个队列：<ol>\n<li>主队列（Main Queue）：应用程序主线程应用的队列，用于更新UI，属于串行队列。</li>\n<li>四个全局队列：<ol>\n<li>按照队列优先级排序，分别是：High、Default、Low、Background。</li>\n<li>这四个全局队列是由系统提供的，在所有的App中共享，当然也包含了Apple的应用。</li>\n</ol>\n</li>\n<li>并发队列中任务的执行顺序：<ol>\n<li>由于队列的并发数是有系统根据当前的资源动态管理的，我们不知道也不能够设置队列中任务执行的时机和所需时长。</li>\n<li>只有当位于队列前面的任务执行完毕、出队列后，才会执行后面的任务，但是当前并发执行的任务数量我们不得而知。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>自定义队列：<ol>\n<li>我们可以自定义串行或者并发队列来完成任务的执行和调度。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"各自的优势和劣势\"><a href=\"#各自的优势和劣势\" class=\"headerlink\" title=\"各自的优势和劣势\"></a>各自的优势和劣势</h3><ol>\n<li>优势：<ol>\n<li>NSThread：<ol>\n<li>能够执行实时任务。其他两者都是由系统管理的队列，不能保证实时性。</li>\n</ol>\n</li>\n<li>GCD：<ol>\n<li>可以非常简洁的完成简单异步任务的调用，如在主线程更新UI，延迟执行。</li>\n<li>只需要把任务分发到队列之后，不需要管理任务的调度情况。</li>\n</ol>\n</li>\n<li>NSOperation：<ol>\n<li>给任务添加依赖</li>\n<li>取消或者暂停一个正在执行的任务</li>\n<li>有一个可选的completionBlock</li>\n<li>可以通过KVO来查看任务的执行情况</li>\n<li>可以给任务设置优先级，从而影响任务的执行顺序</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>短板：<ol>\n<li>NSThread：需要进行线程的创建、销毁，以及处理线程同步的问题，过于繁杂，而且容易出错。</li>\n<li>GCD:<ol>\n<li>对于任务的管理不够：如不能取消任务、设置依赖和优先级等。</li>\n</ol>\n</li>\n<li>NSOperation:<ol>\n<li>相比于GCD，会增加系统的额外开销。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"多线程代码中，需要注意哪些问题？\"><a href=\"#多线程代码中，需要注意哪些问题？\" class=\"headerlink\" title=\"多线程代码中，需要注意哪些问题？\"></a>多线程代码中，需要注意哪些问题？</h2><ol>\n<li>有了GCD来调度block，我们为什么还需要NSBlockOperation?<ol>\n<li>现有代码已经在使用OperationQueue，而我们不想使用Dispatch Queue的时候，NSBlockOperation提供了一个面向对象的封装。</li>\n<li>当我们需要dispatch queue不能提供的功能时，如KVO观察Operation状态变化、设置operation之间依赖等。</li>\n</ol>\n</li>\n<li>NSInvocationOperation的灵活性是什么意思？<ol>\n<li>我们可以通过上下文来改变selector和object对象。</li>\n</ol>\n</li>\n<li>如何定义一个非并发的operation？<ol>\n<li>对于非并发的operation，我们只需要实现main方法和能够正常响应取消事件。</li>\n<li>其他复杂的工作如KVO通知、依赖设置等工作NSOperation类的start方法已经帮我们提供了默认实现。</li>\n<li>简单实现：<ol>\n<li>提供一个自定义的初始化方法</li>\n<li>重写main方法</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何实现一个并发的operation？<ol>\n<li>一般我们不需要实现并发的operation，当operation和operation queue一起使用的时候，Operation Queue会为非并发的operation创建单独的线程。</li>\n<li>默认情况下，operation是同步执行的，也就是我们直接使用start方法的时候，它是在调用者的线程中执行的。</li>\n<li>Operation的isConcurrent属性表明一个operation是否支持并发。</li>\n<li>配置并发的Operation：只有当我们需要手动执行operation，并且希望支持并发执行，需要重写下面的方法。<ol>\n<li>start：必须，配置任务执行的线程和其他资源，但是一定<strong>不能调用父类的实现</strong>。</li>\n<li>main：可选，一般用来执行具体的任务，而start方法更多是用来配置初始环境，当然也可以用来执行具体的任务。</li>\n<li>isExecuting和isFinished：必须，并发的Operation需要自己来配置环境，同时还需要向外界来传递状态的变化，而isExecuting和isFinished这两个状态的变化需要使用KVO来通知外部。</li>\n<li>isConcurrent：必须，用来标识一个Operation是否支持并发。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何完成自定义operation的cancel操作？<ol>\n<li>在下面这几个关键点的检查isCancelled属性<ol>\n<li>在真正开始执行operaiton之前</li>\n<li>至少在一次循环之中需要检查一次，如果单次循环耗时较长，则需要更加频繁的检查</li>\n<li>在任何相对比较容易终止Operation的地方</li>\n</ol>\n</li>\n<li>需要注意的是虽然Operation支持取消操作，但是并不是立刻就可以被终止的，而是在下一个isCancelled的检查点。</li>\n<li>在我们自定义Operation子类的时候，即使operation是被cancel了，我们仍然需要设置isFinished方法为true，因为在设置operation依赖的时候，它们的operation就是通过KVO来观察isFinished方法来判断时候可以执行的，如果在cancel的时候，没有设置isFinished方法，那么其他的operation将永远不会执行。</li>\n</ol>\n</li>\n<li>如何定制Operation对象的执行行为：<ol>\n<li>在Operation添加到Operation Queue之前，我们可以配置Operation的一些行为。</li>\n<li>配置依赖关系<ol>\n<li>依赖关系是在Operation之间的，与是否在同一个Operation Queue没有关系，也就是说，我们在位于不同的Operation Queue中的Operation之间设置依赖。</li>\n<li>注意不要产生依赖循环。</li>\n<li>在把operation添加到Operation Queue之前就需要配置好依赖，在添加后设置的依赖可能无效。</li>\n</ol>\n</li>\n<li>修改operation在队列中的优先级<ol>\n<li>Operation在队列中的执行顺序取决于isReady状态和队列优先级。</li>\n<li>isReady受它所依赖的operation状态的影响，只有当依赖的所有operation都变为isFinished的时候，isReady状态才为true。</li>\n<li>queuePriority只能作用与相同队列中的operation，并且队列优先级只有当isReady为true的时候，才会决定operation的执行顺序。</li>\n<li>isReady为FALSE的时候，isReady为true的低队列优先级的operation也会先执行。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>一个串行的 operation queue 与一个串行的 dispatch queue是一样的么？<ol>\n<li>两者都是在同一时间内只能有一个任务被执行，但是在任务的执行顺序上是不同的：<ol>\n<li>dispatch queue 的执行顺序一直是 FIFO 的</li>\n<li>operation queue中的operation执行的顺序取决于isReady和queuePriority状态。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何用GCD实现一个线程安全的单例？<ol>\n<li>ObjC</li>\n<li>Swift</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{"hexo-leancloud-counter-security-fix":"/* global hexo */\n\n'use strict';\n\nconst AV = require('leancloud-storage');\nconst readlineSync = require('readline-sync');\nconst packageInfo = require('./package.json');\nconst pathFn = require('path');\nconst fs = require('fs');\n\nfunction generate_post_list(locals) {\n    let { config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    var urlsPath = 'leancloud_counter_security_urls.json';\n    var urls = [...locals.posts.toArray()]\n        .filter(x => x.published)\n        .map(x => {\n            return {\n                title: x.title,\n                url  : config.root + x.path\n            };\n        });\n    return {\n        path: urlsPath,\n        data: JSON.stringify(urls)\n    };\n}\n\nhexo.extend.generator.register('leancloud_counter_security_generator', generate_post_list);\n\nfunction cmp(x, y) {\n    if (x.url < y.url) {\n        return -1;\n    } else if (x.url === y.url) {\n        return 0;\n    }\n    return 1;\n}\n\nfunction postOperation(env, cnt, limit, newData, memoData, log) {\n    if (cnt !== limit) return;\n\n    newData.sort(cmp);\n    var sourceDir = env.source_dir;\n    var publicDir = env.public_dir;\n    var memoFile = pathFn.join(sourceDir, 'leancloud.memo');\n    fs.writeFileSync(memoFile, '[\\n');\n\n    var memoIdx = 1;\n    for (var i = 0; newData[i]; i++) {\n        while (memoData[memoIdx] !== ']') {\n            var y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > newData[i].url) break;\n\n            fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n            memoIdx++;\n        }\n        fs.writeFileSync(memoFile, '{\"title\":\"' + newData[i].title + '\",\"url\":\"' + newData[i].url + '\"},\\n', { flag: 'a' });\n    }\n    while (memoData[memoIdx] !== ']') {\n        fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n        memoIdx++;\n    }\n    fs.writeFileSync(memoFile, memoData[memoIdx], { flag: 'a' });\n\n    var srcFile = pathFn.join(sourceDir, 'leancloud.memo');\n    var destFile = pathFn.join(publicDir, 'leancloud.memo');\n    var readStream = fs.createReadStream(srcFile);\n    var writeStream = fs.createWriteStream(destFile);\n    readStream.pipe(writeStream);\n    log.info('leancloud.memo successfully updated.');\n}\n\nasync function sync() {\n    let { log, config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    let { app_id, app_key, server_url } = config.leancloud_counter_security;\n    var publicDir = this.public_dir;\n    var UrlsFile = pathFn.join(publicDir, 'leancloud_counter_security_urls.json');\n    var urls = JSON.parse(fs.readFileSync(UrlsFile, 'utf8'));\n\n    AV.init({\n        appId    : app_id,\n        appKey   : app_key,\n        serverURL: server_url\n    });\n\n    var currentUser = AV.User.current();\n    if (!currentUser) {\n        var userName = config.leancloud_counter_security.username;\n        var passWord = config.leancloud_counter_security.password;\n        if (!userName) {\n            userName = readlineSync.question('Enter your username: ');\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        } else if (!passWord) {\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        }\n        await AV.User.logIn(userName, passWord).then(loginedUser => {\n            log.info('Logined as: ' + loginedUser.getUsername());\n        }, error => {\n            log.error(error);\n        });\n    }\n\n    log.info('Now syncing your posts list to leancloud counter...');\n    var Counter = AV.Object.extend('Counter');\n    var memoFile = pathFn.join(publicDir, 'leancloud.memo');\n    if (!fs.existsSync(memoFile)) {\n        fs.writeFileSync(memoFile, '[\\n]');\n    }\n    var memoData = fs.readFileSync(memoFile, 'utf-8').split('\\n');\n    var memoIdx = 1;\n    var newData = [];\n    var cnt = 0;\n    var limit = 0;\n    var env = this;\n    urls.sort(cmp).forEach(x => {\n        var y = {};\n        y.title = '';\n        y.url = '';\n        var flag = false;\n        while (memoData[memoIdx] !== ']') {\n            y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > x.url) break;\n            if (y.url === x.url && y.title === x.title) {\n                flag = true;\n                break;\n            }\n            memoIdx++;\n        }\n        if (flag) return;\n\n        log.info('Dealing with record of ' + x.title);\n        limit++;\n        var query = new AV.Query('Counter');\n        query.equalTo('url', x.url);\n        query.count().then(count => {\n            if (count === 0) {\n                var counter = new Counter();\n                counter.set('url', x.url);\n                counter.set('title', x.title);\n                counter.set('time', 0);\n                counter.save().then(obj => {\n                    log.info(x.title + ' is saved as: ' + obj.id);\n                    newData.push(x);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                }, error => {\n                    log.error(error);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                });\n            } else {\n                newData.push(x);\n                cnt++;\n                postOperation(env, cnt, limit, newData, memoData, log);\n            }\n        }, error => {\n            log.error(error);\n            cnt++;\n            postOperation(env, cnt, limit, newData, memoData, log);\n        });\n    });\n}\n\nhexo.extend.deployer.register('leancloud_counter_security_sync', sync);\n\nvar commandOptions = {\n    desc     : packageInfo.description,\n    usage    : ' <argument>',\n    arguments: [\n        {\n            name: 'register | r <username> <password>',\n            desc: 'Register a new user.'\n        }\n    ]\n};\n\nfunction commandFunc(args) {\n    let { log, config } = this;\n\n    if (args._.length !== 3) {\n        log.error('Too Few or Many Arguments.');\n    } else if (args._[0] === 'register' || args._[0] === 'r') {\n        let { app_id, app_key, server_url } = config.leancloud_counter_security;\n        AV.init({\n            appId    : app_id,\n            appKey   : app_key,\n            serverURL: server_url\n        });\n\n        var user = new AV.User();\n        user.setUsername(String(args._[1]));\n        user.setPassword(String(args._[2]));\n        user.signUp().then(loginedUser => {\n            log.info(loginedUser.getUsername() + ' is successfully signed up');\n        }, error => {\n            log.error(error);\n        });\n    } else {\n        log.error('Unknown Command.');\n    }\n}\n\nhexo.extend.console.register('lc-counter', 'hexo-leancloud-counter-security', commandOptions, commandFunc);\n"}},"length":4703,"excerpt":"<p>[TOC]</p>\n<h2 id=\"GCD、NSOperation和多线程编程推荐阅读\"><a href=\"#GCD、NSOperation和多线程编程推荐阅读\" class=\"headerlink\" title=\"GCD、NSOperation和多线程编程推荐阅读\"></a>GCD、NSOperation和多线程编程推荐阅读</h2><p><strong>五星：</strong></p>\n<ol>\n<li><a href=\"http://blog.leichunfeng.com/blog/2015/07/29/ios-concurrency-programming-operation-queues/\">iOS 并发编程之 Operation Queues</a></li>\n<li><a href=\"https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md#gcd-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86\">GCD 深入理解：第一部分</a></li>\n<li><a href=\"http://blog.csdn.net/zyq522376829/article/details/52373154\">iOS并发编程对比总结,NSThread,NSOperation,GCD - iOS</a></li>\n</ol>\n<p> </p>\n<p><strong>四星：</strong></p>\n<ol>\n<li><a href=\"http://nshipster.cn/nsoperation/\">NSOperation in NShipster</a> </li>\n<li><a href=\"http://www.cppblog.com/kesalin/archive/2011/08/26/154411.aspx\">深入浅出 Cocoa 多线程编程之 block 与 dispatch quene</a></li>\n<li><a href=\"http://tutuge.me/2015/04/03/something-about-gcd/\">GCD使用经验与技巧浅谈</a></li>\n</ol>","more":"<h2 id=\"多线程编程概念\"><a href=\"#多线程编程概念\" class=\"headerlink\" title=\"多线程编程概念\"></a>多线程编程概念</h2><h3 id=\"基本概念、术语：\"><a href=\"#基本概念、术语：\" class=\"headerlink\" title=\"基本概念、术语：\"></a>基本概念、术语：</h3><ol>\n<li>进程（Precess）：进程是操作系统管理和分配资源的最小单位，每个进程都有自己的内存空间、系统资源，至少有一个主线程和多个辅助线程。在iOS中，每个App运行的时候，都有对应的进程。</li>\n<li>线程（Thread）：线程则是操作系统具体的执行单元，代码的执行是在线程来完成的。在iOS中，线程的底层实现是基于POSIX thread API的，也就是我们常说的pthread。</li>\n<li>任务（Task）：任务是我们抽象出来的需要执行的工作，一般指代一段代码。</li>\n<li>同步 vs 异步<ol>\n<li>同步是指函数的调用会阻塞当前的线程，必须等待函数返回才能继续执行接下来的代码。</li>\n<li>异步函数的调用则不会阻塞当前线程，函数调用之后立刻返回，一般通过回调函数来处理函数的执行结果。</li>\n<li>异步函数能够有效的完成一些耗时的任务，而不必影响代码的执行流，能够提高代码的处理效率。</li>\n</ol>\n</li>\n<li>串行 vs 并发<ol>\n<li>串行指的是在同一个时间只能有一个任务在执行。</li>\n<li>并发指的是在同一个时间可以有多个任务一起执行。</li>\n<li>并发一般用于多核编程，通过高效的利用多核的优势，把不同的任务分配到各个执行单元来提高效率。</li>\n</ol>\n</li>\n<li>Dispatch Queue vs Operation Queue<ol>\n<li>GCD和NSOperation&#x2F;NSOperationQueue是iOS上面来处理多线程开发的工具，对应的概念分别是Dispatch Queue和Operation Queue。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"iOS并发编程模型\"><a href=\"#iOS并发编程模型\" class=\"headerlink\" title=\"iOS并发编程模型\"></a>iOS并发编程模型</h3><ol>\n<li>在其他的操作系统中，我们往往需要手动创建线程、管理线程的生命周期，在不需要的时候负责销毁线程和线程使用的资源，更加痛苦的是需要使用线程锁、信号量、代码临界区等手段完成线程的同步工作，这些操作往往容易出错而且繁杂。</li>\n<li>iOS通过抽象出队列的概念，让开发者更加关注于任务的安排和调度，而从线程的管理工作中解脱出来。在很多时候，iOS把一些繁杂且容易出错的工作（ARC代替MRC）抽离到底层中，能够让开发者把注意力更多地放到真正的任务上，这也是iOS能够吸引广大开发者的原因之一吧。</li>\n</ol>\n<h2 id=\"NSThread-vs-GCD-vs-NSOperation，它们到底是什么？\"><a href=\"#NSThread-vs-GCD-vs-NSOperation，它们到底是什么？\" class=\"headerlink\" title=\"NSThread vs GCD vs NSOperation，它们到底是什么？\"></a>NSThread vs GCD vs NSOperation，它们到底是什么？</h2><h3 id=\"三种解决方案\"><a href=\"#三种解决方案\" class=\"headerlink\" title=\"三种解决方案\"></a>三种解决方案</h3><ol>\n<li>NSThread：一个封装pthread API的线程对象，需要进行线程创建、销毁和处理线程同步，是最接近系统底层的解决方案。</li>\n<li>GCD：苹果基于C语言开发的，一个用于多核编程的解决方案，是一个轻量级的、以FIFO的顺序来执行并发任务的库。</li>\n<li>NSOperation：建立在GCD的基础上，面向对象的解决方案，比GCD更加灵活，也更加强大。</li>\n</ol>\n<h4 id=\"它们具体是什么？\"><a href=\"#它们具体是什么？\" class=\"headerlink\" title=\"它们具体是什么？\"></a>它们具体是什么？</h4><ol>\n<li>NSThread: Cocoa对于pthread API的封装，提供了一套面向对象的接口，需要开发者自行管理线程的生命周期、处理线程同步。大多是的时候，我们是不需要直接使用这些底层的对象，而是使用GCD或者NSOperation等更加高级的接口。</li>\n<li>关于Operation对象<ol>\n<li>NSOperation对象本身是一个抽象类，不能直接使用。要么使用系统预定义的两个子类NSInvocationOperation和NSBlockOperation或者定义它的子类。</li>\n<li>NSInvocationOperation:可以使用<strong>object</strong>和<strong>selector</strong>来创建一个NSInvocationOperation，非常的方便和灵活。当代码中已经有相关的处理逻辑方法时，建议直接使用NSInvocationOperation来进行替代。</li>\n<li>NSBlockOperation：可以使用NSBlockOperation来并发的执行一个或者多个block，只有当所有的block都执行完毕，NSBlockOperation才算执行完成，有点像dispatch_group的概念。</li>\n<li>所有的Operation都有下面的特性：<ol>\n<li>支持在 operation 之间建立依赖关系，只有当一个 operation 所依赖的所有 operation 都执行完成时，这个 operation 才能开始执行；</li>\n<li>支持一个可选的 completion block ，这个 block 将会在 operation 的主任务执行完成时被调用，在任务被取消的时候也会执行；</li>\n<li>支持通过 KVO 来观察 operation 执行状态的变化，Operation正是通过KVO通知来实现依赖运行，所以我们需要在自定义的子类中的处理好KVO的属性；</li>\n<li>支持设置执行的优先级，从而影响 operation 之间的相对执行顺序；</li>\n<li>支持取消操作，可以允许我们停止正在执行的 operation 。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>GCD队列：<ol>\n<li>以FIFO顺序执行任务的队列调度系统，先入队列的任务一定先执行。</li>\n<li>两种类型的队列：<ol>\n<li>串行队列（Serial Queue）:同一时间内只能有一个任务正在被执行。</li>\n<li>并发队列（Concurrent Queue）:同一时间内可以有多个任务同时被执行。</li>\n<li>iOS默认提供5个队列：<ol>\n<li>主队列（Main Queue）：应用程序主线程应用的队列，用于更新UI，属于串行队列。</li>\n<li>四个全局队列：<ol>\n<li>按照队列优先级排序，分别是：High、Default、Low、Background。</li>\n<li>这四个全局队列是由系统提供的，在所有的App中共享，当然也包含了Apple的应用。</li>\n</ol>\n</li>\n<li>并发队列中任务的执行顺序：<ol>\n<li>由于队列的并发数是有系统根据当前的资源动态管理的，我们不知道也不能够设置队列中任务执行的时机和所需时长。</li>\n<li>只有当位于队列前面的任务执行完毕、出队列后，才会执行后面的任务，但是当前并发执行的任务数量我们不得而知。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>自定义队列：<ol>\n<li>我们可以自定义串行或者并发队列来完成任务的执行和调度。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"各自的优势和劣势\"><a href=\"#各自的优势和劣势\" class=\"headerlink\" title=\"各自的优势和劣势\"></a>各自的优势和劣势</h3><ol>\n<li>优势：<ol>\n<li>NSThread：<ol>\n<li>能够执行实时任务。其他两者都是由系统管理的队列，不能保证实时性。</li>\n</ol>\n</li>\n<li>GCD：<ol>\n<li>可以非常简洁的完成简单异步任务的调用，如在主线程更新UI，延迟执行。</li>\n<li>只需要把任务分发到队列之后，不需要管理任务的调度情况。</li>\n</ol>\n</li>\n<li>NSOperation：<ol>\n<li>给任务添加依赖</li>\n<li>取消或者暂停一个正在执行的任务</li>\n<li>有一个可选的completionBlock</li>\n<li>可以通过KVO来查看任务的执行情况</li>\n<li>可以给任务设置优先级，从而影响任务的执行顺序</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>短板：<ol>\n<li>NSThread：需要进行线程的创建、销毁，以及处理线程同步的问题，过于繁杂，而且容易出错。</li>\n<li>GCD:<ol>\n<li>对于任务的管理不够：如不能取消任务、设置依赖和优先级等。</li>\n</ol>\n</li>\n<li>NSOperation:<ol>\n<li>相比于GCD，会增加系统的额外开销。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"多线程代码中，需要注意哪些问题？\"><a href=\"#多线程代码中，需要注意哪些问题？\" class=\"headerlink\" title=\"多线程代码中，需要注意哪些问题？\"></a>多线程代码中，需要注意哪些问题？</h2><ol>\n<li>有了GCD来调度block，我们为什么还需要NSBlockOperation?<ol>\n<li>现有代码已经在使用OperationQueue，而我们不想使用Dispatch Queue的时候，NSBlockOperation提供了一个面向对象的封装。</li>\n<li>当我们需要dispatch queue不能提供的功能时，如KVO观察Operation状态变化、设置operation之间依赖等。</li>\n</ol>\n</li>\n<li>NSInvocationOperation的灵活性是什么意思？<ol>\n<li>我们可以通过上下文来改变selector和object对象。</li>\n</ol>\n</li>\n<li>如何定义一个非并发的operation？<ol>\n<li>对于非并发的operation，我们只需要实现main方法和能够正常响应取消事件。</li>\n<li>其他复杂的工作如KVO通知、依赖设置等工作NSOperation类的start方法已经帮我们提供了默认实现。</li>\n<li>简单实现：<ol>\n<li>提供一个自定义的初始化方法</li>\n<li>重写main方法</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何实现一个并发的operation？<ol>\n<li>一般我们不需要实现并发的operation，当operation和operation queue一起使用的时候，Operation Queue会为非并发的operation创建单独的线程。</li>\n<li>默认情况下，operation是同步执行的，也就是我们直接使用start方法的时候，它是在调用者的线程中执行的。</li>\n<li>Operation的isConcurrent属性表明一个operation是否支持并发。</li>\n<li>配置并发的Operation：只有当我们需要手动执行operation，并且希望支持并发执行，需要重写下面的方法。<ol>\n<li>start：必须，配置任务执行的线程和其他资源，但是一定<strong>不能调用父类的实现</strong>。</li>\n<li>main：可选，一般用来执行具体的任务，而start方法更多是用来配置初始环境，当然也可以用来执行具体的任务。</li>\n<li>isExecuting和isFinished：必须，并发的Operation需要自己来配置环境，同时还需要向外界来传递状态的变化，而isExecuting和isFinished这两个状态的变化需要使用KVO来通知外部。</li>\n<li>isConcurrent：必须，用来标识一个Operation是否支持并发。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何完成自定义operation的cancel操作？<ol>\n<li>在下面这几个关键点的检查isCancelled属性<ol>\n<li>在真正开始执行operaiton之前</li>\n<li>至少在一次循环之中需要检查一次，如果单次循环耗时较长，则需要更加频繁的检查</li>\n<li>在任何相对比较容易终止Operation的地方</li>\n</ol>\n</li>\n<li>需要注意的是虽然Operation支持取消操作，但是并不是立刻就可以被终止的，而是在下一个isCancelled的检查点。</li>\n<li>在我们自定义Operation子类的时候，即使operation是被cancel了，我们仍然需要设置isFinished方法为true，因为在设置operation依赖的时候，它们的operation就是通过KVO来观察isFinished方法来判断时候可以执行的，如果在cancel的时候，没有设置isFinished方法，那么其他的operation将永远不会执行。</li>\n</ol>\n</li>\n<li>如何定制Operation对象的执行行为：<ol>\n<li>在Operation添加到Operation Queue之前，我们可以配置Operation的一些行为。</li>\n<li>配置依赖关系<ol>\n<li>依赖关系是在Operation之间的，与是否在同一个Operation Queue没有关系，也就是说，我们在位于不同的Operation Queue中的Operation之间设置依赖。</li>\n<li>注意不要产生依赖循环。</li>\n<li>在把operation添加到Operation Queue之前就需要配置好依赖，在添加后设置的依赖可能无效。</li>\n</ol>\n</li>\n<li>修改operation在队列中的优先级<ol>\n<li>Operation在队列中的执行顺序取决于isReady状态和队列优先级。</li>\n<li>isReady受它所依赖的operation状态的影响，只有当依赖的所有operation都变为isFinished的时候，isReady状态才为true。</li>\n<li>queuePriority只能作用与相同队列中的operation，并且队列优先级只有当isReady为true的时候，才会决定operation的执行顺序。</li>\n<li>isReady为FALSE的时候，isReady为true的低队列优先级的operation也会先执行。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>一个串行的 operation queue 与一个串行的 dispatch queue是一样的么？<ol>\n<li>两者都是在同一时间内只能有一个任务被执行，但是在任务的执行顺序上是不同的：<ol>\n<li>dispatch queue 的执行顺序一直是 FIFO 的</li>\n<li>operation queue中的operation执行的顺序取决于isReady和queuePriority状态。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何用GCD实现一个线程安全的单例？<ol>\n<li>ObjC</li>\n<li>Swift</li>\n</ol>\n</li>\n</ol>"},{"title":"《人生战术本》- 里弗斯教练帮助他人“成为更好的人”","abbrlink":"the-palybook","date":"2022-04-05T06:36:16.000Z","_content":"\n\n本文内容节选自 Netflix 20 年推出的纪录片《人生战术本》（The Playbook）第一季第一集，主人公是拥有 22 年 NBA 执教经验的主教练道格·里弗斯。\n\n<!-- more -->\n\n{% asset_img the-playbook.png %}\n\n“我是里弗斯，我是人，我也会犯错”，开场白非常的平易近人，让人倍感亲切~\n\n**做你自己喜欢的事情，你才不会觉得累。**\n\n几十年来，里弗斯起床到篮球场去训练，但是他不喜欢用“训练”这个词，当被人问到去做什么的时候，他总是喜欢说去“打篮球”。里弗斯小时候被问到成长以后想变成一个什么样的人，第一次他在黑板上面写到“成为一名 NBA球员”但是被老师给擦掉了，然后对他说道“降低预期，现实一点”，于是当里弗斯第二次在黑板上面写到“我想成为一名 NBA 球员”，老师让他直接回家请家长了“那你收拾好自己的东西回家想想吧”。\n\n回到家里，里弗斯的爸爸这样对他说“你在学校没有好好听老师讲课，你总是把事情搞砸、喜欢胡闹，你以后当不了职业球员”，最终里弗斯不仅成为了 NBA球员，到目前为止也在 NBA执教了 20 多年，这一切出自于他对篮球的喜爱和坚持吧\n\n**凯尔特人第十八冠的故事 -不会熄灭的灯和“乌班图”的生活方式**\n\n他和队员都在一起践行“乌班图”的生活方式，在团队中相信他人、成就他人，最终形成一个“共同体”。\n\n在比赛前夕里弗斯的父亲去世了，他离开团队飞回老家参加父亲的葬礼，当里弗斯和家人在电视机前面观看比赛的时候，中场休息时间收到了加内特打过来的电话，加内特说道“当你难过的时候，我们也感到很难过”，里弗斯谈到此情此景的时候都会感到很激动。那场比赛在的最后 7 秒钟，皮尔斯把球传给了雷·阿伦，由雷·阿伦投入了制胜三分最终帮助球队完成逆转，我们通过电视转播能够看到凯尔特人逆转比赛、看到赢得胜利之后队员们欢快的庆祝，但是背后的故事也挺让人感动。\n\n有一场比赛胜利之后，记者问加内特“今晚你非常注重防守，你觉得自己在防守方面有哪些地方做的比较好？”，“不是我，而是我们。我在我应该在的位置，而我的队友们也在他们应该在的位置（这样才能不失位）。我们需要靠这种积极的补位来赢得比赛”，加内特给出了这样的回答。\n\n有一天里弗斯在球馆上方的 17 块总冠军旗帜旁边打了一个灯光，寓意“不会熄灭的灯”，当天训练介绍之后他询问球员们今天球馆有什么不同的地方，只有托尼·阿伦发现在球馆上方多出了一块光。“是的，灯不会熄灭，我们的焦点就在那里，我们比赛就是为了这个”，“每天、每次练习，他们都看到那盏灯照着墙”，激发队员们“我们是波士顿凯尔特人队，我们就是要赢”。\n\n\n里弗斯谈到自己的偶像是拳王阿里，“直觉上大家会觉得冠军是不被击打的，但是事实其实是相反的，冠军会被一次次的击打，就看你能挨多少次打，同时还要向前进，直到取得胜利”。\n\n\n\n一个好的教练，需要让自己的队员相信自己能够赢得下一场比赛。里弗斯小的时候的目标就是击败自己的哥哥，哥哥比他健壮、力量更强，从最开始32：0到 32：4，然后到 32：8，通过自己持续练习、一步步成长起来最终击败了哥哥。\n\n\n\n一开始里弗斯认为自己作为主教练的职责是带领团队赢得一场场的胜利，后面能够通过指导队员、看着他们逐渐成熟起来、“打出来”也是一种喜悦或者说幸福。不过，他也有收到过一些忠告“不要和团队成员走得太近了，因为总有人会让你失望”。但是里弗斯认为教练的职责就是指导他们，让他们成为更好的球员、更好的人、更好的队友、变得坚强、有热情，学会面对赢输。\n\n\n19 年CBA的 官方纪录片《敢梦敢当》里面，看到了杜峰作为球队主教练的成长，也看到了他不为人知的一面：一个有血有肉的人、体贴他人、关注成长、激励队员。在竞技体育里面，一个团队要想在顶级舞台上面想要夺得冠军，背后一定是付出了巨大的努力，除了日复一日的练习，研究对手的强弱点，还需要一名优秀的教练，给大家带来前进的方向，激励团队里面的每一个人成为更好的自己。 \n\n------\n\n《人生战术本》分享了传奇教练在运动和生活中取得成功所遵循的规则。通过感人的深度访谈，每位教练都透露了他们个人生活和职业生涯中的关键时刻，这些时刻最终帮助他们形成了自己的教练哲学。\n\nB站链接：https://www.bilibili.com/video/BV1WA411J76h\n","source":"_posts/《人生战术本》- 里弗斯教练帮助他人“成为更好的人”.md","raw":"---\ntitle: 《人生战术本》- 里弗斯教练帮助他人“成为更好的人”\ncategories:\n  - 分享\ntags:\n  - 分享\nabbrlink: the-palybook\ndate: 2022-04-05 14:36:16\n---\n\n\n本文内容节选自 Netflix 20 年推出的纪录片《人生战术本》（The Playbook）第一季第一集，主人公是拥有 22 年 NBA 执教经验的主教练道格·里弗斯。\n\n<!-- more -->\n\n{% asset_img the-playbook.png %}\n\n“我是里弗斯，我是人，我也会犯错”，开场白非常的平易近人，让人倍感亲切~\n\n**做你自己喜欢的事情，你才不会觉得累。**\n\n几十年来，里弗斯起床到篮球场去训练，但是他不喜欢用“训练”这个词，当被人问到去做什么的时候，他总是喜欢说去“打篮球”。里弗斯小时候被问到成长以后想变成一个什么样的人，第一次他在黑板上面写到“成为一名 NBA球员”但是被老师给擦掉了，然后对他说道“降低预期，现实一点”，于是当里弗斯第二次在黑板上面写到“我想成为一名 NBA 球员”，老师让他直接回家请家长了“那你收拾好自己的东西回家想想吧”。\n\n回到家里，里弗斯的爸爸这样对他说“你在学校没有好好听老师讲课，你总是把事情搞砸、喜欢胡闹，你以后当不了职业球员”，最终里弗斯不仅成为了 NBA球员，到目前为止也在 NBA执教了 20 多年，这一切出自于他对篮球的喜爱和坚持吧\n\n**凯尔特人第十八冠的故事 -不会熄灭的灯和“乌班图”的生活方式**\n\n他和队员都在一起践行“乌班图”的生活方式，在团队中相信他人、成就他人，最终形成一个“共同体”。\n\n在比赛前夕里弗斯的父亲去世了，他离开团队飞回老家参加父亲的葬礼，当里弗斯和家人在电视机前面观看比赛的时候，中场休息时间收到了加内特打过来的电话，加内特说道“当你难过的时候，我们也感到很难过”，里弗斯谈到此情此景的时候都会感到很激动。那场比赛在的最后 7 秒钟，皮尔斯把球传给了雷·阿伦，由雷·阿伦投入了制胜三分最终帮助球队完成逆转，我们通过电视转播能够看到凯尔特人逆转比赛、看到赢得胜利之后队员们欢快的庆祝，但是背后的故事也挺让人感动。\n\n有一场比赛胜利之后，记者问加内特“今晚你非常注重防守，你觉得自己在防守方面有哪些地方做的比较好？”，“不是我，而是我们。我在我应该在的位置，而我的队友们也在他们应该在的位置（这样才能不失位）。我们需要靠这种积极的补位来赢得比赛”，加内特给出了这样的回答。\n\n有一天里弗斯在球馆上方的 17 块总冠军旗帜旁边打了一个灯光，寓意“不会熄灭的灯”，当天训练介绍之后他询问球员们今天球馆有什么不同的地方，只有托尼·阿伦发现在球馆上方多出了一块光。“是的，灯不会熄灭，我们的焦点就在那里，我们比赛就是为了这个”，“每天、每次练习，他们都看到那盏灯照着墙”，激发队员们“我们是波士顿凯尔特人队，我们就是要赢”。\n\n\n里弗斯谈到自己的偶像是拳王阿里，“直觉上大家会觉得冠军是不被击打的，但是事实其实是相反的，冠军会被一次次的击打，就看你能挨多少次打，同时还要向前进，直到取得胜利”。\n\n\n\n一个好的教练，需要让自己的队员相信自己能够赢得下一场比赛。里弗斯小的时候的目标就是击败自己的哥哥，哥哥比他健壮、力量更强，从最开始32：0到 32：4，然后到 32：8，通过自己持续练习、一步步成长起来最终击败了哥哥。\n\n\n\n一开始里弗斯认为自己作为主教练的职责是带领团队赢得一场场的胜利，后面能够通过指导队员、看着他们逐渐成熟起来、“打出来”也是一种喜悦或者说幸福。不过，他也有收到过一些忠告“不要和团队成员走得太近了，因为总有人会让你失望”。但是里弗斯认为教练的职责就是指导他们，让他们成为更好的球员、更好的人、更好的队友、变得坚强、有热情，学会面对赢输。\n\n\n19 年CBA的 官方纪录片《敢梦敢当》里面，看到了杜峰作为球队主教练的成长，也看到了他不为人知的一面：一个有血有肉的人、体贴他人、关注成长、激励队员。在竞技体育里面，一个团队要想在顶级舞台上面想要夺得冠军，背后一定是付出了巨大的努力，除了日复一日的练习，研究对手的强弱点，还需要一名优秀的教练，给大家带来前进的方向，激励团队里面的每一个人成为更好的自己。 \n\n------\n\n《人生战术本》分享了传奇教练在运动和生活中取得成功所遵循的规则。通过感人的深度访谈，每位教练都透露了他们个人生活和职业生涯中的关键时刻，这些时刻最终帮助他们形成了自己的教练哲学。\n\nB站链接：https://www.bilibili.com/video/BV1WA411J76h\n","slug":"《人生战术本》- 里弗斯教练帮助他人“成为更好的人”","published":1,"updated":"2022-07-30T08:53:56.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6hf968n000zx6u0507hcz0z","content":"<p>本文内容节选自 Netflix 20 年推出的纪录片《人生战术本》（The Playbook）第一季第一集，主人公是拥有 22 年 NBA 执教经验的主教练道格·里弗斯。</p>\n<span id=\"more\"></span>\n\n<img src=\"/posts/the-palybook/the-playbook.png\" class=\"\">\n\n<p>“我是里弗斯，我是人，我也会犯错”，开场白非常的平易近人，让人倍感亲切~</p>\n<p><strong>做你自己喜欢的事情，你才不会觉得累。</strong></p>\n<p>几十年来，里弗斯起床到篮球场去训练，但是他不喜欢用“训练”这个词，当被人问到去做什么的时候，他总是喜欢说去“打篮球”。里弗斯小时候被问到成长以后想变成一个什么样的人，第一次他在黑板上面写到“成为一名 NBA球员”但是被老师给擦掉了，然后对他说道“降低预期，现实一点”，于是当里弗斯第二次在黑板上面写到“我想成为一名 NBA 球员”，老师让他直接回家请家长了“那你收拾好自己的东西回家想想吧”。</p>\n<p>回到家里，里弗斯的爸爸这样对他说“你在学校没有好好听老师讲课，你总是把事情搞砸、喜欢胡闹，你以后当不了职业球员”，最终里弗斯不仅成为了 NBA球员，到目前为止也在 NBA执教了 20 多年，这一切出自于他对篮球的喜爱和坚持吧</p>\n<p><strong>凯尔特人第十八冠的故事 -不会熄灭的灯和“乌班图”的生活方式</strong></p>\n<p>他和队员都在一起践行“乌班图”的生活方式，在团队中相信他人、成就他人，最终形成一个“共同体”。</p>\n<p>在比赛前夕里弗斯的父亲去世了，他离开团队飞回老家参加父亲的葬礼，当里弗斯和家人在电视机前面观看比赛的时候，中场休息时间收到了加内特打过来的电话，加内特说道“当你难过的时候，我们也感到很难过”，里弗斯谈到此情此景的时候都会感到很激动。那场比赛在的最后 7 秒钟，皮尔斯把球传给了雷·阿伦，由雷·阿伦投入了制胜三分最终帮助球队完成逆转，我们通过电视转播能够看到凯尔特人逆转比赛、看到赢得胜利之后队员们欢快的庆祝，但是背后的故事也挺让人感动。</p>\n<p>有一场比赛胜利之后，记者问加内特“今晚你非常注重防守，你觉得自己在防守方面有哪些地方做的比较好？”，“不是我，而是我们。我在我应该在的位置，而我的队友们也在他们应该在的位置（这样才能不失位）。我们需要靠这种积极的补位来赢得比赛”，加内特给出了这样的回答。</p>\n<p>有一天里弗斯在球馆上方的 17 块总冠军旗帜旁边打了一个灯光，寓意“不会熄灭的灯”，当天训练介绍之后他询问球员们今天球馆有什么不同的地方，只有托尼·阿伦发现在球馆上方多出了一块光。“是的，灯不会熄灭，我们的焦点就在那里，我们比赛就是为了这个”，“每天、每次练习，他们都看到那盏灯照着墙”，激发队员们“我们是波士顿凯尔特人队，我们就是要赢”。</p>\n<p>里弗斯谈到自己的偶像是拳王阿里，“直觉上大家会觉得冠军是不被击打的，但是事实其实是相反的，冠军会被一次次的击打，就看你能挨多少次打，同时还要向前进，直到取得胜利”。</p>\n<p>一个好的教练，需要让自己的队员相信自己能够赢得下一场比赛。里弗斯小的时候的目标就是击败自己的哥哥，哥哥比他健壮、力量更强，从最开始32：0到 32：4，然后到 32：8，通过自己持续练习、一步步成长起来最终击败了哥哥。</p>\n<p>一开始里弗斯认为自己作为主教练的职责是带领团队赢得一场场的胜利，后面能够通过指导队员、看着他们逐渐成熟起来、“打出来”也是一种喜悦或者说幸福。不过，他也有收到过一些忠告“不要和团队成员走得太近了，因为总有人会让你失望”。但是里弗斯认为教练的职责就是指导他们，让他们成为更好的球员、更好的人、更好的队友、变得坚强、有热情，学会面对赢输。</p>\n<p>19 年CBA的 官方纪录片《敢梦敢当》里面，看到了杜峰作为球队主教练的成长，也看到了他不为人知的一面：一个有血有肉的人、体贴他人、关注成长、激励队员。在竞技体育里面，一个团队要想在顶级舞台上面想要夺得冠军，背后一定是付出了巨大的努力，除了日复一日的练习，研究对手的强弱点，还需要一名优秀的教练，给大家带来前进的方向，激励团队里面的每一个人成为更好的自己。 </p>\n<hr>\n<p>《人生战术本》分享了传奇教练在运动和生活中取得成功所遵循的规则。通过感人的深度访谈，每位教练都透露了他们个人生活和职业生涯中的关键时刻，这些时刻最终帮助他们形成了自己的教练哲学。</p>\n<p>B站链接：<a href=\"https://www.bilibili.com/video/BV1WA411J76h\">https://www.bilibili.com/video/BV1WA411J76h</a></p>\n","site":{"data":{"hexo-leancloud-counter-security-fix":"/* global hexo */\n\n'use strict';\n\nconst AV = require('leancloud-storage');\nconst readlineSync = require('readline-sync');\nconst packageInfo = require('./package.json');\nconst pathFn = require('path');\nconst fs = require('fs');\n\nfunction generate_post_list(locals) {\n    let { config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    var urlsPath = 'leancloud_counter_security_urls.json';\n    var urls = [...locals.posts.toArray()]\n        .filter(x => x.published)\n        .map(x => {\n            return {\n                title: x.title,\n                url  : config.root + x.path\n            };\n        });\n    return {\n        path: urlsPath,\n        data: JSON.stringify(urls)\n    };\n}\n\nhexo.extend.generator.register('leancloud_counter_security_generator', generate_post_list);\n\nfunction cmp(x, y) {\n    if (x.url < y.url) {\n        return -1;\n    } else if (x.url === y.url) {\n        return 0;\n    }\n    return 1;\n}\n\nfunction postOperation(env, cnt, limit, newData, memoData, log) {\n    if (cnt !== limit) return;\n\n    newData.sort(cmp);\n    var sourceDir = env.source_dir;\n    var publicDir = env.public_dir;\n    var memoFile = pathFn.join(sourceDir, 'leancloud.memo');\n    fs.writeFileSync(memoFile, '[\\n');\n\n    var memoIdx = 1;\n    for (var i = 0; newData[i]; i++) {\n        while (memoData[memoIdx] !== ']') {\n            var y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > newData[i].url) break;\n\n            fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n            memoIdx++;\n        }\n        fs.writeFileSync(memoFile, '{\"title\":\"' + newData[i].title + '\",\"url\":\"' + newData[i].url + '\"},\\n', { flag: 'a' });\n    }\n    while (memoData[memoIdx] !== ']') {\n        fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n        memoIdx++;\n    }\n    fs.writeFileSync(memoFile, memoData[memoIdx], { flag: 'a' });\n\n    var srcFile = pathFn.join(sourceDir, 'leancloud.memo');\n    var destFile = pathFn.join(publicDir, 'leancloud.memo');\n    var readStream = fs.createReadStream(srcFile);\n    var writeStream = fs.createWriteStream(destFile);\n    readStream.pipe(writeStream);\n    log.info('leancloud.memo successfully updated.');\n}\n\nasync function sync() {\n    let { log, config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    let { app_id, app_key, server_url } = config.leancloud_counter_security;\n    var publicDir = this.public_dir;\n    var UrlsFile = pathFn.join(publicDir, 'leancloud_counter_security_urls.json');\n    var urls = JSON.parse(fs.readFileSync(UrlsFile, 'utf8'));\n\n    AV.init({\n        appId    : app_id,\n        appKey   : app_key,\n        serverURL: server_url\n    });\n\n    var currentUser = AV.User.current();\n    if (!currentUser) {\n        var userName = config.leancloud_counter_security.username;\n        var passWord = config.leancloud_counter_security.password;\n        if (!userName) {\n            userName = readlineSync.question('Enter your username: ');\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        } else if (!passWord) {\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        }\n        await AV.User.logIn(userName, passWord).then(loginedUser => {\n            log.info('Logined as: ' + loginedUser.getUsername());\n        }, error => {\n            log.error(error);\n        });\n    }\n\n    log.info('Now syncing your posts list to leancloud counter...');\n    var Counter = AV.Object.extend('Counter');\n    var memoFile = pathFn.join(publicDir, 'leancloud.memo');\n    if (!fs.existsSync(memoFile)) {\n        fs.writeFileSync(memoFile, '[\\n]');\n    }\n    var memoData = fs.readFileSync(memoFile, 'utf-8').split('\\n');\n    var memoIdx = 1;\n    var newData = [];\n    var cnt = 0;\n    var limit = 0;\n    var env = this;\n    urls.sort(cmp).forEach(x => {\n        var y = {};\n        y.title = '';\n        y.url = '';\n        var flag = false;\n        while (memoData[memoIdx] !== ']') {\n            y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > x.url) break;\n            if (y.url === x.url && y.title === x.title) {\n                flag = true;\n                break;\n            }\n            memoIdx++;\n        }\n        if (flag) return;\n\n        log.info('Dealing with record of ' + x.title);\n        limit++;\n        var query = new AV.Query('Counter');\n        query.equalTo('url', x.url);\n        query.count().then(count => {\n            if (count === 0) {\n                var counter = new Counter();\n                counter.set('url', x.url);\n                counter.set('title', x.title);\n                counter.set('time', 0);\n                counter.save().then(obj => {\n                    log.info(x.title + ' is saved as: ' + obj.id);\n                    newData.push(x);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                }, error => {\n                    log.error(error);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                });\n            } else {\n                newData.push(x);\n                cnt++;\n                postOperation(env, cnt, limit, newData, memoData, log);\n            }\n        }, error => {\n            log.error(error);\n            cnt++;\n            postOperation(env, cnt, limit, newData, memoData, log);\n        });\n    });\n}\n\nhexo.extend.deployer.register('leancloud_counter_security_sync', sync);\n\nvar commandOptions = {\n    desc     : packageInfo.description,\n    usage    : ' <argument>',\n    arguments: [\n        {\n            name: 'register | r <username> <password>',\n            desc: 'Register a new user.'\n        }\n    ]\n};\n\nfunction commandFunc(args) {\n    let { log, config } = this;\n\n    if (args._.length !== 3) {\n        log.error('Too Few or Many Arguments.');\n    } else if (args._[0] === 'register' || args._[0] === 'r') {\n        let { app_id, app_key, server_url } = config.leancloud_counter_security;\n        AV.init({\n            appId    : app_id,\n            appKey   : app_key,\n            serverURL: server_url\n        });\n\n        var user = new AV.User();\n        user.setUsername(String(args._[1]));\n        user.setPassword(String(args._[2]));\n        user.signUp().then(loginedUser => {\n            log.info(loginedUser.getUsername() + ' is successfully signed up');\n        }, error => {\n            log.error(error);\n        });\n    } else {\n        log.error('Unknown Command.');\n    }\n}\n\nhexo.extend.console.register('lc-counter', 'hexo-leancloud-counter-security', commandOptions, commandFunc);\n"}},"length":1688,"excerpt":"<p>本文内容节选自 Netflix 20 年推出的纪录片《人生战术本》（The Playbook）第一季第一集，主人公是拥有 22 年 NBA 执教经验的主教练道格·里弗斯。</p>","more":"<img src=\"/posts/the-palybook/the-playbook.png\" class=\"\">\n\n<p>“我是里弗斯，我是人，我也会犯错”，开场白非常的平易近人，让人倍感亲切~</p>\n<p><strong>做你自己喜欢的事情，你才不会觉得累。</strong></p>\n<p>几十年来，里弗斯起床到篮球场去训练，但是他不喜欢用“训练”这个词，当被人问到去做什么的时候，他总是喜欢说去“打篮球”。里弗斯小时候被问到成长以后想变成一个什么样的人，第一次他在黑板上面写到“成为一名 NBA球员”但是被老师给擦掉了，然后对他说道“降低预期，现实一点”，于是当里弗斯第二次在黑板上面写到“我想成为一名 NBA 球员”，老师让他直接回家请家长了“那你收拾好自己的东西回家想想吧”。</p>\n<p>回到家里，里弗斯的爸爸这样对他说“你在学校没有好好听老师讲课，你总是把事情搞砸、喜欢胡闹，你以后当不了职业球员”，最终里弗斯不仅成为了 NBA球员，到目前为止也在 NBA执教了 20 多年，这一切出自于他对篮球的喜爱和坚持吧</p>\n<p><strong>凯尔特人第十八冠的故事 -不会熄灭的灯和“乌班图”的生活方式</strong></p>\n<p>他和队员都在一起践行“乌班图”的生活方式，在团队中相信他人、成就他人，最终形成一个“共同体”。</p>\n<p>在比赛前夕里弗斯的父亲去世了，他离开团队飞回老家参加父亲的葬礼，当里弗斯和家人在电视机前面观看比赛的时候，中场休息时间收到了加内特打过来的电话，加内特说道“当你难过的时候，我们也感到很难过”，里弗斯谈到此情此景的时候都会感到很激动。那场比赛在的最后 7 秒钟，皮尔斯把球传给了雷·阿伦，由雷·阿伦投入了制胜三分最终帮助球队完成逆转，我们通过电视转播能够看到凯尔特人逆转比赛、看到赢得胜利之后队员们欢快的庆祝，但是背后的故事也挺让人感动。</p>\n<p>有一场比赛胜利之后，记者问加内特“今晚你非常注重防守，你觉得自己在防守方面有哪些地方做的比较好？”，“不是我，而是我们。我在我应该在的位置，而我的队友们也在他们应该在的位置（这样才能不失位）。我们需要靠这种积极的补位来赢得比赛”，加内特给出了这样的回答。</p>\n<p>有一天里弗斯在球馆上方的 17 块总冠军旗帜旁边打了一个灯光，寓意“不会熄灭的灯”，当天训练介绍之后他询问球员们今天球馆有什么不同的地方，只有托尼·阿伦发现在球馆上方多出了一块光。“是的，灯不会熄灭，我们的焦点就在那里，我们比赛就是为了这个”，“每天、每次练习，他们都看到那盏灯照着墙”，激发队员们“我们是波士顿凯尔特人队，我们就是要赢”。</p>\n<p>里弗斯谈到自己的偶像是拳王阿里，“直觉上大家会觉得冠军是不被击打的，但是事实其实是相反的，冠军会被一次次的击打，就看你能挨多少次打，同时还要向前进，直到取得胜利”。</p>\n<p>一个好的教练，需要让自己的队员相信自己能够赢得下一场比赛。里弗斯小的时候的目标就是击败自己的哥哥，哥哥比他健壮、力量更强，从最开始32：0到 32：4，然后到 32：8，通过自己持续练习、一步步成长起来最终击败了哥哥。</p>\n<p>一开始里弗斯认为自己作为主教练的职责是带领团队赢得一场场的胜利，后面能够通过指导队员、看着他们逐渐成熟起来、“打出来”也是一种喜悦或者说幸福。不过，他也有收到过一些忠告“不要和团队成员走得太近了，因为总有人会让你失望”。但是里弗斯认为教练的职责就是指导他们，让他们成为更好的球员、更好的人、更好的队友、变得坚强、有热情，学会面对赢输。</p>\n<p>19 年CBA的 官方纪录片《敢梦敢当》里面，看到了杜峰作为球队主教练的成长，也看到了他不为人知的一面：一个有血有肉的人、体贴他人、关注成长、激励队员。在竞技体育里面，一个团队要想在顶级舞台上面想要夺得冠军，背后一定是付出了巨大的努力，除了日复一日的练习，研究对手的强弱点，还需要一名优秀的教练，给大家带来前进的方向，激励团队里面的每一个人成为更好的自己。 </p>\n<hr>\n<p>《人生战术本》分享了传奇教练在运动和生活中取得成功所遵循的规则。通过感人的深度访谈，每位教练都透露了他们个人生活和职业生涯中的关键时刻，这些时刻最终帮助他们形成了自己的教练哲学。</p>\n<p>B站链接：<a href=\"https://www.bilibili.com/video/BV1WA411J76h\">https://www.bilibili.com/video/BV1WA411J76h</a></p>"},{"title":"关于HTTP/2 的那些事","abbrlink":"http2-overview","date":"2022-04-08T14:07:27.000Z","_content":"\n## 前言\n\n作为客户端研发童鞋，HTTP 协议想必大家都算比较熟悉了，下面几个简单问题应该可以轻松回答：HTTP 的响应码有哪些？HTTP 301/302分别是做什么的？Cookie 和 Session 是做什么的？哪些请求是“幂等”？...\n\n\n\n但是对于 HTTP/2 往往了解比较少，本文主要基于 HTTP/2协议来回答几个问题：\n\n1. HTTP/1.x有哪些主要问题？\n2. 为什么不用 HTTP/2.0的命名？\n3. HTTP/2是什么？\n4. HTTP/2的兼容性怎么样？\n5. HTTP/2有哪些关键特性？\n6. HTTP/2使用现状如何?\n\n\n\n<!-- more -->\n\n已经清楚答案的童鞋请出门左拐(￣.￣)(￣.￣)\n\n\n\n## HTTP/1.x有哪些主要问题？\n\n\n\n- **header 冗余**\n\nHTTP/1.x 头字段通常是重复且冗长的，而且每次网络请求都需要带上一些重复的信息（e.g cookie、UserAgent等），导致不必要的网络流量以及导致初始TCP拥塞窗口被快速的填满。当在新的 TCP 连接上发出多个请求时，这可能导致过多的延迟。\n\n\n\n- **队头阻塞（head-of-line blocking）**\n\nHTTP/1.0 在给定的 TCP 连接上一次只允许一个请求未完成。HTTP/1.1 添加了请求流水线操作(request pipelining)，但这只是部分地解决了请求并发性，并且仍然受到**队首阻塞**的影响。因此，需要发出许多请求的 HTTP/1.0 和 HTTP/1.1 客户端使用多个连接到服务器以实现并发，从而减少延迟。\n\n## 为什么不用 HTTP/2.0的命名？\n\nHTTP/2 是由 [IETF](http://www.ietf.org/) 的 [HTTP 工作组](https://httpwg.github.io/)开发的，该工作组维护 HTTP 协议。它由许多 HTTP 实现、用户、网络运营商和 HTTP 专家组成。\n\n\n\n他们认为以前的“1.0”“1.1”造成了很多的混乱和误解，让人在实际的使用中难以区分差异，所以就决定 HTTP 协议不再使用小版本号（minor version），只使用大版本号（major version），从今往后 HTTP 协议不会出现 HTTP/2.0、2.1，只会有“HTTP/2”“HTTP/3”……\n\n这样就可以明确无误地辨别出协议版本的“跃进程度”，让协议在一段较长的时期内保持稳定，每当发布新版本的 HTTP 协议都会有本质的不同，绝不会有“零敲碎打”的小改良。\n\n\n\n## HTTP/2是什么？\n\n\n\n早年 Google 的童鞋为了优化 HTTP/1.1 协议，在实验室捣鼓了 SPDY协议，后面与HTTP 工作组一起合作参与了 HTTP/2的协议制定，下面是关于 HTTP/2的一些关键时间点：\n\n- 2012 年 3 月: 征集 HTTP/2 建议\n\n- 2012 年 11 月: 第一个 HTTP/2 草案（基于 SPDY）\n\n- 2014 年 8 月: HTTP/2 草案 17 和 HPACK 草案 12 发布\n\n- 2014 年 8 月: 工作组最后一次征集 HTTP/2 建议\n\n- 2015 年 2 月: IESG 批准 HTTP/2 和 HPACK 草案\n\n- 2015 年 5 月: RFC 7540 (HTTP/2) 和 RFC 7541 (HPACK) 发布\n\n\n\n这里主要介绍HTTP/2的几个重点内容：scheme& 端口号、建连过程和协议格式。\n\n\n\n- scheme&端口号\n\nHTTP/2 使用 HTTP/1.1 使用的相同 \"http\" 和 \"https\" URI scheme，HTTP/2 共享相同的默认端口号: \"http\" URI 为 80，\"https\" URI 为 443。\n\n\n\n- 建连过程\n\nHTTP/2 的初始请求是通过 HTTP/1.1的请求来进行升级的，这样如果服务器不支持 HTTP/2就可以继续使用 HTTP/1.1来进行通信（这个和 WebSocket 建连过程类似）\n\n\n\n```HTTP\nGET / HTTP/1.1\n\nHost: server.example.com\n\nConnection: Upgrade, HTTP2-Settings\n\nUpgrade: h2c\n\nHTTP2-Settings: <base64url encoding of HTTP/2 SETTINGS payload>\n```\n\n\n\n如何服务器不支持 HTTP/2，则返回 HTTP/1.1的响应:\n\n```HTTP\nHTTP/1.1 200 OK\n\nContent-Length: 243\n\nContent-Type: text/html\n\n\n\n...\n```\n\n\n\n如何服务器支持 HTTP/2，则通过 101(交换协议)响应接受升级:\n\n```HTTP\nHTTP/1.1 101 Switching Protocols\n\nConnection: Upgrade\n\nUpgrade: h2c\n\n\n\n[ HTTP/2 connection ...\n```\n\n\n\n- 协议格式\n\n在 HTTP/1.1 中，头信息是文本编码(ASCII编码)，数据包体可以是二进制也可以是文本。\n\n\n\n和 HTTP/1.x最大的区别：HTTP/2 是一个彻彻底底的**二进制协议，头信息和数据包体都是二进制的，统称为“帧”**。使用二进制作为协议实现方式的好处，更加灵活。\n\n\n\n在 HTTP/1.1 中的一个消息是由 Start Line + header + body 组成的，而 HTTP/2 中一个消息是由 **HEADER frame** + 若干个 **DATA frame** 组成的，如下图：\n\n{% asset_img HTTP2-overview.png %}\n\n\n\n关于 HTTP/2 不同类型帧（总共 10 种）的内容太多了，这里就不赘述了感兴趣的童鞋可以参见[《HTTP/2 中的帧定义》](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP%3A2-HTTP-Frames-Definitions.md#http2-中的帧定义)\n\n## HTTP/2的兼容性怎么样？\n\nHTTP/2 最大限度的兼容 HTTP/1.1 原有行为：\n\n1. 在应用层上修改，基于并充分挖掘 TCP 协议性能。\n2. 客户端向服务端发送 request 请求的模型没有变化。\n3. scheme 没有发生变化，没有 http2://\n4. 使用 HTTP/1.X 的客户端和服务器可以无缝的通过代理方式转接到 HTTP/2 上。\n5. 不识别 HTTP/2 的代理服务器可以将请求降级到 HTTP/1.X。\n\n\n\n## HTTP/2有哪些关键特性？\n\n- 头部压缩信息：一些重复信息（如 Cookie/UserAgent/Accept/Server等 ）在 HTTP/1.x中每次都需要传输到服务器。为了减小网络开销、提高传输效率，主要通过2个手段进行优化：\n\n  - 头信息专门的“**HPACK**”算法压缩后再发送\n\n- 客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了\n\n- 基于二进制流的“帧”：在 HTTP/2 中定义了 10 种不同类型的帧\n\n  - 消息是由 HEADER frame + 若干个 DATA frame 组成\n\n- 多路复用：解决了原来的序列和阻塞机制\n\n  - **乱序请求**：HTTP/2 把每个 request 和 response 的数据包称为一个数据流(stream)，每个数据流都有自己全局唯一的编号。每个数据包在传输过程中都需要标记它属于哪个数据流 ID，客户端发出的数据流，ID 一律为奇数，服务器发出的，ID 为偶数。\n\n- **优先级排序**：可以对请求进行优先级排序，使更多重要请求更快地完成，从而进一步提高性能。\n\n- **请求可取消**：数据流在发送中的任意时刻，客户端和服务器都可以发送信号(RST_STREAM 帧)，取消这个数据流。HTTP/1.1 中想要取消数据流的唯一方法，就是关闭 TCP 连接。而 HTTP/2 可以取消某一次请求，同时保证 TCP 连接还打开着，可以被其他请求使用。\n\n- **服务端主动推送**：允许服务器推测性地将数据发送到需要这些数据的客户端，通过牺牲一些网络流量来抵消潜在的延迟。服务器通过合成请求来完成此操作，并将其作为 PUSH_PROMISE 帧发送。然后，服务器能够在单独的流上发送对合成请求的响应。\n\n\n\n## HTTP/2 使用现状如何?\n\n在浏览器中，Edge，Safari，Firefox 和 Chrome 的最新版本都支持 HTTP/2。其他基于 Blink 的浏览器也将支持 HTTP/2（例如 Opera 和 Yandex Browser）。有关更多详细信息，请参见[这里](http://caniuse.com/#feat=http2)。\n\n还有几种可用的服务器（包括 [Akamai](https://http2.akamai.com/)，[Google](https://google.com/) 和 [Twitter](https://twitter.com/) 的主要站点提供的 beta 支持），以及许多可以部署和测试的开源实现。\n\n\n\n## HTTP/3是什么?\n\n请听下回分解Y(^o^)Y\n\n\n\n## 结语\n\nHTTP 协议作是大家日常开发接触最多的网络协议，其不同版本的改进和背后的设计思路值得仔细品读~~\n\n## 文档资料：\n\n- [《HTTP/2基础教程》中文版](https://item.jd.com/25496261693.html)\n- [HTTP/2 简介](https://developers.google.com/web/fundamentals/performance/http2?hl=zh-cn) - [Web Fundamentals](https://developers.google.com/web/fundamentals?hl=zh-cn) \n- [《HTTP 协议》](https://blog.poetries.top/http-protocol/notes/advance/26-HTTP2特性概览.html) \n- [[译\\] HTTP/2 常见问题解答 - 掘金](https://juejin.cn/post/6844903774339727374)\n- [《HTTP/2 中的帧定义》](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP%3A2-HTTP-Frames-Definitions.md#http2-中的帧定义)\n","source":"_posts/关于HTTP-2-的那些事.md","raw":"---\ntitle: 关于HTTP/2 的那些事\ntags:\n  - 网络编程\nabbrlink: http2-overview\ndate: 2022-04-08 22:07:27\ncategories:\n- 开发\n---\n\n## 前言\n\n作为客户端研发童鞋，HTTP 协议想必大家都算比较熟悉了，下面几个简单问题应该可以轻松回答：HTTP 的响应码有哪些？HTTP 301/302分别是做什么的？Cookie 和 Session 是做什么的？哪些请求是“幂等”？...\n\n\n\n但是对于 HTTP/2 往往了解比较少，本文主要基于 HTTP/2协议来回答几个问题：\n\n1. HTTP/1.x有哪些主要问题？\n2. 为什么不用 HTTP/2.0的命名？\n3. HTTP/2是什么？\n4. HTTP/2的兼容性怎么样？\n5. HTTP/2有哪些关键特性？\n6. HTTP/2使用现状如何?\n\n\n\n<!-- more -->\n\n已经清楚答案的童鞋请出门左拐(￣.￣)(￣.￣)\n\n\n\n## HTTP/1.x有哪些主要问题？\n\n\n\n- **header 冗余**\n\nHTTP/1.x 头字段通常是重复且冗长的，而且每次网络请求都需要带上一些重复的信息（e.g cookie、UserAgent等），导致不必要的网络流量以及导致初始TCP拥塞窗口被快速的填满。当在新的 TCP 连接上发出多个请求时，这可能导致过多的延迟。\n\n\n\n- **队头阻塞（head-of-line blocking）**\n\nHTTP/1.0 在给定的 TCP 连接上一次只允许一个请求未完成。HTTP/1.1 添加了请求流水线操作(request pipelining)，但这只是部分地解决了请求并发性，并且仍然受到**队首阻塞**的影响。因此，需要发出许多请求的 HTTP/1.0 和 HTTP/1.1 客户端使用多个连接到服务器以实现并发，从而减少延迟。\n\n## 为什么不用 HTTP/2.0的命名？\n\nHTTP/2 是由 [IETF](http://www.ietf.org/) 的 [HTTP 工作组](https://httpwg.github.io/)开发的，该工作组维护 HTTP 协议。它由许多 HTTP 实现、用户、网络运营商和 HTTP 专家组成。\n\n\n\n他们认为以前的“1.0”“1.1”造成了很多的混乱和误解，让人在实际的使用中难以区分差异，所以就决定 HTTP 协议不再使用小版本号（minor version），只使用大版本号（major version），从今往后 HTTP 协议不会出现 HTTP/2.0、2.1，只会有“HTTP/2”“HTTP/3”……\n\n这样就可以明确无误地辨别出协议版本的“跃进程度”，让协议在一段较长的时期内保持稳定，每当发布新版本的 HTTP 协议都会有本质的不同，绝不会有“零敲碎打”的小改良。\n\n\n\n## HTTP/2是什么？\n\n\n\n早年 Google 的童鞋为了优化 HTTP/1.1 协议，在实验室捣鼓了 SPDY协议，后面与HTTP 工作组一起合作参与了 HTTP/2的协议制定，下面是关于 HTTP/2的一些关键时间点：\n\n- 2012 年 3 月: 征集 HTTP/2 建议\n\n- 2012 年 11 月: 第一个 HTTP/2 草案（基于 SPDY）\n\n- 2014 年 8 月: HTTP/2 草案 17 和 HPACK 草案 12 发布\n\n- 2014 年 8 月: 工作组最后一次征集 HTTP/2 建议\n\n- 2015 年 2 月: IESG 批准 HTTP/2 和 HPACK 草案\n\n- 2015 年 5 月: RFC 7540 (HTTP/2) 和 RFC 7541 (HPACK) 发布\n\n\n\n这里主要介绍HTTP/2的几个重点内容：scheme& 端口号、建连过程和协议格式。\n\n\n\n- scheme&端口号\n\nHTTP/2 使用 HTTP/1.1 使用的相同 \"http\" 和 \"https\" URI scheme，HTTP/2 共享相同的默认端口号: \"http\" URI 为 80，\"https\" URI 为 443。\n\n\n\n- 建连过程\n\nHTTP/2 的初始请求是通过 HTTP/1.1的请求来进行升级的，这样如果服务器不支持 HTTP/2就可以继续使用 HTTP/1.1来进行通信（这个和 WebSocket 建连过程类似）\n\n\n\n```HTTP\nGET / HTTP/1.1\n\nHost: server.example.com\n\nConnection: Upgrade, HTTP2-Settings\n\nUpgrade: h2c\n\nHTTP2-Settings: <base64url encoding of HTTP/2 SETTINGS payload>\n```\n\n\n\n如何服务器不支持 HTTP/2，则返回 HTTP/1.1的响应:\n\n```HTTP\nHTTP/1.1 200 OK\n\nContent-Length: 243\n\nContent-Type: text/html\n\n\n\n...\n```\n\n\n\n如何服务器支持 HTTP/2，则通过 101(交换协议)响应接受升级:\n\n```HTTP\nHTTP/1.1 101 Switching Protocols\n\nConnection: Upgrade\n\nUpgrade: h2c\n\n\n\n[ HTTP/2 connection ...\n```\n\n\n\n- 协议格式\n\n在 HTTP/1.1 中，头信息是文本编码(ASCII编码)，数据包体可以是二进制也可以是文本。\n\n\n\n和 HTTP/1.x最大的区别：HTTP/2 是一个彻彻底底的**二进制协议，头信息和数据包体都是二进制的，统称为“帧”**。使用二进制作为协议实现方式的好处，更加灵活。\n\n\n\n在 HTTP/1.1 中的一个消息是由 Start Line + header + body 组成的，而 HTTP/2 中一个消息是由 **HEADER frame** + 若干个 **DATA frame** 组成的，如下图：\n\n{% asset_img HTTP2-overview.png %}\n\n\n\n关于 HTTP/2 不同类型帧（总共 10 种）的内容太多了，这里就不赘述了感兴趣的童鞋可以参见[《HTTP/2 中的帧定义》](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP%3A2-HTTP-Frames-Definitions.md#http2-中的帧定义)\n\n## HTTP/2的兼容性怎么样？\n\nHTTP/2 最大限度的兼容 HTTP/1.1 原有行为：\n\n1. 在应用层上修改，基于并充分挖掘 TCP 协议性能。\n2. 客户端向服务端发送 request 请求的模型没有变化。\n3. scheme 没有发生变化，没有 http2://\n4. 使用 HTTP/1.X 的客户端和服务器可以无缝的通过代理方式转接到 HTTP/2 上。\n5. 不识别 HTTP/2 的代理服务器可以将请求降级到 HTTP/1.X。\n\n\n\n## HTTP/2有哪些关键特性？\n\n- 头部压缩信息：一些重复信息（如 Cookie/UserAgent/Accept/Server等 ）在 HTTP/1.x中每次都需要传输到服务器。为了减小网络开销、提高传输效率，主要通过2个手段进行优化：\n\n  - 头信息专门的“**HPACK**”算法压缩后再发送\n\n- 客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了\n\n- 基于二进制流的“帧”：在 HTTP/2 中定义了 10 种不同类型的帧\n\n  - 消息是由 HEADER frame + 若干个 DATA frame 组成\n\n- 多路复用：解决了原来的序列和阻塞机制\n\n  - **乱序请求**：HTTP/2 把每个 request 和 response 的数据包称为一个数据流(stream)，每个数据流都有自己全局唯一的编号。每个数据包在传输过程中都需要标记它属于哪个数据流 ID，客户端发出的数据流，ID 一律为奇数，服务器发出的，ID 为偶数。\n\n- **优先级排序**：可以对请求进行优先级排序，使更多重要请求更快地完成，从而进一步提高性能。\n\n- **请求可取消**：数据流在发送中的任意时刻，客户端和服务器都可以发送信号(RST_STREAM 帧)，取消这个数据流。HTTP/1.1 中想要取消数据流的唯一方法，就是关闭 TCP 连接。而 HTTP/2 可以取消某一次请求，同时保证 TCP 连接还打开着，可以被其他请求使用。\n\n- **服务端主动推送**：允许服务器推测性地将数据发送到需要这些数据的客户端，通过牺牲一些网络流量来抵消潜在的延迟。服务器通过合成请求来完成此操作，并将其作为 PUSH_PROMISE 帧发送。然后，服务器能够在单独的流上发送对合成请求的响应。\n\n\n\n## HTTP/2 使用现状如何?\n\n在浏览器中，Edge，Safari，Firefox 和 Chrome 的最新版本都支持 HTTP/2。其他基于 Blink 的浏览器也将支持 HTTP/2（例如 Opera 和 Yandex Browser）。有关更多详细信息，请参见[这里](http://caniuse.com/#feat=http2)。\n\n还有几种可用的服务器（包括 [Akamai](https://http2.akamai.com/)，[Google](https://google.com/) 和 [Twitter](https://twitter.com/) 的主要站点提供的 beta 支持），以及许多可以部署和测试的开源实现。\n\n\n\n## HTTP/3是什么?\n\n请听下回分解Y(^o^)Y\n\n\n\n## 结语\n\nHTTP 协议作是大家日常开发接触最多的网络协议，其不同版本的改进和背后的设计思路值得仔细品读~~\n\n## 文档资料：\n\n- [《HTTP/2基础教程》中文版](https://item.jd.com/25496261693.html)\n- [HTTP/2 简介](https://developers.google.com/web/fundamentals/performance/http2?hl=zh-cn) - [Web Fundamentals](https://developers.google.com/web/fundamentals?hl=zh-cn) \n- [《HTTP 协议》](https://blog.poetries.top/http-protocol/notes/advance/26-HTTP2特性概览.html) \n- [[译\\] HTTP/2 常见问题解答 - 掘金](https://juejin.cn/post/6844903774339727374)\n- [《HTTP/2 中的帧定义》](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP%3A2-HTTP-Frames-Definitions.md#http2-中的帧定义)\n","slug":"关于HTTP-2-的那些事","published":1,"updated":"2022-04-08T14:16:07.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6hf968n0011x6u0dyun28m0","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>作为客户端研发童鞋，HTTP 协议想必大家都算比较熟悉了，下面几个简单问题应该可以轻松回答：HTTP 的响应码有哪些？HTTP 301&#x2F;302分别是做什么的？Cookie 和 Session 是做什么的？哪些请求是“幂等”？…</p>\n<p>但是对于 HTTP&#x2F;2 往往了解比较少，本文主要基于 HTTP&#x2F;2协议来回答几个问题：</p>\n<ol>\n<li>HTTP&#x2F;1.x有哪些主要问题？</li>\n<li>为什么不用 HTTP&#x2F;2.0的命名？</li>\n<li>HTTP&#x2F;2是什么？</li>\n<li>HTTP&#x2F;2的兼容性怎么样？</li>\n<li>HTTP&#x2F;2有哪些关键特性？</li>\n<li>HTTP&#x2F;2使用现状如何?</li>\n</ol>\n<span id=\"more\"></span>\n\n<p>已经清楚答案的童鞋请出门左拐(￣.￣)(￣.￣)</p>\n<h2 id=\"HTTP-x2F-1-x有哪些主要问题？\"><a href=\"#HTTP-x2F-1-x有哪些主要问题？\" class=\"headerlink\" title=\"HTTP&#x2F;1.x有哪些主要问题？\"></a>HTTP&#x2F;1.x有哪些主要问题？</h2><ul>\n<li><strong>header 冗余</strong></li>\n</ul>\n<p>HTTP&#x2F;1.x 头字段通常是重复且冗长的，而且每次网络请求都需要带上一些重复的信息（e.g cookie、UserAgent等），导致不必要的网络流量以及导致初始TCP拥塞窗口被快速的填满。当在新的 TCP 连接上发出多个请求时，这可能导致过多的延迟。</p>\n<ul>\n<li><strong>队头阻塞（head-of-line blocking）</strong></li>\n</ul>\n<p>HTTP&#x2F;1.0 在给定的 TCP 连接上一次只允许一个请求未完成。HTTP&#x2F;1.1 添加了请求流水线操作(request pipelining)，但这只是部分地解决了请求并发性，并且仍然受到<strong>队首阻塞</strong>的影响。因此，需要发出许多请求的 HTTP&#x2F;1.0 和 HTTP&#x2F;1.1 客户端使用多个连接到服务器以实现并发，从而减少延迟。</p>\n<h2 id=\"为什么不用-HTTP-x2F-2-0的命名？\"><a href=\"#为什么不用-HTTP-x2F-2-0的命名？\" class=\"headerlink\" title=\"为什么不用 HTTP&#x2F;2.0的命名？\"></a>为什么不用 HTTP&#x2F;2.0的命名？</h2><p>HTTP&#x2F;2 是由 <a href=\"http://www.ietf.org/\">IETF</a> 的 <a href=\"https://httpwg.github.io/\">HTTP 工作组</a>开发的，该工作组维护 HTTP 协议。它由许多 HTTP 实现、用户、网络运营商和 HTTP 专家组成。</p>\n<p>他们认为以前的“1.0”“1.1”造成了很多的混乱和误解，让人在实际的使用中难以区分差异，所以就决定 HTTP 协议不再使用小版本号（minor version），只使用大版本号（major version），从今往后 HTTP 协议不会出现 HTTP&#x2F;2.0、2.1，只会有“HTTP&#x2F;2”“HTTP&#x2F;3”……</p>\n<p>这样就可以明确无误地辨别出协议版本的“跃进程度”，让协议在一段较长的时期内保持稳定，每当发布新版本的 HTTP 协议都会有本质的不同，绝不会有“零敲碎打”的小改良。</p>\n<h2 id=\"HTTP-x2F-2是什么？\"><a href=\"#HTTP-x2F-2是什么？\" class=\"headerlink\" title=\"HTTP&#x2F;2是什么？\"></a>HTTP&#x2F;2是什么？</h2><p>早年 Google 的童鞋为了优化 HTTP&#x2F;1.1 协议，在实验室捣鼓了 SPDY协议，后面与HTTP 工作组一起合作参与了 HTTP&#x2F;2的协议制定，下面是关于 HTTP&#x2F;2的一些关键时间点：</p>\n<ul>\n<li><p>2012 年 3 月: 征集 HTTP&#x2F;2 建议</p>\n</li>\n<li><p>2012 年 11 月: 第一个 HTTP&#x2F;2 草案（基于 SPDY）</p>\n</li>\n<li><p>2014 年 8 月: HTTP&#x2F;2 草案 17 和 HPACK 草案 12 发布</p>\n</li>\n<li><p>2014 年 8 月: 工作组最后一次征集 HTTP&#x2F;2 建议</p>\n</li>\n<li><p>2015 年 2 月: IESG 批准 HTTP&#x2F;2 和 HPACK 草案</p>\n</li>\n<li><p>2015 年 5 月: RFC 7540 (HTTP&#x2F;2) 和 RFC 7541 (HPACK) 发布</p>\n</li>\n</ul>\n<p>这里主要介绍HTTP&#x2F;2的几个重点内容：scheme&amp; 端口号、建连过程和协议格式。</p>\n<ul>\n<li>scheme&amp;端口号</li>\n</ul>\n<p>HTTP&#x2F;2 使用 HTTP&#x2F;1.1 使用的相同 “http” 和 “https” URI scheme，HTTP&#x2F;2 共享相同的默认端口号: “http” URI 为 80，”https” URI 为 443。</p>\n<ul>\n<li>建连过程</li>\n</ul>\n<p>HTTP&#x2F;2 的初始请求是通过 HTTP&#x2F;1.1的请求来进行升级的，这样如果服务器不支持 HTTP&#x2F;2就可以继续使用 HTTP&#x2F;1.1来进行通信（这个和 WebSocket 建连过程类似）</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-http\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>server.example.com</span></span><br><span class=\"line\"><span class=\"language-http\"></span></span><br><span class=\"line\"><span class=\"language-http\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>Upgrade, HTTP2-Settings</span></span><br><span class=\"line\"><span class=\"language-http\"></span></span><br><span class=\"line\"><span class=\"language-http\"><span class=\"attribute\">Upgrade</span><span class=\"punctuation\">: </span>h2c</span></span><br><span class=\"line\"><span class=\"language-http\"></span></span><br><span class=\"line\"><span class=\"language-http\"><span class=\"attribute\">HTTP2-Settings</span><span class=\"punctuation\">: </span>&lt;base64url encoding of HTTP/2 SETTINGS payload&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如何服务器不支持 HTTP&#x2F;2，则返回 HTTP&#x2F;1.1的响应:</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-arcade\">Content-<span class=\"built_in\">Length</span>: <span class=\"number\">243</span></span></span><br><span class=\"line\"><span class=\"language-arcade\"></span></span><br><span class=\"line\"><span class=\"language-arcade\">Content-Type: <span class=\"built_in\">text</span>/html</span></span><br><span class=\"line\"><span class=\"language-arcade\"></span></span><br><span class=\"line\"><span class=\"language-arcade\"></span></span><br><span class=\"line\"><span class=\"language-arcade\"></span></span><br><span class=\"line\"><span class=\"language-arcade\">...</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如何服务器支持 HTTP&#x2F;2，则通过 101(交换协议)响应接受升级:</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">101</span> Switching Protocols</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-avrasm\"><span class=\"symbol\">Connection:</span> Upgrade</span></span><br><span class=\"line\"><span class=\"language-avrasm\"></span></span><br><span class=\"line\"><span class=\"language-avrasm\"><span class=\"symbol\">Upgrade:</span> h2c</span></span><br><span class=\"line\"><span class=\"language-avrasm\"></span></span><br><span class=\"line\"><span class=\"language-avrasm\"></span></span><br><span class=\"line\"><span class=\"language-avrasm\"></span></span><br><span class=\"line\"><span class=\"language-avrasm\">[ HTTP/<span class=\"number\">2</span> connection ...</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>协议格式</li>\n</ul>\n<p>在 HTTP&#x2F;1.1 中，头信息是文本编码(ASCII编码)，数据包体可以是二进制也可以是文本。</p>\n<p>和 HTTP&#x2F;1.x最大的区别：HTTP&#x2F;2 是一个彻彻底底的<strong>二进制协议，头信息和数据包体都是二进制的，统称为“帧”</strong>。使用二进制作为协议实现方式的好处，更加灵活。</p>\n<p>在 HTTP&#x2F;1.1 中的一个消息是由 Start Line + header + body 组成的，而 HTTP&#x2F;2 中一个消息是由 <strong>HEADER frame</strong> + 若干个 <strong>DATA frame</strong> 组成的，如下图：</p>\n<img src=\"/posts/http2-overview/HTTP2-overview.png\" class=\"\">\n\n\n\n<p>关于 HTTP&#x2F;2 不同类型帧（总共 10 种）的内容太多了，这里就不赘述了感兴趣的童鞋可以参见<a href=\"https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP%3A2-HTTP-Frames-Definitions.md#http2-%E4%B8%AD%E7%9A%84%E5%B8%A7%E5%AE%9A%E4%B9%89\">《HTTP&#x2F;2 中的帧定义》</a></p>\n<h2 id=\"HTTP-x2F-2的兼容性怎么样？\"><a href=\"#HTTP-x2F-2的兼容性怎么样？\" class=\"headerlink\" title=\"HTTP&#x2F;2的兼容性怎么样？\"></a>HTTP&#x2F;2的兼容性怎么样？</h2><p>HTTP&#x2F;2 最大限度的兼容 HTTP&#x2F;1.1 原有行为：</p>\n<ol>\n<li>在应用层上修改，基于并充分挖掘 TCP 协议性能。</li>\n<li>客户端向服务端发送 request 请求的模型没有变化。</li>\n<li>scheme 没有发生变化，没有 http2:&#x2F;&#x2F;</li>\n<li>使用 HTTP&#x2F;1.X 的客户端和服务器可以无缝的通过代理方式转接到 HTTP&#x2F;2 上。</li>\n<li>不识别 HTTP&#x2F;2 的代理服务器可以将请求降级到 HTTP&#x2F;1.X。</li>\n</ol>\n<h2 id=\"HTTP-x2F-2有哪些关键特性？\"><a href=\"#HTTP-x2F-2有哪些关键特性？\" class=\"headerlink\" title=\"HTTP&#x2F;2有哪些关键特性？\"></a>HTTP&#x2F;2有哪些关键特性？</h2><ul>\n<li><p>头部压缩信息：一些重复信息（如 Cookie&#x2F;UserAgent&#x2F;Accept&#x2F;Server等 ）在 HTTP&#x2F;1.x中每次都需要传输到服务器。为了减小网络开销、提高传输效率，主要通过2个手段进行优化：</p>\n<ul>\n<li>头信息专门的“<strong>HPACK</strong>”算法压缩后再发送</li>\n</ul>\n</li>\n<li><p>客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了</p>\n</li>\n<li><p>基于二进制流的“帧”：在 HTTP&#x2F;2 中定义了 10 种不同类型的帧</p>\n<ul>\n<li>消息是由 HEADER frame + 若干个 DATA frame 组成</li>\n</ul>\n</li>\n<li><p>多路复用：解决了原来的序列和阻塞机制</p>\n<ul>\n<li><strong>乱序请求</strong>：HTTP&#x2F;2 把每个 request 和 response 的数据包称为一个数据流(stream)，每个数据流都有自己全局唯一的编号。每个数据包在传输过程中都需要标记它属于哪个数据流 ID，客户端发出的数据流，ID 一律为奇数，服务器发出的，ID 为偶数。</li>\n</ul>\n</li>\n<li><p><strong>优先级排序</strong>：可以对请求进行优先级排序，使更多重要请求更快地完成，从而进一步提高性能。</p>\n</li>\n<li><p><strong>请求可取消</strong>：数据流在发送中的任意时刻，客户端和服务器都可以发送信号(RST_STREAM 帧)，取消这个数据流。HTTP&#x2F;1.1 中想要取消数据流的唯一方法，就是关闭 TCP 连接。而 HTTP&#x2F;2 可以取消某一次请求，同时保证 TCP 连接还打开着，可以被其他请求使用。</p>\n</li>\n<li><p><strong>服务端主动推送</strong>：允许服务器推测性地将数据发送到需要这些数据的客户端，通过牺牲一些网络流量来抵消潜在的延迟。服务器通过合成请求来完成此操作，并将其作为 PUSH_PROMISE 帧发送。然后，服务器能够在单独的流上发送对合成请求的响应。</p>\n</li>\n</ul>\n<h2 id=\"HTTP-x2F-2-使用现状如何\"><a href=\"#HTTP-x2F-2-使用现状如何\" class=\"headerlink\" title=\"HTTP&#x2F;2 使用现状如何?\"></a>HTTP&#x2F;2 使用现状如何?</h2><p>在浏览器中，Edge，Safari，Firefox 和 Chrome 的最新版本都支持 HTTP&#x2F;2。其他基于 Blink 的浏览器也将支持 HTTP&#x2F;2（例如 Opera 和 Yandex Browser）。有关更多详细信息，请参见<a href=\"http://caniuse.com/#feat=http2\">这里</a>。</p>\n<p>还有几种可用的服务器（包括 <a href=\"https://http2.akamai.com/\">Akamai</a>，<a href=\"https://google.com/\">Google</a> 和 <a href=\"https://twitter.com/\">Twitter</a> 的主要站点提供的 beta 支持），以及许多可以部署和测试的开源实现。</p>\n<h2 id=\"HTTP-x2F-3是什么\"><a href=\"#HTTP-x2F-3是什么\" class=\"headerlink\" title=\"HTTP&#x2F;3是什么?\"></a>HTTP&#x2F;3是什么?</h2><p>请听下回分解Y(^o^)Y</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>HTTP 协议作是大家日常开发接触最多的网络协议，其不同版本的改进和背后的设计思路值得仔细品读~~</p>\n<h2 id=\"文档资料：\"><a href=\"#文档资料：\" class=\"headerlink\" title=\"文档资料：\"></a>文档资料：</h2><ul>\n<li><a href=\"https://item.jd.com/25496261693.html\">《HTTP&#x2F;2基础教程》中文版</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/http2?hl=zh-cn\">HTTP&#x2F;2 简介</a> - <a href=\"https://developers.google.com/web/fundamentals?hl=zh-cn\">Web Fundamentals</a> </li>\n<li><a href=\"https://blog.poetries.top/http-protocol/notes/advance/26-HTTP2%E7%89%B9%E6%80%A7%E6%A6%82%E8%A7%88.html\">《HTTP 协议》</a> </li>\n<li>[<a href=\"https://juejin.cn/post/6844903774339727374\">译] HTTP&#x2F;2 常见问题解答 - 掘金</a></li>\n<li><a href=\"https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP%3A2-HTTP-Frames-Definitions.md#http2-%E4%B8%AD%E7%9A%84%E5%B8%A7%E5%AE%9A%E4%B9%89\">《HTTP&#x2F;2 中的帧定义》</a></li>\n</ul>\n","site":{"data":{"hexo-leancloud-counter-security-fix":"/* global hexo */\n\n'use strict';\n\nconst AV = require('leancloud-storage');\nconst readlineSync = require('readline-sync');\nconst packageInfo = require('./package.json');\nconst pathFn = require('path');\nconst fs = require('fs');\n\nfunction generate_post_list(locals) {\n    let { config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    var urlsPath = 'leancloud_counter_security_urls.json';\n    var urls = [...locals.posts.toArray()]\n        .filter(x => x.published)\n        .map(x => {\n            return {\n                title: x.title,\n                url  : config.root + x.path\n            };\n        });\n    return {\n        path: urlsPath,\n        data: JSON.stringify(urls)\n    };\n}\n\nhexo.extend.generator.register('leancloud_counter_security_generator', generate_post_list);\n\nfunction cmp(x, y) {\n    if (x.url < y.url) {\n        return -1;\n    } else if (x.url === y.url) {\n        return 0;\n    }\n    return 1;\n}\n\nfunction postOperation(env, cnt, limit, newData, memoData, log) {\n    if (cnt !== limit) return;\n\n    newData.sort(cmp);\n    var sourceDir = env.source_dir;\n    var publicDir = env.public_dir;\n    var memoFile = pathFn.join(sourceDir, 'leancloud.memo');\n    fs.writeFileSync(memoFile, '[\\n');\n\n    var memoIdx = 1;\n    for (var i = 0; newData[i]; i++) {\n        while (memoData[memoIdx] !== ']') {\n            var y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > newData[i].url) break;\n\n            fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n            memoIdx++;\n        }\n        fs.writeFileSync(memoFile, '{\"title\":\"' + newData[i].title + '\",\"url\":\"' + newData[i].url + '\"},\\n', { flag: 'a' });\n    }\n    while (memoData[memoIdx] !== ']') {\n        fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n        memoIdx++;\n    }\n    fs.writeFileSync(memoFile, memoData[memoIdx], { flag: 'a' });\n\n    var srcFile = pathFn.join(sourceDir, 'leancloud.memo');\n    var destFile = pathFn.join(publicDir, 'leancloud.memo');\n    var readStream = fs.createReadStream(srcFile);\n    var writeStream = fs.createWriteStream(destFile);\n    readStream.pipe(writeStream);\n    log.info('leancloud.memo successfully updated.');\n}\n\nasync function sync() {\n    let { log, config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    let { app_id, app_key, server_url } = config.leancloud_counter_security;\n    var publicDir = this.public_dir;\n    var UrlsFile = pathFn.join(publicDir, 'leancloud_counter_security_urls.json');\n    var urls = JSON.parse(fs.readFileSync(UrlsFile, 'utf8'));\n\n    AV.init({\n        appId    : app_id,\n        appKey   : app_key,\n        serverURL: server_url\n    });\n\n    var currentUser = AV.User.current();\n    if (!currentUser) {\n        var userName = config.leancloud_counter_security.username;\n        var passWord = config.leancloud_counter_security.password;\n        if (!userName) {\n            userName = readlineSync.question('Enter your username: ');\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        } else if (!passWord) {\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        }\n        await AV.User.logIn(userName, passWord).then(loginedUser => {\n            log.info('Logined as: ' + loginedUser.getUsername());\n        }, error => {\n            log.error(error);\n        });\n    }\n\n    log.info('Now syncing your posts list to leancloud counter...');\n    var Counter = AV.Object.extend('Counter');\n    var memoFile = pathFn.join(publicDir, 'leancloud.memo');\n    if (!fs.existsSync(memoFile)) {\n        fs.writeFileSync(memoFile, '[\\n]');\n    }\n    var memoData = fs.readFileSync(memoFile, 'utf-8').split('\\n');\n    var memoIdx = 1;\n    var newData = [];\n    var cnt = 0;\n    var limit = 0;\n    var env = this;\n    urls.sort(cmp).forEach(x => {\n        var y = {};\n        y.title = '';\n        y.url = '';\n        var flag = false;\n        while (memoData[memoIdx] !== ']') {\n            y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > x.url) break;\n            if (y.url === x.url && y.title === x.title) {\n                flag = true;\n                break;\n            }\n            memoIdx++;\n        }\n        if (flag) return;\n\n        log.info('Dealing with record of ' + x.title);\n        limit++;\n        var query = new AV.Query('Counter');\n        query.equalTo('url', x.url);\n        query.count().then(count => {\n            if (count === 0) {\n                var counter = new Counter();\n                counter.set('url', x.url);\n                counter.set('title', x.title);\n                counter.set('time', 0);\n                counter.save().then(obj => {\n                    log.info(x.title + ' is saved as: ' + obj.id);\n                    newData.push(x);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                }, error => {\n                    log.error(error);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                });\n            } else {\n                newData.push(x);\n                cnt++;\n                postOperation(env, cnt, limit, newData, memoData, log);\n            }\n        }, error => {\n            log.error(error);\n            cnt++;\n            postOperation(env, cnt, limit, newData, memoData, log);\n        });\n    });\n}\n\nhexo.extend.deployer.register('leancloud_counter_security_sync', sync);\n\nvar commandOptions = {\n    desc     : packageInfo.description,\n    usage    : ' <argument>',\n    arguments: [\n        {\n            name: 'register | r <username> <password>',\n            desc: 'Register a new user.'\n        }\n    ]\n};\n\nfunction commandFunc(args) {\n    let { log, config } = this;\n\n    if (args._.length !== 3) {\n        log.error('Too Few or Many Arguments.');\n    } else if (args._[0] === 'register' || args._[0] === 'r') {\n        let { app_id, app_key, server_url } = config.leancloud_counter_security;\n        AV.init({\n            appId    : app_id,\n            appKey   : app_key,\n            serverURL: server_url\n        });\n\n        var user = new AV.User();\n        user.setUsername(String(args._[1]));\n        user.setPassword(String(args._[2]));\n        user.signUp().then(loginedUser => {\n            log.info(loginedUser.getUsername() + ' is successfully signed up');\n        }, error => {\n            log.error(error);\n        });\n    } else {\n        log.error('Unknown Command.');\n    }\n}\n\nhexo.extend.console.register('lc-counter', 'hexo-leancloud-counter-security', commandOptions, commandFunc);\n"}},"length":3631,"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>作为客户端研发童鞋，HTTP 协议想必大家都算比较熟悉了，下面几个简单问题应该可以轻松回答：HTTP 的响应码有哪些？HTTP 301&#x2F;302分别是做什么的？Cookie 和 Session 是做什么的？哪些请求是“幂等”？…</p>\n<p>但是对于 HTTP&#x2F;2 往往了解比较少，本文主要基于 HTTP&#x2F;2协议来回答几个问题：</p>\n<ol>\n<li>HTTP&#x2F;1.x有哪些主要问题？</li>\n<li>为什么不用 HTTP&#x2F;2.0的命名？</li>\n<li>HTTP&#x2F;2是什么？</li>\n<li>HTTP&#x2F;2的兼容性怎么样？</li>\n<li>HTTP&#x2F;2有哪些关键特性？</li>\n<li>HTTP&#x2F;2使用现状如何?</li>\n</ol>","more":"<p>已经清楚答案的童鞋请出门左拐(￣.￣)(￣.￣)</p>\n<h2 id=\"HTTP-x2F-1-x有哪些主要问题？\"><a href=\"#HTTP-x2F-1-x有哪些主要问题？\" class=\"headerlink\" title=\"HTTP&#x2F;1.x有哪些主要问题？\"></a>HTTP&#x2F;1.x有哪些主要问题？</h2><ul>\n<li><strong>header 冗余</strong></li>\n</ul>\n<p>HTTP&#x2F;1.x 头字段通常是重复且冗长的，而且每次网络请求都需要带上一些重复的信息（e.g cookie、UserAgent等），导致不必要的网络流量以及导致初始TCP拥塞窗口被快速的填满。当在新的 TCP 连接上发出多个请求时，这可能导致过多的延迟。</p>\n<ul>\n<li><strong>队头阻塞（head-of-line blocking）</strong></li>\n</ul>\n<p>HTTP&#x2F;1.0 在给定的 TCP 连接上一次只允许一个请求未完成。HTTP&#x2F;1.1 添加了请求流水线操作(request pipelining)，但这只是部分地解决了请求并发性，并且仍然受到<strong>队首阻塞</strong>的影响。因此，需要发出许多请求的 HTTP&#x2F;1.0 和 HTTP&#x2F;1.1 客户端使用多个连接到服务器以实现并发，从而减少延迟。</p>\n<h2 id=\"为什么不用-HTTP-x2F-2-0的命名？\"><a href=\"#为什么不用-HTTP-x2F-2-0的命名？\" class=\"headerlink\" title=\"为什么不用 HTTP&#x2F;2.0的命名？\"></a>为什么不用 HTTP&#x2F;2.0的命名？</h2><p>HTTP&#x2F;2 是由 <a href=\"http://www.ietf.org/\">IETF</a> 的 <a href=\"https://httpwg.github.io/\">HTTP 工作组</a>开发的，该工作组维护 HTTP 协议。它由许多 HTTP 实现、用户、网络运营商和 HTTP 专家组成。</p>\n<p>他们认为以前的“1.0”“1.1”造成了很多的混乱和误解，让人在实际的使用中难以区分差异，所以就决定 HTTP 协议不再使用小版本号（minor version），只使用大版本号（major version），从今往后 HTTP 协议不会出现 HTTP&#x2F;2.0、2.1，只会有“HTTP&#x2F;2”“HTTP&#x2F;3”……</p>\n<p>这样就可以明确无误地辨别出协议版本的“跃进程度”，让协议在一段较长的时期内保持稳定，每当发布新版本的 HTTP 协议都会有本质的不同，绝不会有“零敲碎打”的小改良。</p>\n<h2 id=\"HTTP-x2F-2是什么？\"><a href=\"#HTTP-x2F-2是什么？\" class=\"headerlink\" title=\"HTTP&#x2F;2是什么？\"></a>HTTP&#x2F;2是什么？</h2><p>早年 Google 的童鞋为了优化 HTTP&#x2F;1.1 协议，在实验室捣鼓了 SPDY协议，后面与HTTP 工作组一起合作参与了 HTTP&#x2F;2的协议制定，下面是关于 HTTP&#x2F;2的一些关键时间点：</p>\n<ul>\n<li><p>2012 年 3 月: 征集 HTTP&#x2F;2 建议</p>\n</li>\n<li><p>2012 年 11 月: 第一个 HTTP&#x2F;2 草案（基于 SPDY）</p>\n</li>\n<li><p>2014 年 8 月: HTTP&#x2F;2 草案 17 和 HPACK 草案 12 发布</p>\n</li>\n<li><p>2014 年 8 月: 工作组最后一次征集 HTTP&#x2F;2 建议</p>\n</li>\n<li><p>2015 年 2 月: IESG 批准 HTTP&#x2F;2 和 HPACK 草案</p>\n</li>\n<li><p>2015 年 5 月: RFC 7540 (HTTP&#x2F;2) 和 RFC 7541 (HPACK) 发布</p>\n</li>\n</ul>\n<p>这里主要介绍HTTP&#x2F;2的几个重点内容：scheme&amp; 端口号、建连过程和协议格式。</p>\n<ul>\n<li>scheme&amp;端口号</li>\n</ul>\n<p>HTTP&#x2F;2 使用 HTTP&#x2F;1.1 使用的相同 “http” 和 “https” URI scheme，HTTP&#x2F;2 共享相同的默认端口号: “http” URI 为 80，”https” URI 为 443。</p>\n<ul>\n<li>建连过程</li>\n</ul>\n<p>HTTP&#x2F;2 的初始请求是通过 HTTP&#x2F;1.1的请求来进行升级的，这样如果服务器不支持 HTTP&#x2F;2就可以继续使用 HTTP&#x2F;1.1来进行通信（这个和 WebSocket 建连过程类似）</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-http\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>server.example.com</span></span><br><span class=\"line\"><span class=\"language-http\"></span></span><br><span class=\"line\"><span class=\"language-http\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>Upgrade, HTTP2-Settings</span></span><br><span class=\"line\"><span class=\"language-http\"></span></span><br><span class=\"line\"><span class=\"language-http\"><span class=\"attribute\">Upgrade</span><span class=\"punctuation\">: </span>h2c</span></span><br><span class=\"line\"><span class=\"language-http\"></span></span><br><span class=\"line\"><span class=\"language-http\"><span class=\"attribute\">HTTP2-Settings</span><span class=\"punctuation\">: </span>&lt;base64url encoding of HTTP/2 SETTINGS payload&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如何服务器不支持 HTTP&#x2F;2，则返回 HTTP&#x2F;1.1的响应:</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-arcade\">Content-<span class=\"built_in\">Length</span>: <span class=\"number\">243</span></span></span><br><span class=\"line\"><span class=\"language-arcade\"></span></span><br><span class=\"line\"><span class=\"language-arcade\">Content-Type: <span class=\"built_in\">text</span>/html</span></span><br><span class=\"line\"><span class=\"language-arcade\"></span></span><br><span class=\"line\"><span class=\"language-arcade\"></span></span><br><span class=\"line\"><span class=\"language-arcade\"></span></span><br><span class=\"line\"><span class=\"language-arcade\">...</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如何服务器支持 HTTP&#x2F;2，则通过 101(交换协议)响应接受升级:</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">101</span> Switching Protocols</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-avrasm\"><span class=\"symbol\">Connection:</span> Upgrade</span></span><br><span class=\"line\"><span class=\"language-avrasm\"></span></span><br><span class=\"line\"><span class=\"language-avrasm\"><span class=\"symbol\">Upgrade:</span> h2c</span></span><br><span class=\"line\"><span class=\"language-avrasm\"></span></span><br><span class=\"line\"><span class=\"language-avrasm\"></span></span><br><span class=\"line\"><span class=\"language-avrasm\"></span></span><br><span class=\"line\"><span class=\"language-avrasm\">[ HTTP/<span class=\"number\">2</span> connection ...</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>协议格式</li>\n</ul>\n<p>在 HTTP&#x2F;1.1 中，头信息是文本编码(ASCII编码)，数据包体可以是二进制也可以是文本。</p>\n<p>和 HTTP&#x2F;1.x最大的区别：HTTP&#x2F;2 是一个彻彻底底的<strong>二进制协议，头信息和数据包体都是二进制的，统称为“帧”</strong>。使用二进制作为协议实现方式的好处，更加灵活。</p>\n<p>在 HTTP&#x2F;1.1 中的一个消息是由 Start Line + header + body 组成的，而 HTTP&#x2F;2 中一个消息是由 <strong>HEADER frame</strong> + 若干个 <strong>DATA frame</strong> 组成的，如下图：</p>\n<img src=\"/posts/http2-overview/HTTP2-overview.png\" class=\"\">\n\n\n\n<p>关于 HTTP&#x2F;2 不同类型帧（总共 10 种）的内容太多了，这里就不赘述了感兴趣的童鞋可以参见<a href=\"https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP%3A2-HTTP-Frames-Definitions.md#http2-%E4%B8%AD%E7%9A%84%E5%B8%A7%E5%AE%9A%E4%B9%89\">《HTTP&#x2F;2 中的帧定义》</a></p>\n<h2 id=\"HTTP-x2F-2的兼容性怎么样？\"><a href=\"#HTTP-x2F-2的兼容性怎么样？\" class=\"headerlink\" title=\"HTTP&#x2F;2的兼容性怎么样？\"></a>HTTP&#x2F;2的兼容性怎么样？</h2><p>HTTP&#x2F;2 最大限度的兼容 HTTP&#x2F;1.1 原有行为：</p>\n<ol>\n<li>在应用层上修改，基于并充分挖掘 TCP 协议性能。</li>\n<li>客户端向服务端发送 request 请求的模型没有变化。</li>\n<li>scheme 没有发生变化，没有 http2:&#x2F;&#x2F;</li>\n<li>使用 HTTP&#x2F;1.X 的客户端和服务器可以无缝的通过代理方式转接到 HTTP&#x2F;2 上。</li>\n<li>不识别 HTTP&#x2F;2 的代理服务器可以将请求降级到 HTTP&#x2F;1.X。</li>\n</ol>\n<h2 id=\"HTTP-x2F-2有哪些关键特性？\"><a href=\"#HTTP-x2F-2有哪些关键特性？\" class=\"headerlink\" title=\"HTTP&#x2F;2有哪些关键特性？\"></a>HTTP&#x2F;2有哪些关键特性？</h2><ul>\n<li><p>头部压缩信息：一些重复信息（如 Cookie&#x2F;UserAgent&#x2F;Accept&#x2F;Server等 ）在 HTTP&#x2F;1.x中每次都需要传输到服务器。为了减小网络开销、提高传输效率，主要通过2个手段进行优化：</p>\n<ul>\n<li>头信息专门的“<strong>HPACK</strong>”算法压缩后再发送</li>\n</ul>\n</li>\n<li><p>客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了</p>\n</li>\n<li><p>基于二进制流的“帧”：在 HTTP&#x2F;2 中定义了 10 种不同类型的帧</p>\n<ul>\n<li>消息是由 HEADER frame + 若干个 DATA frame 组成</li>\n</ul>\n</li>\n<li><p>多路复用：解决了原来的序列和阻塞机制</p>\n<ul>\n<li><strong>乱序请求</strong>：HTTP&#x2F;2 把每个 request 和 response 的数据包称为一个数据流(stream)，每个数据流都有自己全局唯一的编号。每个数据包在传输过程中都需要标记它属于哪个数据流 ID，客户端发出的数据流，ID 一律为奇数，服务器发出的，ID 为偶数。</li>\n</ul>\n</li>\n<li><p><strong>优先级排序</strong>：可以对请求进行优先级排序，使更多重要请求更快地完成，从而进一步提高性能。</p>\n</li>\n<li><p><strong>请求可取消</strong>：数据流在发送中的任意时刻，客户端和服务器都可以发送信号(RST_STREAM 帧)，取消这个数据流。HTTP&#x2F;1.1 中想要取消数据流的唯一方法，就是关闭 TCP 连接。而 HTTP&#x2F;2 可以取消某一次请求，同时保证 TCP 连接还打开着，可以被其他请求使用。</p>\n</li>\n<li><p><strong>服务端主动推送</strong>：允许服务器推测性地将数据发送到需要这些数据的客户端，通过牺牲一些网络流量来抵消潜在的延迟。服务器通过合成请求来完成此操作，并将其作为 PUSH_PROMISE 帧发送。然后，服务器能够在单独的流上发送对合成请求的响应。</p>\n</li>\n</ul>\n<h2 id=\"HTTP-x2F-2-使用现状如何\"><a href=\"#HTTP-x2F-2-使用现状如何\" class=\"headerlink\" title=\"HTTP&#x2F;2 使用现状如何?\"></a>HTTP&#x2F;2 使用现状如何?</h2><p>在浏览器中，Edge，Safari，Firefox 和 Chrome 的最新版本都支持 HTTP&#x2F;2。其他基于 Blink 的浏览器也将支持 HTTP&#x2F;2（例如 Opera 和 Yandex Browser）。有关更多详细信息，请参见<a href=\"http://caniuse.com/#feat=http2\">这里</a>。</p>\n<p>还有几种可用的服务器（包括 <a href=\"https://http2.akamai.com/\">Akamai</a>，<a href=\"https://google.com/\">Google</a> 和 <a href=\"https://twitter.com/\">Twitter</a> 的主要站点提供的 beta 支持），以及许多可以部署和测试的开源实现。</p>\n<h2 id=\"HTTP-x2F-3是什么\"><a href=\"#HTTP-x2F-3是什么\" class=\"headerlink\" title=\"HTTP&#x2F;3是什么?\"></a>HTTP&#x2F;3是什么?</h2><p>请听下回分解Y(^o^)Y</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>HTTP 协议作是大家日常开发接触最多的网络协议，其不同版本的改进和背后的设计思路值得仔细品读~~</p>\n<h2 id=\"文档资料：\"><a href=\"#文档资料：\" class=\"headerlink\" title=\"文档资料：\"></a>文档资料：</h2><ul>\n<li><a href=\"https://item.jd.com/25496261693.html\">《HTTP&#x2F;2基础教程》中文版</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/http2?hl=zh-cn\">HTTP&#x2F;2 简介</a> - <a href=\"https://developers.google.com/web/fundamentals?hl=zh-cn\">Web Fundamentals</a> </li>\n<li><a href=\"https://blog.poetries.top/http-protocol/notes/advance/26-HTTP2%E7%89%B9%E6%80%A7%E6%A6%82%E8%A7%88.html\">《HTTP 协议》</a> </li>\n<li>[<a href=\"https://juejin.cn/post/6844903774339727374\">译] HTTP&#x2F;2 常见问题解答 - 掘金</a></li>\n<li><a href=\"https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP%3A2-HTTP-Frames-Definitions.md#http2-%E4%B8%AD%E7%9A%84%E5%B8%A7%E5%AE%9A%E4%B9%89\">《HTTP&#x2F;2 中的帧定义》</a></li>\n</ul>"},{"title":"关于HTTP/3 的那些事","date":"2022-08-06T03:02:00.000Z","abbrlink":"http3-overview","_content":"\n\n\n## 前言\n\n之前的[文章](https://coolzeng.com/posts/http2-overview/)已经给大家介绍过 HTTP/2，今天我们来聊聊 HTTP/3。本文主要从如下几个角度来讲讲 HTTP/3的那些事：\n\n- HTTP/3的由来\n- HTTP/3相比 HTTP/2有哪些新特性\n- HTTP/3的使用现状\n\n\n\n<!-- more -->\n\n\n\n## HTTP/2有什么问题？\n\n2015年5月定稿的HTTP/2解决了HTTP 1.x中存在的一大堆缺点，其中主要包含：\n\n- **解决了HTTP的队头拥塞**（head of line blocking）问题，客户端必须等待一个请求完成才能发送下一个请求的日子过去了。\n- **使用多路复用**（multiplexing），因而它可以通过同一个TCP连接发送多个逻辑数据流。复用使得很多事情变得更快更好，它带来更好的拥塞控制、更充分的带宽利用、更长久的TCP连接。\n\n\n\n但是HTTP/2也有自己的问题：**TCP上的队头阻塞（head of line blocking）**。如果一个序列号较低的数据段还没有接收到，即使其他序列号较高的段已经接收到，TCP的接收机滑动窗口也不会继续处理。这将导致TCP流瞬间挂起，在更糟糕的情况下，即使所有的段中有一个没有收到，也会导致关闭连接。\n\n\n\n## HTTP/3是什么？\n\n> HTTP3.0 = HTTP2.0 + QUIC（包含TLS）+ UDP\n\nHTTP/3其实是**HTTP-over-QUIC**，而QUIC（Quick UDP Internet Connections）是Google 2012年实现并部署、2013年公开发布，2021 年 6 月IETF公布的[RFC9000](https://datatracker.ietf.org/doc/html/rfc9000)正式确定了标准化版本。\n\n\n\n相比于 HTTP/2，HTTP/3主要是将**传输层的TCP改为UDP协议**，然后在应用层用QUIC协议来实现TCP的可靠性，解决TCP少量丢包导致队头阻塞（head-of-line blocking）问题&继承HTTP2.0的多路复用优点。\n\n\n{% imsize %}\nsrc: /images/http3-overview/HTTP2vsHTTP3.png\nalt: HTTP2 vs HTTP3\ntitle:  HTTP2 vs HTTP3\nprofile: thumbnail\nlink: true\nlinkProfile: huge\n{% endimsize %}\n\n\n**HTTP/2 vs HTTP/3**\n\n<!-- ![HTTP3-Layout](HTTP3-layout.png) -->\n{% asset_img HTTP3-layout.png 500  '\"HTTP3-Layout\" \"HTTP3-Layout\"' %}\n\n\n\n## HTTP/3有哪些关键特性？\n\nHTTP/3 的几个关键点主要包含：\n\n- 通过提高链接利用效率减少 RTT，提高数据交互速度。\n- 在第一条的基础上，囊括安全需求。\n- 解决当前实际网络环境中的适配问题，需要做好协议的兼容性设计。\n\n\n\n{% asset_img HTTP3-overview.png 500 '\"HTTP3-overview\" \"HTTP3-overview\"'%}\n\n\n\n**减少RTT**\n\nRTT是Round Trip Time的缩写，通俗地说，就是通信一来一回的时间。下面分别是 HTTP/2和 HTTP/3 建立第一次数据通信需要的 RTT 对比。\n\n\n\n**HTTP/2：TCP1.5次RTT+TLS1.5 次RTT+ HTTP 1 次RTT**\n\n\n{% asset_img HTTP2-RTT.png 500 '\"HTTP2-RTT\" \"HTTP2-RTT\"'%}\n\n\n\n**HTTP/3：QUIC1.5 次RTT+ HTTP 1 次RTT**\n\n\n{% asset_img HTTP3-RTT.png 500 '\"HTTP3-RTT\" \"HTTP3-RTT\"'%}\n\n\nQUIC协议本身的一些关键特性如下：\n\n| **优势**                   | **详细解释**                                                 |\n| -------------------------- | ------------------------------------------------------------ |\n| 显著的减少了连接建立的时间 | 使用QUIC协议也是需要三次握手的，跟TCP三次握手不一样的是它集成了TLS1.3版本的握手过程，需要1RTT。 就HTTP2.0来说，支持TLS1.3的话，也需要1RTT（TCP三次握手）+1RTT（TLS1.3）=2RTT，况且现在还是TLS1.2版本在广泛使用，现状就是 1RTT（TCP三次握手）+2RTT（TLS1.2）=3RTT |\n| 没有队头阻塞的多路复用     | 这个上面有举例，就不详细说了。 对HTTP2.0，主要是因为所有的资源是通过同一个TCP连接返回的，TCP要保证接收到所有的数据包，因此，一旦有数据包丢失，丢失的数据包会阻塞后续的数据包传送给应用层，直至重新接收到这个数据包。 对QUIC，它使用UDP进行数据传输，UDP在拿到数据后给到QUIC，由QUIC组装，如果一个资源完整了，就交给QUIC的上层处理，不完整，也就是有一个资源的数据包丢失，那QUIC会要求重传这个丢失的包，因此只会影响到这个资源，不会影响到其他资源的数据包被应用层处理 |\n| 连接迁移                   | WiFi切换到4G，4G切换WiFi都不需要重新建立连接，原因在于QUIC用一个connection ID来标志连接，而TCP是用client ip+client port+server ip+server port来标志的，因此当切换网络时，client ip变化了，导致TCP连接失效 |\n| 天然集成TLS1.3更安全       | TLS 1.3相比于 1.2 有了更快的连接速度和更高的安全性： 引入了新的密钥协商机制（PSK），支持 0-RTT 数据传输，在建立连接时节省了往返时间； 废弃了 3DES、RC4、AES-CBC 等加密组件，废弃了 SHA1、MD5 等哈希算法； |\n\n\n\n以下是QUIC和HTTP/3各个部分的最新官方IETF草案列表:\n\n- HTTP/3: [Hypertext Transfer Protocol (HTTP) over QUIC](https://tools.ietf.org/html/draft-ietf-quic-http)\n- 不变性：[Version-Independent Properties of QUIC](https://tools.ietf.org/html/draft-ietf-quic-invariants)\n- 传输层: [QUIC: A UDP-Based Multiplexed and Secure Transport](https://tools.ietf.org/html/draft-ietf-quic-transport)\n- 自动恢复: [QUIC Loss Detection and Congestion Control](https://tools.ietf.org/html/draft-ietf-quic-recovery)\n- TLS: [Using Transport Layer Security (TLS) to Secure QUIC](https://tools.ietf.org/html/draft-ietf-quic-tls)\n- QPACK: [QPACK: Header Compression for HTTP over QUIC](https://tools.ietf.org/html/draft-ietf-quic-qpack)\n\n\n\n## 与HTTP/2的比较\n\nHTTP/3面向QUIC设计，QUIC是一个自己处理数据流的传输层协议。HTTP/2面向TCP设计，因此数据流在HTTP层处理。\n\n\n\n**相似之处**\n\n这两个协议为客户端提供了几乎相同的功能集。\n\n- 两者都提供数据流\n- 两者都提供服务器推送\n- 两者都有头部压缩\n- QPACK与HPACK的设计非常类似\n- 两者都通过单一连接上的数据流提供复用\n- 两者都提供数据流的优先度设置\n\n\n\n**不同之处**\n\n两个协议的主要不同点在于细节，不同之处主要由**HTTP/3使用的QUIC带来：**\n\n- 0-RTT握手： QUIC 协议中，对于先前已连接过一个服务器的客户端可能缓存来自该连接的某些参数，并在之后与该服务器建立一个无需等待握手完成就可以立即传输信息的0-RTT连接，从而减少建立新连接所必需的 时间。\n- 得益于QUIC，HTTP/3的握手速度比TCP+TLS快得多。 \n- HTTP/3不存在明文的不安全版本。尽管在互联网上很少见，HTTP/2还是可以不配合 HTTPS来实现和使用。 \n\n\n\n## HTTP/3 使用现状如何?\n\n截止到 2021 年 8 月份，据W3Tech统计目前[全球有将近21%的网址支持 HTTP/3](https://w3techs.com/technologies/details/ce-http3)访问，相比之下目前 HTTP/2约有 46%的占比。\n\n\n\n关于HTTP/3的一些常见批评主要包含：\n\n**UDP永远不会通**\n\n很多企业、运营商和组织对53端口（DNS）以外的UDP流量进行拦截或者限流，因为这些流 量近来常被滥用于攻击。特别是一些现有的UDP协议和实现易受放大攻击（ampliﬁcation attack）威胁，攻击者可以控制无辜的主机向受害者投放发送大量的流量。\n\n\n\nQUIC内置了对放大攻击的缓解处理。它要求初始数据包不小于1200字节，并且协议中限制，服务器在未收到客户端回复的情况下，不能发送超过请求大小三倍的响应内容。\n\n\n\n**QUIC太吃CPU、内核处理UDP慢**\n\nTCP和TLS长期以来的成熟发展、改进，以及得到硬件协助，造成UDP看上去比较慢。我们有理由期望这会随着时间得到改善。问题在于，这额外的CPU占用会对部署者带来多大的影响。\n\n\n\n**只有Google在弄**\n\nQUIC 最早确实是 Google提出、实施的，后续交由 IETE 进行了标准化。但是这个批评其实站不住脚，Google通过大规模的部署证明，通过UDP部署这种协议可以正常运行且表现良好，这为IETF带来了初始的规范。后面Mozilla、Fastly、Cloudﬂare、Akamai、微软、 Facebook、苹果等等很多公司的员工也参与进来，共同推进互联网的传输层协议。\n\n\n\n**gQUIC 和 iQUIC的差异问题**\n\n2021 年 6 月正式定稿了QUIC协议，我们有理由相信后续HTTP/3相关升级工作也会得到稳步推进。\n\n\n\n## 结语\n\n至此HTTP系列文章已经全部完结，从 HTTP 1.x到 HTTP/3 协议的升级过程中，我们能够看到面对复杂和不稳定的网络环境，Google 及全球各大 IT 公司的童鞋们联合在一起贡献自己的力量，为不断提高网络应用程序的性能而努力~\n\n\n\n## 文档资料：\n\n- [QUIC - 维基百科](https://zh.wikipedia.org/wiki/QUIC)\n- [HTTP/3 - explained【简体中文】](https://http3-explained.haxx.se/zh)\n- [TLS1.3 VS TLS1.2，让你明白TLS1.3的强大](https://zhuanlan.zhihu.com/p/44980381)\n- [如何看待 HTTP/3 - 知乎](https://www.zhihu.com/question/302412059)\n- [HTTP/3: the past, the present, and the future](https://blog.cloudflare.com/http3-the-past-present-and-future/)\n","source":"_posts/关于HTTP-3-的那些事.md","raw":"---\ntitle: 关于HTTP/3 的那些事\ndate: 2022-08-06 11:02:00\nabbrlink: http3-overview\ncategories: \n- 开发\ntags: \n- 网络编程\n---\n\n\n\n## 前言\n\n之前的[文章](https://coolzeng.com/posts/http2-overview/)已经给大家介绍过 HTTP/2，今天我们来聊聊 HTTP/3。本文主要从如下几个角度来讲讲 HTTP/3的那些事：\n\n- HTTP/3的由来\n- HTTP/3相比 HTTP/2有哪些新特性\n- HTTP/3的使用现状\n\n\n\n<!-- more -->\n\n\n\n## HTTP/2有什么问题？\n\n2015年5月定稿的HTTP/2解决了HTTP 1.x中存在的一大堆缺点，其中主要包含：\n\n- **解决了HTTP的队头拥塞**（head of line blocking）问题，客户端必须等待一个请求完成才能发送下一个请求的日子过去了。\n- **使用多路复用**（multiplexing），因而它可以通过同一个TCP连接发送多个逻辑数据流。复用使得很多事情变得更快更好，它带来更好的拥塞控制、更充分的带宽利用、更长久的TCP连接。\n\n\n\n但是HTTP/2也有自己的问题：**TCP上的队头阻塞（head of line blocking）**。如果一个序列号较低的数据段还没有接收到，即使其他序列号较高的段已经接收到，TCP的接收机滑动窗口也不会继续处理。这将导致TCP流瞬间挂起，在更糟糕的情况下，即使所有的段中有一个没有收到，也会导致关闭连接。\n\n\n\n## HTTP/3是什么？\n\n> HTTP3.0 = HTTP2.0 + QUIC（包含TLS）+ UDP\n\nHTTP/3其实是**HTTP-over-QUIC**，而QUIC（Quick UDP Internet Connections）是Google 2012年实现并部署、2013年公开发布，2021 年 6 月IETF公布的[RFC9000](https://datatracker.ietf.org/doc/html/rfc9000)正式确定了标准化版本。\n\n\n\n相比于 HTTP/2，HTTP/3主要是将**传输层的TCP改为UDP协议**，然后在应用层用QUIC协议来实现TCP的可靠性，解决TCP少量丢包导致队头阻塞（head-of-line blocking）问题&继承HTTP2.0的多路复用优点。\n\n\n{% imsize %}\nsrc: /images/http3-overview/HTTP2vsHTTP3.png\nalt: HTTP2 vs HTTP3\ntitle:  HTTP2 vs HTTP3\nprofile: thumbnail\nlink: true\nlinkProfile: huge\n{% endimsize %}\n\n\n**HTTP/2 vs HTTP/3**\n\n<!-- ![HTTP3-Layout](HTTP3-layout.png) -->\n{% asset_img HTTP3-layout.png 500  '\"HTTP3-Layout\" \"HTTP3-Layout\"' %}\n\n\n\n## HTTP/3有哪些关键特性？\n\nHTTP/3 的几个关键点主要包含：\n\n- 通过提高链接利用效率减少 RTT，提高数据交互速度。\n- 在第一条的基础上，囊括安全需求。\n- 解决当前实际网络环境中的适配问题，需要做好协议的兼容性设计。\n\n\n\n{% asset_img HTTP3-overview.png 500 '\"HTTP3-overview\" \"HTTP3-overview\"'%}\n\n\n\n**减少RTT**\n\nRTT是Round Trip Time的缩写，通俗地说，就是通信一来一回的时间。下面分别是 HTTP/2和 HTTP/3 建立第一次数据通信需要的 RTT 对比。\n\n\n\n**HTTP/2：TCP1.5次RTT+TLS1.5 次RTT+ HTTP 1 次RTT**\n\n\n{% asset_img HTTP2-RTT.png 500 '\"HTTP2-RTT\" \"HTTP2-RTT\"'%}\n\n\n\n**HTTP/3：QUIC1.5 次RTT+ HTTP 1 次RTT**\n\n\n{% asset_img HTTP3-RTT.png 500 '\"HTTP3-RTT\" \"HTTP3-RTT\"'%}\n\n\nQUIC协议本身的一些关键特性如下：\n\n| **优势**                   | **详细解释**                                                 |\n| -------------------------- | ------------------------------------------------------------ |\n| 显著的减少了连接建立的时间 | 使用QUIC协议也是需要三次握手的，跟TCP三次握手不一样的是它集成了TLS1.3版本的握手过程，需要1RTT。 就HTTP2.0来说，支持TLS1.3的话，也需要1RTT（TCP三次握手）+1RTT（TLS1.3）=2RTT，况且现在还是TLS1.2版本在广泛使用，现状就是 1RTT（TCP三次握手）+2RTT（TLS1.2）=3RTT |\n| 没有队头阻塞的多路复用     | 这个上面有举例，就不详细说了。 对HTTP2.0，主要是因为所有的资源是通过同一个TCP连接返回的，TCP要保证接收到所有的数据包，因此，一旦有数据包丢失，丢失的数据包会阻塞后续的数据包传送给应用层，直至重新接收到这个数据包。 对QUIC，它使用UDP进行数据传输，UDP在拿到数据后给到QUIC，由QUIC组装，如果一个资源完整了，就交给QUIC的上层处理，不完整，也就是有一个资源的数据包丢失，那QUIC会要求重传这个丢失的包，因此只会影响到这个资源，不会影响到其他资源的数据包被应用层处理 |\n| 连接迁移                   | WiFi切换到4G，4G切换WiFi都不需要重新建立连接，原因在于QUIC用一个connection ID来标志连接，而TCP是用client ip+client port+server ip+server port来标志的，因此当切换网络时，client ip变化了，导致TCP连接失效 |\n| 天然集成TLS1.3更安全       | TLS 1.3相比于 1.2 有了更快的连接速度和更高的安全性： 引入了新的密钥协商机制（PSK），支持 0-RTT 数据传输，在建立连接时节省了往返时间； 废弃了 3DES、RC4、AES-CBC 等加密组件，废弃了 SHA1、MD5 等哈希算法； |\n\n\n\n以下是QUIC和HTTP/3各个部分的最新官方IETF草案列表:\n\n- HTTP/3: [Hypertext Transfer Protocol (HTTP) over QUIC](https://tools.ietf.org/html/draft-ietf-quic-http)\n- 不变性：[Version-Independent Properties of QUIC](https://tools.ietf.org/html/draft-ietf-quic-invariants)\n- 传输层: [QUIC: A UDP-Based Multiplexed and Secure Transport](https://tools.ietf.org/html/draft-ietf-quic-transport)\n- 自动恢复: [QUIC Loss Detection and Congestion Control](https://tools.ietf.org/html/draft-ietf-quic-recovery)\n- TLS: [Using Transport Layer Security (TLS) to Secure QUIC](https://tools.ietf.org/html/draft-ietf-quic-tls)\n- QPACK: [QPACK: Header Compression for HTTP over QUIC](https://tools.ietf.org/html/draft-ietf-quic-qpack)\n\n\n\n## 与HTTP/2的比较\n\nHTTP/3面向QUIC设计，QUIC是一个自己处理数据流的传输层协议。HTTP/2面向TCP设计，因此数据流在HTTP层处理。\n\n\n\n**相似之处**\n\n这两个协议为客户端提供了几乎相同的功能集。\n\n- 两者都提供数据流\n- 两者都提供服务器推送\n- 两者都有头部压缩\n- QPACK与HPACK的设计非常类似\n- 两者都通过单一连接上的数据流提供复用\n- 两者都提供数据流的优先度设置\n\n\n\n**不同之处**\n\n两个协议的主要不同点在于细节，不同之处主要由**HTTP/3使用的QUIC带来：**\n\n- 0-RTT握手： QUIC 协议中，对于先前已连接过一个服务器的客户端可能缓存来自该连接的某些参数，并在之后与该服务器建立一个无需等待握手完成就可以立即传输信息的0-RTT连接，从而减少建立新连接所必需的 时间。\n- 得益于QUIC，HTTP/3的握手速度比TCP+TLS快得多。 \n- HTTP/3不存在明文的不安全版本。尽管在互联网上很少见，HTTP/2还是可以不配合 HTTPS来实现和使用。 \n\n\n\n## HTTP/3 使用现状如何?\n\n截止到 2021 年 8 月份，据W3Tech统计目前[全球有将近21%的网址支持 HTTP/3](https://w3techs.com/technologies/details/ce-http3)访问，相比之下目前 HTTP/2约有 46%的占比。\n\n\n\n关于HTTP/3的一些常见批评主要包含：\n\n**UDP永远不会通**\n\n很多企业、运营商和组织对53端口（DNS）以外的UDP流量进行拦截或者限流，因为这些流 量近来常被滥用于攻击。特别是一些现有的UDP协议和实现易受放大攻击（ampliﬁcation attack）威胁，攻击者可以控制无辜的主机向受害者投放发送大量的流量。\n\n\n\nQUIC内置了对放大攻击的缓解处理。它要求初始数据包不小于1200字节，并且协议中限制，服务器在未收到客户端回复的情况下，不能发送超过请求大小三倍的响应内容。\n\n\n\n**QUIC太吃CPU、内核处理UDP慢**\n\nTCP和TLS长期以来的成熟发展、改进，以及得到硬件协助，造成UDP看上去比较慢。我们有理由期望这会随着时间得到改善。问题在于，这额外的CPU占用会对部署者带来多大的影响。\n\n\n\n**只有Google在弄**\n\nQUIC 最早确实是 Google提出、实施的，后续交由 IETE 进行了标准化。但是这个批评其实站不住脚，Google通过大规模的部署证明，通过UDP部署这种协议可以正常运行且表现良好，这为IETF带来了初始的规范。后面Mozilla、Fastly、Cloudﬂare、Akamai、微软、 Facebook、苹果等等很多公司的员工也参与进来，共同推进互联网的传输层协议。\n\n\n\n**gQUIC 和 iQUIC的差异问题**\n\n2021 年 6 月正式定稿了QUIC协议，我们有理由相信后续HTTP/3相关升级工作也会得到稳步推进。\n\n\n\n## 结语\n\n至此HTTP系列文章已经全部完结，从 HTTP 1.x到 HTTP/3 协议的升级过程中，我们能够看到面对复杂和不稳定的网络环境，Google 及全球各大 IT 公司的童鞋们联合在一起贡献自己的力量，为不断提高网络应用程序的性能而努力~\n\n\n\n## 文档资料：\n\n- [QUIC - 维基百科](https://zh.wikipedia.org/wiki/QUIC)\n- [HTTP/3 - explained【简体中文】](https://http3-explained.haxx.se/zh)\n- [TLS1.3 VS TLS1.2，让你明白TLS1.3的强大](https://zhuanlan.zhihu.com/p/44980381)\n- [如何看待 HTTP/3 - 知乎](https://www.zhihu.com/question/302412059)\n- [HTTP/3: the past, the present, and the future](https://blog.cloudflare.com/http3-the-past-present-and-future/)\n","slug":"关于HTTP-3-的那些事","published":1,"updated":"2022-08-06T05:00:26.854Z","_id":"cl6hf968o0013x6u07hr1gsyu","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前的<a href=\"https://coolzeng.com/posts/http2-overview/\">文章</a>已经给大家介绍过 HTTP&#x2F;2，今天我们来聊聊 HTTP&#x2F;3。本文主要从如下几个角度来讲讲 HTTP&#x2F;3的那些事：</p>\n<ul>\n<li>HTTP&#x2F;3的由来</li>\n<li>HTTP&#x2F;3相比 HTTP&#x2F;2有哪些新特性</li>\n<li>HTTP&#x2F;3的使用现状</li>\n</ul>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"HTTP-x2F-2有什么问题？\"><a href=\"#HTTP-x2F-2有什么问题？\" class=\"headerlink\" title=\"HTTP&#x2F;2有什么问题？\"></a>HTTP&#x2F;2有什么问题？</h2><p>2015年5月定稿的HTTP&#x2F;2解决了HTTP 1.x中存在的一大堆缺点，其中主要包含：</p>\n<ul>\n<li><strong>解决了HTTP的队头拥塞</strong>（head of line blocking）问题，客户端必须等待一个请求完成才能发送下一个请求的日子过去了。</li>\n<li><strong>使用多路复用</strong>（multiplexing），因而它可以通过同一个TCP连接发送多个逻辑数据流。复用使得很多事情变得更快更好，它带来更好的拥塞控制、更充分的带宽利用、更长久的TCP连接。</li>\n</ul>\n<p>但是HTTP&#x2F;2也有自己的问题：<strong>TCP上的队头阻塞（head of line blocking）</strong>。如果一个序列号较低的数据段还没有接收到，即使其他序列号较高的段已经接收到，TCP的接收机滑动窗口也不会继续处理。这将导致TCP流瞬间挂起，在更糟糕的情况下，即使所有的段中有一个没有收到，也会导致关闭连接。</p>\n<h2 id=\"HTTP-x2F-3是什么？\"><a href=\"#HTTP-x2F-3是什么？\" class=\"headerlink\" title=\"HTTP&#x2F;3是什么？\"></a>HTTP&#x2F;3是什么？</h2><blockquote>\n<p>HTTP3.0 &#x3D; HTTP2.0 + QUIC（包含TLS）+ UDP</p>\n</blockquote>\n<p>HTTP&#x2F;3其实是<strong>HTTP-over-QUIC</strong>，而QUIC（Quick UDP Internet Connections）是Google 2012年实现并部署、2013年公开发布，2021 年 6 月IETF公布的<a href=\"https://datatracker.ietf.org/doc/html/rfc9000\">RFC9000</a>正式确定了标准化版本。</p>\n<p>相比于 HTTP&#x2F;2，HTTP&#x2F;3主要是将<strong>传输层的TCP改为UDP协议</strong>，然后在应用层用QUIC协议来实现TCP的可靠性，解决TCP少量丢包导致队头阻塞（head-of-line blocking）问题&amp;继承HTTP2.0的多路复用优点。</p>\n<a href=\"/images/http3-overview/huge-HTTP2vsHTTP3.png\"><img src=\"/images/http3-overview/thumbnail-HTTP2vsHTTP3.png\" alt=\"HTTP2 vs HTTP3\" title=\"HTTP2 vs HTTP3\"></a>\n\n\n<p><strong>HTTP&#x2F;2 vs HTTP&#x2F;3</strong></p>\n<!-- ![HTTP3-Layout](HTTP3-layout.png) -->\n<img src=\"/posts/http3-overview/HTTP3-layout.png\" class=\"\" width=\"500\" title=\"HTTP3-Layout\" alt=\"HTTP3-Layout\">\n\n\n\n<h2 id=\"HTTP-x2F-3有哪些关键特性？\"><a href=\"#HTTP-x2F-3有哪些关键特性？\" class=\"headerlink\" title=\"HTTP&#x2F;3有哪些关键特性？\"></a>HTTP&#x2F;3有哪些关键特性？</h2><p>HTTP&#x2F;3 的几个关键点主要包含：</p>\n<ul>\n<li>通过提高链接利用效率减少 RTT，提高数据交互速度。</li>\n<li>在第一条的基础上，囊括安全需求。</li>\n<li>解决当前实际网络环境中的适配问题，需要做好协议的兼容性设计。</li>\n</ul>\n<img src=\"/posts/http3-overview/HTTP3-overview.png\" class=\"\" width=\"500\" title=\"HTTP3-overview\" alt=\"HTTP3-overview\">\n\n\n\n<p><strong>减少RTT</strong></p>\n<p>RTT是Round Trip Time的缩写，通俗地说，就是通信一来一回的时间。下面分别是 HTTP&#x2F;2和 HTTP&#x2F;3 建立第一次数据通信需要的 RTT 对比。</p>\n<p><strong>HTTP&#x2F;2：TCP1.5次RTT+TLS1.5 次RTT+ HTTP 1 次RTT</strong></p>\n<img src=\"/posts/http3-overview/HTTP2-RTT.png\" class=\"\" width=\"500\" title=\"HTTP2-RTT\" alt=\"HTTP2-RTT\">\n\n\n\n<p><strong>HTTP&#x2F;3：QUIC1.5 次RTT+ HTTP 1 次RTT</strong></p>\n<img src=\"/posts/http3-overview/HTTP3-RTT.png\" class=\"\" width=\"500\" title=\"HTTP3-RTT\" alt=\"HTTP3-RTT\">\n\n\n<p>QUIC协议本身的一些关键特性如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>优势</strong></th>\n<th><strong>详细解释</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>显著的减少了连接建立的时间</td>\n<td>使用QUIC协议也是需要三次握手的，跟TCP三次握手不一样的是它集成了TLS1.3版本的握手过程，需要1RTT。 就HTTP2.0来说，支持TLS1.3的话，也需要1RTT（TCP三次握手）+1RTT（TLS1.3）&#x3D;2RTT，况且现在还是TLS1.2版本在广泛使用，现状就是 1RTT（TCP三次握手）+2RTT（TLS1.2）&#x3D;3RTT</td>\n</tr>\n<tr>\n<td>没有队头阻塞的多路复用</td>\n<td>这个上面有举例，就不详细说了。 对HTTP2.0，主要是因为所有的资源是通过同一个TCP连接返回的，TCP要保证接收到所有的数据包，因此，一旦有数据包丢失，丢失的数据包会阻塞后续的数据包传送给应用层，直至重新接收到这个数据包。 对QUIC，它使用UDP进行数据传输，UDP在拿到数据后给到QUIC，由QUIC组装，如果一个资源完整了，就交给QUIC的上层处理，不完整，也就是有一个资源的数据包丢失，那QUIC会要求重传这个丢失的包，因此只会影响到这个资源，不会影响到其他资源的数据包被应用层处理</td>\n</tr>\n<tr>\n<td>连接迁移</td>\n<td>WiFi切换到4G，4G切换WiFi都不需要重新建立连接，原因在于QUIC用一个connection ID来标志连接，而TCP是用client ip+client port+server ip+server port来标志的，因此当切换网络时，client ip变化了，导致TCP连接失效</td>\n</tr>\n<tr>\n<td>天然集成TLS1.3更安全</td>\n<td>TLS 1.3相比于 1.2 有了更快的连接速度和更高的安全性： 引入了新的密钥协商机制（PSK），支持 0-RTT 数据传输，在建立连接时节省了往返时间； 废弃了 3DES、RC4、AES-CBC 等加密组件，废弃了 SHA1、MD5 等哈希算法；</td>\n</tr>\n</tbody></table>\n<p>以下是QUIC和HTTP&#x2F;3各个部分的最新官方IETF草案列表:</p>\n<ul>\n<li>HTTP&#x2F;3: <a href=\"https://tools.ietf.org/html/draft-ietf-quic-http\">Hypertext Transfer Protocol (HTTP) over QUIC</a></li>\n<li>不变性：<a href=\"https://tools.ietf.org/html/draft-ietf-quic-invariants\">Version-Independent Properties of QUIC</a></li>\n<li>传输层: <a href=\"https://tools.ietf.org/html/draft-ietf-quic-transport\">QUIC: A UDP-Based Multiplexed and Secure Transport</a></li>\n<li>自动恢复: <a href=\"https://tools.ietf.org/html/draft-ietf-quic-recovery\">QUIC Loss Detection and Congestion Control</a></li>\n<li>TLS: <a href=\"https://tools.ietf.org/html/draft-ietf-quic-tls\">Using Transport Layer Security (TLS) to Secure QUIC</a></li>\n<li>QPACK: <a href=\"https://tools.ietf.org/html/draft-ietf-quic-qpack\">QPACK: Header Compression for HTTP over QUIC</a></li>\n</ul>\n<h2 id=\"与HTTP-x2F-2的比较\"><a href=\"#与HTTP-x2F-2的比较\" class=\"headerlink\" title=\"与HTTP&#x2F;2的比较\"></a>与HTTP&#x2F;2的比较</h2><p>HTTP&#x2F;3面向QUIC设计，QUIC是一个自己处理数据流的传输层协议。HTTP&#x2F;2面向TCP设计，因此数据流在HTTP层处理。</p>\n<p><strong>相似之处</strong></p>\n<p>这两个协议为客户端提供了几乎相同的功能集。</p>\n<ul>\n<li>两者都提供数据流</li>\n<li>两者都提供服务器推送</li>\n<li>两者都有头部压缩</li>\n<li>QPACK与HPACK的设计非常类似</li>\n<li>两者都通过单一连接上的数据流提供复用</li>\n<li>两者都提供数据流的优先度设置</li>\n</ul>\n<p><strong>不同之处</strong></p>\n<p>两个协议的主要不同点在于细节，不同之处主要由<strong>HTTP&#x2F;3使用的QUIC带来：</strong></p>\n<ul>\n<li>0-RTT握手： QUIC 协议中，对于先前已连接过一个服务器的客户端可能缓存来自该连接的某些参数，并在之后与该服务器建立一个无需等待握手完成就可以立即传输信息的0-RTT连接，从而减少建立新连接所必需的 时间。</li>\n<li>得益于QUIC，HTTP&#x2F;3的握手速度比TCP+TLS快得多。 </li>\n<li>HTTP&#x2F;3不存在明文的不安全版本。尽管在互联网上很少见，HTTP&#x2F;2还是可以不配合 HTTPS来实现和使用。</li>\n</ul>\n<h2 id=\"HTTP-x2F-3-使用现状如何\"><a href=\"#HTTP-x2F-3-使用现状如何\" class=\"headerlink\" title=\"HTTP&#x2F;3 使用现状如何?\"></a>HTTP&#x2F;3 使用现状如何?</h2><p>截止到 2021 年 8 月份，据W3Tech统计目前<a href=\"https://w3techs.com/technologies/details/ce-http3\">全球有将近21%的网址支持 HTTP&#x2F;3</a>访问，相比之下目前 HTTP&#x2F;2约有 46%的占比。</p>\n<p>关于HTTP&#x2F;3的一些常见批评主要包含：</p>\n<p><strong>UDP永远不会通</strong></p>\n<p>很多企业、运营商和组织对53端口（DNS）以外的UDP流量进行拦截或者限流，因为这些流 量近来常被滥用于攻击。特别是一些现有的UDP协议和实现易受放大攻击（ampliﬁcation attack）威胁，攻击者可以控制无辜的主机向受害者投放发送大量的流量。</p>\n<p>QUIC内置了对放大攻击的缓解处理。它要求初始数据包不小于1200字节，并且协议中限制，服务器在未收到客户端回复的情况下，不能发送超过请求大小三倍的响应内容。</p>\n<p><strong>QUIC太吃CPU、内核处理UDP慢</strong></p>\n<p>TCP和TLS长期以来的成熟发展、改进，以及得到硬件协助，造成UDP看上去比较慢。我们有理由期望这会随着时间得到改善。问题在于，这额外的CPU占用会对部署者带来多大的影响。</p>\n<p><strong>只有Google在弄</strong></p>\n<p>QUIC 最早确实是 Google提出、实施的，后续交由 IETE 进行了标准化。但是这个批评其实站不住脚，Google通过大规模的部署证明，通过UDP部署这种协议可以正常运行且表现良好，这为IETF带来了初始的规范。后面Mozilla、Fastly、Cloudﬂare、Akamai、微软、 Facebook、苹果等等很多公司的员工也参与进来，共同推进互联网的传输层协议。</p>\n<p><strong>gQUIC 和 iQUIC的差异问题</strong></p>\n<p>2021 年 6 月正式定稿了QUIC协议，我们有理由相信后续HTTP&#x2F;3相关升级工作也会得到稳步推进。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>至此HTTP系列文章已经全部完结，从 HTTP 1.x到 HTTP&#x2F;3 协议的升级过程中，我们能够看到面对复杂和不稳定的网络环境，Google 及全球各大 IT 公司的童鞋们联合在一起贡献自己的力量，为不断提高网络应用程序的性能而努力~</p>\n<h2 id=\"文档资料：\"><a href=\"#文档资料：\" class=\"headerlink\" title=\"文档资料：\"></a>文档资料：</h2><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/QUIC\">QUIC - 维基百科</a></li>\n<li><a href=\"https://http3-explained.haxx.se/zh\">HTTP&#x2F;3 - explained【简体中文】</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/44980381\">TLS1.3 VS TLS1.2，让你明白TLS1.3的强大</a></li>\n<li><a href=\"https://www.zhihu.com/question/302412059\">如何看待 HTTP&#x2F;3 - 知乎</a></li>\n<li><a href=\"https://blog.cloudflare.com/http3-the-past-present-and-future/\">HTTP&#x2F;3: the past, the present, and the future</a></li>\n</ul>\n","site":{"data":{"hexo-leancloud-counter-security-fix":"/* global hexo */\n\n'use strict';\n\nconst AV = require('leancloud-storage');\nconst readlineSync = require('readline-sync');\nconst packageInfo = require('./package.json');\nconst pathFn = require('path');\nconst fs = require('fs');\n\nfunction generate_post_list(locals) {\n    let { config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    var urlsPath = 'leancloud_counter_security_urls.json';\n    var urls = [...locals.posts.toArray()]\n        .filter(x => x.published)\n        .map(x => {\n            return {\n                title: x.title,\n                url  : config.root + x.path\n            };\n        });\n    return {\n        path: urlsPath,\n        data: JSON.stringify(urls)\n    };\n}\n\nhexo.extend.generator.register('leancloud_counter_security_generator', generate_post_list);\n\nfunction cmp(x, y) {\n    if (x.url < y.url) {\n        return -1;\n    } else if (x.url === y.url) {\n        return 0;\n    }\n    return 1;\n}\n\nfunction postOperation(env, cnt, limit, newData, memoData, log) {\n    if (cnt !== limit) return;\n\n    newData.sort(cmp);\n    var sourceDir = env.source_dir;\n    var publicDir = env.public_dir;\n    var memoFile = pathFn.join(sourceDir, 'leancloud.memo');\n    fs.writeFileSync(memoFile, '[\\n');\n\n    var memoIdx = 1;\n    for (var i = 0; newData[i]; i++) {\n        while (memoData[memoIdx] !== ']') {\n            var y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > newData[i].url) break;\n\n            fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n            memoIdx++;\n        }\n        fs.writeFileSync(memoFile, '{\"title\":\"' + newData[i].title + '\",\"url\":\"' + newData[i].url + '\"},\\n', { flag: 'a' });\n    }\n    while (memoData[memoIdx] !== ']') {\n        fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n        memoIdx++;\n    }\n    fs.writeFileSync(memoFile, memoData[memoIdx], { flag: 'a' });\n\n    var srcFile = pathFn.join(sourceDir, 'leancloud.memo');\n    var destFile = pathFn.join(publicDir, 'leancloud.memo');\n    var readStream = fs.createReadStream(srcFile);\n    var writeStream = fs.createWriteStream(destFile);\n    readStream.pipe(writeStream);\n    log.info('leancloud.memo successfully updated.');\n}\n\nasync function sync() {\n    let { log, config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    let { app_id, app_key, server_url } = config.leancloud_counter_security;\n    var publicDir = this.public_dir;\n    var UrlsFile = pathFn.join(publicDir, 'leancloud_counter_security_urls.json');\n    var urls = JSON.parse(fs.readFileSync(UrlsFile, 'utf8'));\n\n    AV.init({\n        appId    : app_id,\n        appKey   : app_key,\n        serverURL: server_url\n    });\n\n    var currentUser = AV.User.current();\n    if (!currentUser) {\n        var userName = config.leancloud_counter_security.username;\n        var passWord = config.leancloud_counter_security.password;\n        if (!userName) {\n            userName = readlineSync.question('Enter your username: ');\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        } else if (!passWord) {\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        }\n        await AV.User.logIn(userName, passWord).then(loginedUser => {\n            log.info('Logined as: ' + loginedUser.getUsername());\n        }, error => {\n            log.error(error);\n        });\n    }\n\n    log.info('Now syncing your posts list to leancloud counter...');\n    var Counter = AV.Object.extend('Counter');\n    var memoFile = pathFn.join(publicDir, 'leancloud.memo');\n    if (!fs.existsSync(memoFile)) {\n        fs.writeFileSync(memoFile, '[\\n]');\n    }\n    var memoData = fs.readFileSync(memoFile, 'utf-8').split('\\n');\n    var memoIdx = 1;\n    var newData = [];\n    var cnt = 0;\n    var limit = 0;\n    var env = this;\n    urls.sort(cmp).forEach(x => {\n        var y = {};\n        y.title = '';\n        y.url = '';\n        var flag = false;\n        while (memoData[memoIdx] !== ']') {\n            y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > x.url) break;\n            if (y.url === x.url && y.title === x.title) {\n                flag = true;\n                break;\n            }\n            memoIdx++;\n        }\n        if (flag) return;\n\n        log.info('Dealing with record of ' + x.title);\n        limit++;\n        var query = new AV.Query('Counter');\n        query.equalTo('url', x.url);\n        query.count().then(count => {\n            if (count === 0) {\n                var counter = new Counter();\n                counter.set('url', x.url);\n                counter.set('title', x.title);\n                counter.set('time', 0);\n                counter.save().then(obj => {\n                    log.info(x.title + ' is saved as: ' + obj.id);\n                    newData.push(x);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                }, error => {\n                    log.error(error);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                });\n            } else {\n                newData.push(x);\n                cnt++;\n                postOperation(env, cnt, limit, newData, memoData, log);\n            }\n        }, error => {\n            log.error(error);\n            cnt++;\n            postOperation(env, cnt, limit, newData, memoData, log);\n        });\n    });\n}\n\nhexo.extend.deployer.register('leancloud_counter_security_sync', sync);\n\nvar commandOptions = {\n    desc     : packageInfo.description,\n    usage    : ' <argument>',\n    arguments: [\n        {\n            name: 'register | r <username> <password>',\n            desc: 'Register a new user.'\n        }\n    ]\n};\n\nfunction commandFunc(args) {\n    let { log, config } = this;\n\n    if (args._.length !== 3) {\n        log.error('Too Few or Many Arguments.');\n    } else if (args._[0] === 'register' || args._[0] === 'r') {\n        let { app_id, app_key, server_url } = config.leancloud_counter_security;\n        AV.init({\n            appId    : app_id,\n            appKey   : app_key,\n            serverURL: server_url\n        });\n\n        var user = new AV.User();\n        user.setUsername(String(args._[1]));\n        user.setPassword(String(args._[2]));\n        user.signUp().then(loginedUser => {\n            log.info(loginedUser.getUsername() + ' is successfully signed up');\n        }, error => {\n            log.error(error);\n        });\n    } else {\n        log.error('Unknown Command.');\n    }\n}\n\nhexo.extend.console.register('lc-counter', 'hexo-leancloud-counter-security', commandOptions, commandFunc);\n"}},"length":3548,"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前的<a href=\"https://coolzeng.com/posts/http2-overview/\">文章</a>已经给大家介绍过 HTTP&#x2F;2，今天我们来聊聊 HTTP&#x2F;3。本文主要从如下几个角度来讲讲 HTTP&#x2F;3的那些事：</p>\n<ul>\n<li>HTTP&#x2F;3的由来</li>\n<li>HTTP&#x2F;3相比 HTTP&#x2F;2有哪些新特性</li>\n<li>HTTP&#x2F;3的使用现状</li>\n</ul>","more":"<h2 id=\"HTTP-x2F-2有什么问题？\"><a href=\"#HTTP-x2F-2有什么问题？\" class=\"headerlink\" title=\"HTTP&#x2F;2有什么问题？\"></a>HTTP&#x2F;2有什么问题？</h2><p>2015年5月定稿的HTTP&#x2F;2解决了HTTP 1.x中存在的一大堆缺点，其中主要包含：</p>\n<ul>\n<li><strong>解决了HTTP的队头拥塞</strong>（head of line blocking）问题，客户端必须等待一个请求完成才能发送下一个请求的日子过去了。</li>\n<li><strong>使用多路复用</strong>（multiplexing），因而它可以通过同一个TCP连接发送多个逻辑数据流。复用使得很多事情变得更快更好，它带来更好的拥塞控制、更充分的带宽利用、更长久的TCP连接。</li>\n</ul>\n<p>但是HTTP&#x2F;2也有自己的问题：<strong>TCP上的队头阻塞（head of line blocking）</strong>。如果一个序列号较低的数据段还没有接收到，即使其他序列号较高的段已经接收到，TCP的接收机滑动窗口也不会继续处理。这将导致TCP流瞬间挂起，在更糟糕的情况下，即使所有的段中有一个没有收到，也会导致关闭连接。</p>\n<h2 id=\"HTTP-x2F-3是什么？\"><a href=\"#HTTP-x2F-3是什么？\" class=\"headerlink\" title=\"HTTP&#x2F;3是什么？\"></a>HTTP&#x2F;3是什么？</h2><blockquote>\n<p>HTTP3.0 &#x3D; HTTP2.0 + QUIC（包含TLS）+ UDP</p>\n</blockquote>\n<p>HTTP&#x2F;3其实是<strong>HTTP-over-QUIC</strong>，而QUIC（Quick UDP Internet Connections）是Google 2012年实现并部署、2013年公开发布，2021 年 6 月IETF公布的<a href=\"https://datatracker.ietf.org/doc/html/rfc9000\">RFC9000</a>正式确定了标准化版本。</p>\n<p>相比于 HTTP&#x2F;2，HTTP&#x2F;3主要是将<strong>传输层的TCP改为UDP协议</strong>，然后在应用层用QUIC协议来实现TCP的可靠性，解决TCP少量丢包导致队头阻塞（head-of-line blocking）问题&amp;继承HTTP2.0的多路复用优点。</p>\n<a href=\"/images/http3-overview/huge-HTTP2vsHTTP3.png\"><img src=\"/images/http3-overview/thumbnail-HTTP2vsHTTP3.png\" alt=\"HTTP2 vs HTTP3\" title=\"HTTP2 vs HTTP3\"></a>\n\n\n<p><strong>HTTP&#x2F;2 vs HTTP&#x2F;3</strong></p>\n<!-- ![HTTP3-Layout](HTTP3-layout.png) -->\n<img src=\"/posts/http3-overview/HTTP3-layout.png\" class=\"\" width=\"500\" title=\"HTTP3-Layout\" alt=\"HTTP3-Layout\">\n\n\n\n<h2 id=\"HTTP-x2F-3有哪些关键特性？\"><a href=\"#HTTP-x2F-3有哪些关键特性？\" class=\"headerlink\" title=\"HTTP&#x2F;3有哪些关键特性？\"></a>HTTP&#x2F;3有哪些关键特性？</h2><p>HTTP&#x2F;3 的几个关键点主要包含：</p>\n<ul>\n<li>通过提高链接利用效率减少 RTT，提高数据交互速度。</li>\n<li>在第一条的基础上，囊括安全需求。</li>\n<li>解决当前实际网络环境中的适配问题，需要做好协议的兼容性设计。</li>\n</ul>\n<img src=\"/posts/http3-overview/HTTP3-overview.png\" class=\"\" width=\"500\" title=\"HTTP3-overview\" alt=\"HTTP3-overview\">\n\n\n\n<p><strong>减少RTT</strong></p>\n<p>RTT是Round Trip Time的缩写，通俗地说，就是通信一来一回的时间。下面分别是 HTTP&#x2F;2和 HTTP&#x2F;3 建立第一次数据通信需要的 RTT 对比。</p>\n<p><strong>HTTP&#x2F;2：TCP1.5次RTT+TLS1.5 次RTT+ HTTP 1 次RTT</strong></p>\n<img src=\"/posts/http3-overview/HTTP2-RTT.png\" class=\"\" width=\"500\" title=\"HTTP2-RTT\" alt=\"HTTP2-RTT\">\n\n\n\n<p><strong>HTTP&#x2F;3：QUIC1.5 次RTT+ HTTP 1 次RTT</strong></p>\n<img src=\"/posts/http3-overview/HTTP3-RTT.png\" class=\"\" width=\"500\" title=\"HTTP3-RTT\" alt=\"HTTP3-RTT\">\n\n\n<p>QUIC协议本身的一些关键特性如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>优势</strong></th>\n<th><strong>详细解释</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>显著的减少了连接建立的时间</td>\n<td>使用QUIC协议也是需要三次握手的，跟TCP三次握手不一样的是它集成了TLS1.3版本的握手过程，需要1RTT。 就HTTP2.0来说，支持TLS1.3的话，也需要1RTT（TCP三次握手）+1RTT（TLS1.3）&#x3D;2RTT，况且现在还是TLS1.2版本在广泛使用，现状就是 1RTT（TCP三次握手）+2RTT（TLS1.2）&#x3D;3RTT</td>\n</tr>\n<tr>\n<td>没有队头阻塞的多路复用</td>\n<td>这个上面有举例，就不详细说了。 对HTTP2.0，主要是因为所有的资源是通过同一个TCP连接返回的，TCP要保证接收到所有的数据包，因此，一旦有数据包丢失，丢失的数据包会阻塞后续的数据包传送给应用层，直至重新接收到这个数据包。 对QUIC，它使用UDP进行数据传输，UDP在拿到数据后给到QUIC，由QUIC组装，如果一个资源完整了，就交给QUIC的上层处理，不完整，也就是有一个资源的数据包丢失，那QUIC会要求重传这个丢失的包，因此只会影响到这个资源，不会影响到其他资源的数据包被应用层处理</td>\n</tr>\n<tr>\n<td>连接迁移</td>\n<td>WiFi切换到4G，4G切换WiFi都不需要重新建立连接，原因在于QUIC用一个connection ID来标志连接，而TCP是用client ip+client port+server ip+server port来标志的，因此当切换网络时，client ip变化了，导致TCP连接失效</td>\n</tr>\n<tr>\n<td>天然集成TLS1.3更安全</td>\n<td>TLS 1.3相比于 1.2 有了更快的连接速度和更高的安全性： 引入了新的密钥协商机制（PSK），支持 0-RTT 数据传输，在建立连接时节省了往返时间； 废弃了 3DES、RC4、AES-CBC 等加密组件，废弃了 SHA1、MD5 等哈希算法；</td>\n</tr>\n</tbody></table>\n<p>以下是QUIC和HTTP&#x2F;3各个部分的最新官方IETF草案列表:</p>\n<ul>\n<li>HTTP&#x2F;3: <a href=\"https://tools.ietf.org/html/draft-ietf-quic-http\">Hypertext Transfer Protocol (HTTP) over QUIC</a></li>\n<li>不变性：<a href=\"https://tools.ietf.org/html/draft-ietf-quic-invariants\">Version-Independent Properties of QUIC</a></li>\n<li>传输层: <a href=\"https://tools.ietf.org/html/draft-ietf-quic-transport\">QUIC: A UDP-Based Multiplexed and Secure Transport</a></li>\n<li>自动恢复: <a href=\"https://tools.ietf.org/html/draft-ietf-quic-recovery\">QUIC Loss Detection and Congestion Control</a></li>\n<li>TLS: <a href=\"https://tools.ietf.org/html/draft-ietf-quic-tls\">Using Transport Layer Security (TLS) to Secure QUIC</a></li>\n<li>QPACK: <a href=\"https://tools.ietf.org/html/draft-ietf-quic-qpack\">QPACK: Header Compression for HTTP over QUIC</a></li>\n</ul>\n<h2 id=\"与HTTP-x2F-2的比较\"><a href=\"#与HTTP-x2F-2的比较\" class=\"headerlink\" title=\"与HTTP&#x2F;2的比较\"></a>与HTTP&#x2F;2的比较</h2><p>HTTP&#x2F;3面向QUIC设计，QUIC是一个自己处理数据流的传输层协议。HTTP&#x2F;2面向TCP设计，因此数据流在HTTP层处理。</p>\n<p><strong>相似之处</strong></p>\n<p>这两个协议为客户端提供了几乎相同的功能集。</p>\n<ul>\n<li>两者都提供数据流</li>\n<li>两者都提供服务器推送</li>\n<li>两者都有头部压缩</li>\n<li>QPACK与HPACK的设计非常类似</li>\n<li>两者都通过单一连接上的数据流提供复用</li>\n<li>两者都提供数据流的优先度设置</li>\n</ul>\n<p><strong>不同之处</strong></p>\n<p>两个协议的主要不同点在于细节，不同之处主要由<strong>HTTP&#x2F;3使用的QUIC带来：</strong></p>\n<ul>\n<li>0-RTT握手： QUIC 协议中，对于先前已连接过一个服务器的客户端可能缓存来自该连接的某些参数，并在之后与该服务器建立一个无需等待握手完成就可以立即传输信息的0-RTT连接，从而减少建立新连接所必需的 时间。</li>\n<li>得益于QUIC，HTTP&#x2F;3的握手速度比TCP+TLS快得多。 </li>\n<li>HTTP&#x2F;3不存在明文的不安全版本。尽管在互联网上很少见，HTTP&#x2F;2还是可以不配合 HTTPS来实现和使用。</li>\n</ul>\n<h2 id=\"HTTP-x2F-3-使用现状如何\"><a href=\"#HTTP-x2F-3-使用现状如何\" class=\"headerlink\" title=\"HTTP&#x2F;3 使用现状如何?\"></a>HTTP&#x2F;3 使用现状如何?</h2><p>截止到 2021 年 8 月份，据W3Tech统计目前<a href=\"https://w3techs.com/technologies/details/ce-http3\">全球有将近21%的网址支持 HTTP&#x2F;3</a>访问，相比之下目前 HTTP&#x2F;2约有 46%的占比。</p>\n<p>关于HTTP&#x2F;3的一些常见批评主要包含：</p>\n<p><strong>UDP永远不会通</strong></p>\n<p>很多企业、运营商和组织对53端口（DNS）以外的UDP流量进行拦截或者限流，因为这些流 量近来常被滥用于攻击。特别是一些现有的UDP协议和实现易受放大攻击（ampliﬁcation attack）威胁，攻击者可以控制无辜的主机向受害者投放发送大量的流量。</p>\n<p>QUIC内置了对放大攻击的缓解处理。它要求初始数据包不小于1200字节，并且协议中限制，服务器在未收到客户端回复的情况下，不能发送超过请求大小三倍的响应内容。</p>\n<p><strong>QUIC太吃CPU、内核处理UDP慢</strong></p>\n<p>TCP和TLS长期以来的成熟发展、改进，以及得到硬件协助，造成UDP看上去比较慢。我们有理由期望这会随着时间得到改善。问题在于，这额外的CPU占用会对部署者带来多大的影响。</p>\n<p><strong>只有Google在弄</strong></p>\n<p>QUIC 最早确实是 Google提出、实施的，后续交由 IETE 进行了标准化。但是这个批评其实站不住脚，Google通过大规模的部署证明，通过UDP部署这种协议可以正常运行且表现良好，这为IETF带来了初始的规范。后面Mozilla、Fastly、Cloudﬂare、Akamai、微软、 Facebook、苹果等等很多公司的员工也参与进来，共同推进互联网的传输层协议。</p>\n<p><strong>gQUIC 和 iQUIC的差异问题</strong></p>\n<p>2021 年 6 月正式定稿了QUIC协议，我们有理由相信后续HTTP&#x2F;3相关升级工作也会得到稳步推进。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>至此HTTP系列文章已经全部完结，从 HTTP 1.x到 HTTP&#x2F;3 协议的升级过程中，我们能够看到面对复杂和不稳定的网络环境，Google 及全球各大 IT 公司的童鞋们联合在一起贡献自己的力量，为不断提高网络应用程序的性能而努力~</p>\n<h2 id=\"文档资料：\"><a href=\"#文档资料：\" class=\"headerlink\" title=\"文档资料：\"></a>文档资料：</h2><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/QUIC\">QUIC - 维基百科</a></li>\n<li><a href=\"https://http3-explained.haxx.se/zh\">HTTP&#x2F;3 - explained【简体中文】</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/44980381\">TLS1.3 VS TLS1.2，让你明白TLS1.3的强大</a></li>\n<li><a href=\"https://www.zhihu.com/question/302412059\">如何看待 HTTP&#x2F;3 - 知乎</a></li>\n<li><a href=\"https://blog.cloudflare.com/http3-the-past-present-and-future/\">HTTP&#x2F;3: the past, the present, and the future</a></li>\n</ul>"},{"title":"iOS 网络安全之SSL Pinning","abbrlink":"ios-ssl-pinning","date":"2016-12-27T03:33:56.000Z","_content":"\n## **前言：**\n\nApple要求所有的 App 在2017年1月必须强制使用 ATS(Application Transport Security)，即 App 必须使用 HTTPS，而不能使用 HTTP 网络协议。这是Apple 在 app 安全领域做出的一个重大的举动，HTTP 由于使用明文进行传输，存在很大的安全隐患，网络请求容易被拦截和篡改。HTTPS 在安全性上相较于 HTTP 有很大的提升，依然存在一些问题：如 [MITT](http://www.secbox.cn/hacker/7846.html)(Man-In-The-Middle)中间人攻击和2014年 SSL 的[心脏出血漏洞](http://www.ithome.com/html/soft/80224.htm)。网络安全的问题看似离我们很远，其实就发生在我们身边，对我们的日常生活也会有很大的影响，特别是在移动互联网的浪潮下，人手一台手机的情况下，大家普遍使用支付宝和微信支付来进行支付，能够联网的智能家居产品越来越多的走入到普通家庭中，网络安全是一个需要引起重视的问题。而在网络传输过程中起到安全保障作用的，就是我们今天要讲的 SSL/TLS，当然主要是集中在 iOS 客户端。\n\n<!-- more -->\n\n## **0x00 - 什么是 SSL/TLS**\n\nSSL(Secure Sockets Layer 安全套接层)及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。SSL为Netscape所研发，用以保障在Internet上数据传输的安全，利用数据加密(Encryption)的技术，可确保数据在网络上的传输过程中不会被截取及窃听。SSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。 **— 摘自《互动百科》**\n\n从上面的定义可以看出 SSL 是一个加密层，主要用于信息加密、验证。\n\nSSL 主要提供下面三个服务：\n\n1. **认证用户和服务器**，确保数据发送到正确的客户机和服务器；\n2. **加密数据**以防止数据中途被窃听；\n3. 维护**数据的完整性**，确保数据在传输过程中不被改变。\n\n## **0x01 - 什么是 HTTPS**\n\nHTTPS（Hypertext Transfer Protocol Secure 安全超文本传输协议） 是由 Netscape 开发并内置于其浏览器中，用于对数据进行压缩和解压操作，并返回网络上传送回的结果，HTTPS 实际上运用了 Netscape 的完全套接字层（SSL）作为 HTTP 应用层的子层。\n\n## **0x02 - SSL Pinning 是什么**\n\n当前主流的各大网站 Google、Facebook 等都使用 HTTPS 来保障数据的安全性和私密性，但是在 HTTPS 协议也存在一定的问题，其中广为人知是 MIIT（中间人工具），攻击者在客户端和服务器中进行伪装和欺骗，从而获取敏感信息。\n\nSSL Pinning 是一个业界预防 MIIT 攻击的解决方案，其主要思想是在客户端绑定（Pin）服务器SSL 证书的核心信息，这个解决方案代价小，易于实施，因此被普遍使用。\n\n## **0x03 - 在 iOS 中如何使用 SSL Pinning**\n\niOS 中的 SSL Pinning 主要有三种形式：\n\n1. 直接使用 NSURLSession\n2. 配合AFNetworking 使用\n3. 配合 Alamofire 使用\n\nNSURLSession 是 iOS 系统提供的类，AFNetworking 和 Alamofire 识别是 ObjC和 Swift 编写的第三方库，具体实施步骤，可以参考[这篇 blog](https://infinum.co/the-capsized-eight/how-to-make-your-ios-apps-more-secure-with-ssl-pinning)。\n\n## **参考文章：**\n\n- [SSL - 互动百科](http://www.baike.com/wiki/ssl&prd=button_doc_entry)\n- [SSL - 百度百科](http://baike.baidu.com/item/ssl)\n- [How to make your iOS apps more secure with SSL pinning](https://infinum.co/the-capsized-eight/how-to-make-your-ios-apps-more-secure-with-ssl-pinning)\n- [iOS环境下的中间人攻击风险浅析](http://www.secbox.cn/hacker/7846.html)","source":"_posts/iOS-网络安全之SSL-Pinning.md","raw":"---\ntitle: iOS 网络安全之SSL Pinning\ntags:\n  - iOS\ncategories: 开发\nabbrlink: ios-ssl-pinning\ndate: 2016-12-27 11:33:56\n---\n\n## **前言：**\n\nApple要求所有的 App 在2017年1月必须强制使用 ATS(Application Transport Security)，即 App 必须使用 HTTPS，而不能使用 HTTP 网络协议。这是Apple 在 app 安全领域做出的一个重大的举动，HTTP 由于使用明文进行传输，存在很大的安全隐患，网络请求容易被拦截和篡改。HTTPS 在安全性上相较于 HTTP 有很大的提升，依然存在一些问题：如 [MITT](http://www.secbox.cn/hacker/7846.html)(Man-In-The-Middle)中间人攻击和2014年 SSL 的[心脏出血漏洞](http://www.ithome.com/html/soft/80224.htm)。网络安全的问题看似离我们很远，其实就发生在我们身边，对我们的日常生活也会有很大的影响，特别是在移动互联网的浪潮下，人手一台手机的情况下，大家普遍使用支付宝和微信支付来进行支付，能够联网的智能家居产品越来越多的走入到普通家庭中，网络安全是一个需要引起重视的问题。而在网络传输过程中起到安全保障作用的，就是我们今天要讲的 SSL/TLS，当然主要是集中在 iOS 客户端。\n\n<!-- more -->\n\n## **0x00 - 什么是 SSL/TLS**\n\nSSL(Secure Sockets Layer 安全套接层)及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。SSL为Netscape所研发，用以保障在Internet上数据传输的安全，利用数据加密(Encryption)的技术，可确保数据在网络上的传输过程中不会被截取及窃听。SSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。 **— 摘自《互动百科》**\n\n从上面的定义可以看出 SSL 是一个加密层，主要用于信息加密、验证。\n\nSSL 主要提供下面三个服务：\n\n1. **认证用户和服务器**，确保数据发送到正确的客户机和服务器；\n2. **加密数据**以防止数据中途被窃听；\n3. 维护**数据的完整性**，确保数据在传输过程中不被改变。\n\n## **0x01 - 什么是 HTTPS**\n\nHTTPS（Hypertext Transfer Protocol Secure 安全超文本传输协议） 是由 Netscape 开发并内置于其浏览器中，用于对数据进行压缩和解压操作，并返回网络上传送回的结果，HTTPS 实际上运用了 Netscape 的完全套接字层（SSL）作为 HTTP 应用层的子层。\n\n## **0x02 - SSL Pinning 是什么**\n\n当前主流的各大网站 Google、Facebook 等都使用 HTTPS 来保障数据的安全性和私密性，但是在 HTTPS 协议也存在一定的问题，其中广为人知是 MIIT（中间人工具），攻击者在客户端和服务器中进行伪装和欺骗，从而获取敏感信息。\n\nSSL Pinning 是一个业界预防 MIIT 攻击的解决方案，其主要思想是在客户端绑定（Pin）服务器SSL 证书的核心信息，这个解决方案代价小，易于实施，因此被普遍使用。\n\n## **0x03 - 在 iOS 中如何使用 SSL Pinning**\n\niOS 中的 SSL Pinning 主要有三种形式：\n\n1. 直接使用 NSURLSession\n2. 配合AFNetworking 使用\n3. 配合 Alamofire 使用\n\nNSURLSession 是 iOS 系统提供的类，AFNetworking 和 Alamofire 识别是 ObjC和 Swift 编写的第三方库，具体实施步骤，可以参考[这篇 blog](https://infinum.co/the-capsized-eight/how-to-make-your-ios-apps-more-secure-with-ssl-pinning)。\n\n## **参考文章：**\n\n- [SSL - 互动百科](http://www.baike.com/wiki/ssl&prd=button_doc_entry)\n- [SSL - 百度百科](http://baike.baidu.com/item/ssl)\n- [How to make your iOS apps more secure with SSL pinning](https://infinum.co/the-capsized-eight/how-to-make-your-ios-apps-more-secure-with-ssl-pinning)\n- [iOS环境下的中间人攻击风险浅析](http://www.secbox.cn/hacker/7846.html)","slug":"iOS-网络安全之SSL-Pinning","published":1,"updated":"2022-04-05T13:46:10.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6hf968o0015x6u09ahe0s7t","content":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a><strong>前言：</strong></h2><p>Apple要求所有的 App 在2017年1月必须强制使用 ATS(Application Transport Security)，即 App 必须使用 HTTPS，而不能使用 HTTP 网络协议。这是Apple 在 app 安全领域做出的一个重大的举动，HTTP 由于使用明文进行传输，存在很大的安全隐患，网络请求容易被拦截和篡改。HTTPS 在安全性上相较于 HTTP 有很大的提升，依然存在一些问题：如 <a href=\"http://www.secbox.cn/hacker/7846.html\">MITT</a>(Man-In-The-Middle)中间人攻击和2014年 SSL 的<a href=\"http://www.ithome.com/html/soft/80224.htm\">心脏出血漏洞</a>。网络安全的问题看似离我们很远，其实就发生在我们身边，对我们的日常生活也会有很大的影响，特别是在移动互联网的浪潮下，人手一台手机的情况下，大家普遍使用支付宝和微信支付来进行支付，能够联网的智能家居产品越来越多的走入到普通家庭中，网络安全是一个需要引起重视的问题。而在网络传输过程中起到安全保障作用的，就是我们今天要讲的 SSL&#x2F;TLS，当然主要是集中在 iOS 客户端。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"0x00-什么是-SSL-x2F-TLS\"><a href=\"#0x00-什么是-SSL-x2F-TLS\" class=\"headerlink\" title=\"0x00 - 什么是 SSL&#x2F;TLS\"></a><strong>0x00 - 什么是 SSL&#x2F;TLS</strong></h2><p>SSL(Secure Sockets Layer 安全套接层)及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。SSL为Netscape所研发，用以保障在Internet上数据传输的安全，利用数据加密(Encryption)的技术，可确保数据在网络上的传输过程中不会被截取及窃听。SSL协议位于TCP&#x2F;IP协议与各种应用层协议之间，为数据通讯提供安全支持。 <strong>— 摘自《互动百科》</strong></p>\n<p>从上面的定义可以看出 SSL 是一个加密层，主要用于信息加密、验证。</p>\n<p>SSL 主要提供下面三个服务：</p>\n<ol>\n<li><strong>认证用户和服务器</strong>，确保数据发送到正确的客户机和服务器；</li>\n<li><strong>加密数据</strong>以防止数据中途被窃听；</li>\n<li>维护<strong>数据的完整性</strong>，确保数据在传输过程中不被改变。</li>\n</ol>\n<h2 id=\"0x01-什么是-HTTPS\"><a href=\"#0x01-什么是-HTTPS\" class=\"headerlink\" title=\"0x01 - 什么是 HTTPS\"></a><strong>0x01 - 什么是 HTTPS</strong></h2><p>HTTPS（Hypertext Transfer Protocol Secure 安全超文本传输协议） 是由 Netscape 开发并内置于其浏览器中，用于对数据进行压缩和解压操作，并返回网络上传送回的结果，HTTPS 实际上运用了 Netscape 的完全套接字层（SSL）作为 HTTP 应用层的子层。</p>\n<h2 id=\"0x02-SSL-Pinning-是什么\"><a href=\"#0x02-SSL-Pinning-是什么\" class=\"headerlink\" title=\"0x02 - SSL Pinning 是什么\"></a><strong>0x02 - SSL Pinning 是什么</strong></h2><p>当前主流的各大网站 Google、Facebook 等都使用 HTTPS 来保障数据的安全性和私密性，但是在 HTTPS 协议也存在一定的问题，其中广为人知是 MIIT（中间人工具），攻击者在客户端和服务器中进行伪装和欺骗，从而获取敏感信息。</p>\n<p>SSL Pinning 是一个业界预防 MIIT 攻击的解决方案，其主要思想是在客户端绑定（Pin）服务器SSL 证书的核心信息，这个解决方案代价小，易于实施，因此被普遍使用。</p>\n<h2 id=\"0x03-在-iOS-中如何使用-SSL-Pinning\"><a href=\"#0x03-在-iOS-中如何使用-SSL-Pinning\" class=\"headerlink\" title=\"0x03 - 在 iOS 中如何使用 SSL Pinning\"></a><strong>0x03 - 在 iOS 中如何使用 SSL Pinning</strong></h2><p>iOS 中的 SSL Pinning 主要有三种形式：</p>\n<ol>\n<li>直接使用 NSURLSession</li>\n<li>配合AFNetworking 使用</li>\n<li>配合 Alamofire 使用</li>\n</ol>\n<p>NSURLSession 是 iOS 系统提供的类，AFNetworking 和 Alamofire 识别是 ObjC和 Swift 编写的第三方库，具体实施步骤，可以参考<a href=\"https://infinum.co/the-capsized-eight/how-to-make-your-ios-apps-more-secure-with-ssl-pinning\">这篇 blog</a>。</p>\n<h2 id=\"参考文章：\"><a href=\"#参考文章：\" class=\"headerlink\" title=\"参考文章：\"></a><strong>参考文章：</strong></h2><ul>\n<li><a href=\"http://www.baike.com/wiki/ssl&prd=button_doc_entry\">SSL - 互动百科</a></li>\n<li><a href=\"http://baike.baidu.com/item/ssl\">SSL - 百度百科</a></li>\n<li><a href=\"https://infinum.co/the-capsized-eight/how-to-make-your-ios-apps-more-secure-with-ssl-pinning\">How to make your iOS apps more secure with SSL pinning</a></li>\n<li><a href=\"http://www.secbox.cn/hacker/7846.html\">iOS环境下的中间人攻击风险浅析</a></li>\n</ul>\n","site":{"data":{"hexo-leancloud-counter-security-fix":"/* global hexo */\n\n'use strict';\n\nconst AV = require('leancloud-storage');\nconst readlineSync = require('readline-sync');\nconst packageInfo = require('./package.json');\nconst pathFn = require('path');\nconst fs = require('fs');\n\nfunction generate_post_list(locals) {\n    let { config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    var urlsPath = 'leancloud_counter_security_urls.json';\n    var urls = [...locals.posts.toArray()]\n        .filter(x => x.published)\n        .map(x => {\n            return {\n                title: x.title,\n                url  : config.root + x.path\n            };\n        });\n    return {\n        path: urlsPath,\n        data: JSON.stringify(urls)\n    };\n}\n\nhexo.extend.generator.register('leancloud_counter_security_generator', generate_post_list);\n\nfunction cmp(x, y) {\n    if (x.url < y.url) {\n        return -1;\n    } else if (x.url === y.url) {\n        return 0;\n    }\n    return 1;\n}\n\nfunction postOperation(env, cnt, limit, newData, memoData, log) {\n    if (cnt !== limit) return;\n\n    newData.sort(cmp);\n    var sourceDir = env.source_dir;\n    var publicDir = env.public_dir;\n    var memoFile = pathFn.join(sourceDir, 'leancloud.memo');\n    fs.writeFileSync(memoFile, '[\\n');\n\n    var memoIdx = 1;\n    for (var i = 0; newData[i]; i++) {\n        while (memoData[memoIdx] !== ']') {\n            var y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > newData[i].url) break;\n\n            fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n            memoIdx++;\n        }\n        fs.writeFileSync(memoFile, '{\"title\":\"' + newData[i].title + '\",\"url\":\"' + newData[i].url + '\"},\\n', { flag: 'a' });\n    }\n    while (memoData[memoIdx] !== ']') {\n        fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n        memoIdx++;\n    }\n    fs.writeFileSync(memoFile, memoData[memoIdx], { flag: 'a' });\n\n    var srcFile = pathFn.join(sourceDir, 'leancloud.memo');\n    var destFile = pathFn.join(publicDir, 'leancloud.memo');\n    var readStream = fs.createReadStream(srcFile);\n    var writeStream = fs.createWriteStream(destFile);\n    readStream.pipe(writeStream);\n    log.info('leancloud.memo successfully updated.');\n}\n\nasync function sync() {\n    let { log, config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    let { app_id, app_key, server_url } = config.leancloud_counter_security;\n    var publicDir = this.public_dir;\n    var UrlsFile = pathFn.join(publicDir, 'leancloud_counter_security_urls.json');\n    var urls = JSON.parse(fs.readFileSync(UrlsFile, 'utf8'));\n\n    AV.init({\n        appId    : app_id,\n        appKey   : app_key,\n        serverURL: server_url\n    });\n\n    var currentUser = AV.User.current();\n    if (!currentUser) {\n        var userName = config.leancloud_counter_security.username;\n        var passWord = config.leancloud_counter_security.password;\n        if (!userName) {\n            userName = readlineSync.question('Enter your username: ');\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        } else if (!passWord) {\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        }\n        await AV.User.logIn(userName, passWord).then(loginedUser => {\n            log.info('Logined as: ' + loginedUser.getUsername());\n        }, error => {\n            log.error(error);\n        });\n    }\n\n    log.info('Now syncing your posts list to leancloud counter...');\n    var Counter = AV.Object.extend('Counter');\n    var memoFile = pathFn.join(publicDir, 'leancloud.memo');\n    if (!fs.existsSync(memoFile)) {\n        fs.writeFileSync(memoFile, '[\\n]');\n    }\n    var memoData = fs.readFileSync(memoFile, 'utf-8').split('\\n');\n    var memoIdx = 1;\n    var newData = [];\n    var cnt = 0;\n    var limit = 0;\n    var env = this;\n    urls.sort(cmp).forEach(x => {\n        var y = {};\n        y.title = '';\n        y.url = '';\n        var flag = false;\n        while (memoData[memoIdx] !== ']') {\n            y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > x.url) break;\n            if (y.url === x.url && y.title === x.title) {\n                flag = true;\n                break;\n            }\n            memoIdx++;\n        }\n        if (flag) return;\n\n        log.info('Dealing with record of ' + x.title);\n        limit++;\n        var query = new AV.Query('Counter');\n        query.equalTo('url', x.url);\n        query.count().then(count => {\n            if (count === 0) {\n                var counter = new Counter();\n                counter.set('url', x.url);\n                counter.set('title', x.title);\n                counter.set('time', 0);\n                counter.save().then(obj => {\n                    log.info(x.title + ' is saved as: ' + obj.id);\n                    newData.push(x);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                }, error => {\n                    log.error(error);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                });\n            } else {\n                newData.push(x);\n                cnt++;\n                postOperation(env, cnt, limit, newData, memoData, log);\n            }\n        }, error => {\n            log.error(error);\n            cnt++;\n            postOperation(env, cnt, limit, newData, memoData, log);\n        });\n    });\n}\n\nhexo.extend.deployer.register('leancloud_counter_security_sync', sync);\n\nvar commandOptions = {\n    desc     : packageInfo.description,\n    usage    : ' <argument>',\n    arguments: [\n        {\n            name: 'register | r <username> <password>',\n            desc: 'Register a new user.'\n        }\n    ]\n};\n\nfunction commandFunc(args) {\n    let { log, config } = this;\n\n    if (args._.length !== 3) {\n        log.error('Too Few or Many Arguments.');\n    } else if (args._[0] === 'register' || args._[0] === 'r') {\n        let { app_id, app_key, server_url } = config.leancloud_counter_security;\n        AV.init({\n            appId    : app_id,\n            appKey   : app_key,\n            serverURL: server_url\n        });\n\n        var user = new AV.User();\n        user.setUsername(String(args._[1]));\n        user.setPassword(String(args._[2]));\n        user.signUp().then(loginedUser => {\n            log.info(loginedUser.getUsername() + ' is successfully signed up');\n        }, error => {\n            log.error(error);\n        });\n    } else {\n        log.error('Unknown Command.');\n    }\n}\n\nhexo.extend.console.register('lc-counter', 'hexo-leancloud-counter-security', commandOptions, commandFunc);\n"}},"length":1426,"excerpt":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a><strong>前言：</strong></h2><p>Apple要求所有的 App 在2017年1月必须强制使用 ATS(Application Transport Security)，即 App 必须使用 HTTPS，而不能使用 HTTP 网络协议。这是Apple 在 app 安全领域做出的一个重大的举动，HTTP 由于使用明文进行传输，存在很大的安全隐患，网络请求容易被拦截和篡改。HTTPS 在安全性上相较于 HTTP 有很大的提升，依然存在一些问题：如 <a href=\"http://www.secbox.cn/hacker/7846.html\">MITT</a>(Man-In-The-Middle)中间人攻击和2014年 SSL 的<a href=\"http://www.ithome.com/html/soft/80224.htm\">心脏出血漏洞</a>。网络安全的问题看似离我们很远，其实就发生在我们身边，对我们的日常生活也会有很大的影响，特别是在移动互联网的浪潮下，人手一台手机的情况下，大家普遍使用支付宝和微信支付来进行支付，能够联网的智能家居产品越来越多的走入到普通家庭中，网络安全是一个需要引起重视的问题。而在网络传输过程中起到安全保障作用的，就是我们今天要讲的 SSL&#x2F;TLS，当然主要是集中在 iOS 客户端。</p>","more":"<h2 id=\"0x00-什么是-SSL-x2F-TLS\"><a href=\"#0x00-什么是-SSL-x2F-TLS\" class=\"headerlink\" title=\"0x00 - 什么是 SSL&#x2F;TLS\"></a><strong>0x00 - 什么是 SSL&#x2F;TLS</strong></h2><p>SSL(Secure Sockets Layer 安全套接层)及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。SSL为Netscape所研发，用以保障在Internet上数据传输的安全，利用数据加密(Encryption)的技术，可确保数据在网络上的传输过程中不会被截取及窃听。SSL协议位于TCP&#x2F;IP协议与各种应用层协议之间，为数据通讯提供安全支持。 <strong>— 摘自《互动百科》</strong></p>\n<p>从上面的定义可以看出 SSL 是一个加密层，主要用于信息加密、验证。</p>\n<p>SSL 主要提供下面三个服务：</p>\n<ol>\n<li><strong>认证用户和服务器</strong>，确保数据发送到正确的客户机和服务器；</li>\n<li><strong>加密数据</strong>以防止数据中途被窃听；</li>\n<li>维护<strong>数据的完整性</strong>，确保数据在传输过程中不被改变。</li>\n</ol>\n<h2 id=\"0x01-什么是-HTTPS\"><a href=\"#0x01-什么是-HTTPS\" class=\"headerlink\" title=\"0x01 - 什么是 HTTPS\"></a><strong>0x01 - 什么是 HTTPS</strong></h2><p>HTTPS（Hypertext Transfer Protocol Secure 安全超文本传输协议） 是由 Netscape 开发并内置于其浏览器中，用于对数据进行压缩和解压操作，并返回网络上传送回的结果，HTTPS 实际上运用了 Netscape 的完全套接字层（SSL）作为 HTTP 应用层的子层。</p>\n<h2 id=\"0x02-SSL-Pinning-是什么\"><a href=\"#0x02-SSL-Pinning-是什么\" class=\"headerlink\" title=\"0x02 - SSL Pinning 是什么\"></a><strong>0x02 - SSL Pinning 是什么</strong></h2><p>当前主流的各大网站 Google、Facebook 等都使用 HTTPS 来保障数据的安全性和私密性，但是在 HTTPS 协议也存在一定的问题，其中广为人知是 MIIT（中间人工具），攻击者在客户端和服务器中进行伪装和欺骗，从而获取敏感信息。</p>\n<p>SSL Pinning 是一个业界预防 MIIT 攻击的解决方案，其主要思想是在客户端绑定（Pin）服务器SSL 证书的核心信息，这个解决方案代价小，易于实施，因此被普遍使用。</p>\n<h2 id=\"0x03-在-iOS-中如何使用-SSL-Pinning\"><a href=\"#0x03-在-iOS-中如何使用-SSL-Pinning\" class=\"headerlink\" title=\"0x03 - 在 iOS 中如何使用 SSL Pinning\"></a><strong>0x03 - 在 iOS 中如何使用 SSL Pinning</strong></h2><p>iOS 中的 SSL Pinning 主要有三种形式：</p>\n<ol>\n<li>直接使用 NSURLSession</li>\n<li>配合AFNetworking 使用</li>\n<li>配合 Alamofire 使用</li>\n</ol>\n<p>NSURLSession 是 iOS 系统提供的类，AFNetworking 和 Alamofire 识别是 ObjC和 Swift 编写的第三方库，具体实施步骤，可以参考<a href=\"https://infinum.co/the-capsized-eight/how-to-make-your-ios-apps-more-secure-with-ssl-pinning\">这篇 blog</a>。</p>\n<h2 id=\"参考文章：\"><a href=\"#参考文章：\" class=\"headerlink\" title=\"参考文章：\"></a><strong>参考文章：</strong></h2><ul>\n<li><a href=\"http://www.baike.com/wiki/ssl&prd=button_doc_entry\">SSL - 互动百科</a></li>\n<li><a href=\"http://baike.baidu.com/item/ssl\">SSL - 百度百科</a></li>\n<li><a href=\"https://infinum.co/the-capsized-eight/how-to-make-your-ios-apps-more-secure-with-ssl-pinning\">How to make your iOS apps more secure with SSL pinning</a></li>\n<li><a href=\"http://www.secbox.cn/hacker/7846.html\">iOS环境下的中间人攻击风险浅析</a></li>\n</ul>"},{"title":"使用hexo+github page搭建个人博客","abbrlink":"hexo_build","date":"2016-11-12T06:36:16.000Z","_content":"\n我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。\n\n2018年2月18日更新：域名绑定和https 访问问题。\n\n<!-- more -->\n\n## 首先简单介绍下github page和hexo：\n\n- Github Page: 使用github repo的静态网页工具，可以无缝地与github一起使用，每个github帐号都有400M的免费空间来存放博客文件，具体的使用说明可以参看[github page网站](https://pages.github.com/)\n- hexo:一个node.js的框架，使用npm进行安装和配置，能够快速的搭建静态博客。主要特点是搭建快速、支持markdown编辑、一键部署、本地预览。\n- 使用github page+hexo主要是考虑到能够快速搭建、维护方便、技术栈匹配。\n\n\n\n下面来说具体的搭建步骤，这里使用**MAC的开发环境**：\n\n- 配置github repo：\n  - 新建一个username.github.io的仓库，注意一定要使用自己的**github用户名**\n  - 设置ssh key：参见[github ssh教程](https://help.github.com/articles/generating-an-ssh-key/)\n  - 这里需要说明的是：github page默认使用的是**master分支**，在master分支中的**index.html**文件会被解析并且作为网页的入口。\n\n\n- 安装Hexo命令行工具hexo-cli\n  - 参考[官方教程](https://hexo.io/docs/index.html)\n  - 安装git、Node.js等工具\n  - 安装hexo-cli命令行工具：npm install -g hexo-cli\n    - hexo-cli是hexo的命令行工具，用于执行hexo init\n  - Setup Hexo:\n    - 命令行为：hexo init <folder>\n    - 使用hexo的模板生成项目，下面几个文件比较重要：\n      - package.json: Node js用于指定依赖包的配置文件，在不清楚的情况下，不要随意修改。\n      - _config.yml: hexo的配置文件，可以设置网站title、主题、字体、制定域名等。\n      - source: Blog的源文件目录，使用hexo new生成的md文件存放在这个目录中。\n      - scaffolds：模板文件，hexo new使用它来生成新的模板md。\n      - themes：主题目录，设置网站版式。\n\n- 写Blog：\n  - hexo new post_title：生成新的模板文件。\n  - 注意：这里使用hexo命令和上面的hexo init不是同一个命令，这个hexo是在setup过程中下载的npm包，**需要在Blog这个目录中使用才有效。**\n  - 生成的文件在source/_post目录中，使用markdown编辑器来写博客。\n\n- 本机调试：\n  - 在写blog的过程中，可以直接在本机进行预览：hexo serve\n  - 默认使用4000端口，还可以[设置其他的端口](https://hexo.io/docs/server.html#Custom-IP)\n\n- 生成Blog文件：\n  - 生成编译后的blog：hexo generate\n  - 生成后的文件存放在public目录中\n  - 也可以使用下面的命令直接完成发布: hexo generate —deploy\n\n- 发布blog：\n  - 使用hexo deploy完成发布\n  - 第一次发布之前，需要修改_config.yml文件，参见：[hexo deploy](https://hexo.io/docs/deployment.html#Git)\n\n- 最后要说下Troubleshooting和需要注意的地方:\n  - hexo new不起作用\n    - 我们需要另外开一个branch来进行blog的写作（如source分支），然后使用hexo deploy到master分支上面。在不同的分支进行切换的时候，由于.gitignore文件不一样，导致我们可能在master分支上面删除了一些source分支上面重要的文件，如node_modules目录，则需要我们在切换到source分支的时候，重新下载npm包：npm i\n  - hexo deploy失败\n    - 需要安装hexo-deployer-git包，参考 [hexo deploy](https://hexo.io/docs/deployment.html#Git)\n  - master分支的使用方法\n    - master分支上面**不要放文件**，这个分支在使用hexo deploy之后自动更新，所以会覆盖我们自己的文件。\n  - 使用source分支来进行写作\n    - 上面提高了不能使用master分支，那么就需要我们使用别的分支来进行hexo的搭建和写作，我个人使用source分支，当然你也可以取一个自己喜欢的名字。\n\n  ------\n\n  ## — 2018年2月18日更新：\n\n- ### **绑定域名**：\n\n  绑定域名主要分为3个步骤：申请域名、Github Page 设置域名、域名解析\n\n  - 申请域名\n\n    - 国内：[万网](https://wanwang.aliyun.com/domain/com/)、[新网](http://www.xinnet.com/domain/domain.html)\n\n    国内域名申请有一些繁杂的手续和步骤，特别是域名备案。\n\n    - 国外：[GoDaddy](https://www.godaddy.com/)、[namecheap](https://www.namecheap.com)、[name](https://www.name.com/)、[enom](http://www.enom.com/)\n    - 国外的域名则相对操作简单很多，一般只需要提供联系方式即可，主要注意的是：Godaddy没有提供免费的域名信息保护功能，需要付费购买，否者别人可以通过 whois 查到域名持有者的信息。\n\n  - 设置 Github Page 的域名\n\n    - Github Page提供域名比对的功能，只需要在网站的根目录中添加 CNAME（全部大写）文件，填写自己申请的域名（一般是[顶级域名](http://baike.baidu.com/link?url=nBRFxvXXBbhf6esboaTgsAPqBASt6IT7cXro_okFQ9Xe8MOEaCnFOuJ1jxg0BRirAdJPU4XRrKZkYZSKzry4EmR21yJdMGuqG2TzJigDYipm0ZAAZTQGKg04IqSgAQ6E)）即可，不需要带 https://（如 baidu.com，而不是 http://www.baidu.com），github page 会自动把 www的请求重定向到顶级域名下。\n    - 使用 hexo 搭建起来的博客，则是在 source 目录中，来添加 CNAME 文件，然后部署到 github 上面（命令行为 hexo d -g）。\n\n  - 域名解析\n\n    - 申请好的域名，一般由提供商来进行解析（把域名映射为 IP 地址），我们这里不适用 Godaddy 提供的域名解析（NameServer） 服务，而是使用 NDSPod 作为我们的域名解析商。\n    - 申请 NDSPod 账户\n    - 在 NDSPod 添加域名、添加 A/CNAME 记录\n      - A 记录\n      - CNAME 记录\n    - 在 Godaddy 绑定 DNSPod的域名解析地址\n    - wait a moment\n\n- ### **HTTPS问题：**\n\n  - github page 的 ssl证书绑定的是 github.io 的域名。如果在 chrome 中使用 https 访问自定义的域名，会提示**NET::ERR_CERT_COMMON_NAME_INVALID**。\n  - CloudFlare 来做域名解析，开启 ssl 为 Flexble 之后，可以让chrome和 CloudFlare 之间使用 https访问，而CloudFlare 与 github page 中继续使用 http 来访问。\n  - 参考文章：[在GitHub Pages上使用CloudFlare https CDN](https://blog.chionlab.moe/2016/01/28/github-pages-with-https/)","source":"_posts/使用hexo-github-page搭建个人博客.md","raw":"---\ntitle: 使用hexo+github page搭建个人博客\ntags:\n  - hexo\nabbrlink: hexo_build\ndate: 2016-11-12 14:36:16\n---\n\n我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。\n\n2018年2月18日更新：域名绑定和https 访问问题。\n\n<!-- more -->\n\n## 首先简单介绍下github page和hexo：\n\n- Github Page: 使用github repo的静态网页工具，可以无缝地与github一起使用，每个github帐号都有400M的免费空间来存放博客文件，具体的使用说明可以参看[github page网站](https://pages.github.com/)\n- hexo:一个node.js的框架，使用npm进行安装和配置，能够快速的搭建静态博客。主要特点是搭建快速、支持markdown编辑、一键部署、本地预览。\n- 使用github page+hexo主要是考虑到能够快速搭建、维护方便、技术栈匹配。\n\n\n\n下面来说具体的搭建步骤，这里使用**MAC的开发环境**：\n\n- 配置github repo：\n  - 新建一个username.github.io的仓库，注意一定要使用自己的**github用户名**\n  - 设置ssh key：参见[github ssh教程](https://help.github.com/articles/generating-an-ssh-key/)\n  - 这里需要说明的是：github page默认使用的是**master分支**，在master分支中的**index.html**文件会被解析并且作为网页的入口。\n\n\n- 安装Hexo命令行工具hexo-cli\n  - 参考[官方教程](https://hexo.io/docs/index.html)\n  - 安装git、Node.js等工具\n  - 安装hexo-cli命令行工具：npm install -g hexo-cli\n    - hexo-cli是hexo的命令行工具，用于执行hexo init\n  - Setup Hexo:\n    - 命令行为：hexo init <folder>\n    - 使用hexo的模板生成项目，下面几个文件比较重要：\n      - package.json: Node js用于指定依赖包的配置文件，在不清楚的情况下，不要随意修改。\n      - _config.yml: hexo的配置文件，可以设置网站title、主题、字体、制定域名等。\n      - source: Blog的源文件目录，使用hexo new生成的md文件存放在这个目录中。\n      - scaffolds：模板文件，hexo new使用它来生成新的模板md。\n      - themes：主题目录，设置网站版式。\n\n- 写Blog：\n  - hexo new post_title：生成新的模板文件。\n  - 注意：这里使用hexo命令和上面的hexo init不是同一个命令，这个hexo是在setup过程中下载的npm包，**需要在Blog这个目录中使用才有效。**\n  - 生成的文件在source/_post目录中，使用markdown编辑器来写博客。\n\n- 本机调试：\n  - 在写blog的过程中，可以直接在本机进行预览：hexo serve\n  - 默认使用4000端口，还可以[设置其他的端口](https://hexo.io/docs/server.html#Custom-IP)\n\n- 生成Blog文件：\n  - 生成编译后的blog：hexo generate\n  - 生成后的文件存放在public目录中\n  - 也可以使用下面的命令直接完成发布: hexo generate —deploy\n\n- 发布blog：\n  - 使用hexo deploy完成发布\n  - 第一次发布之前，需要修改_config.yml文件，参见：[hexo deploy](https://hexo.io/docs/deployment.html#Git)\n\n- 最后要说下Troubleshooting和需要注意的地方:\n  - hexo new不起作用\n    - 我们需要另外开一个branch来进行blog的写作（如source分支），然后使用hexo deploy到master分支上面。在不同的分支进行切换的时候，由于.gitignore文件不一样，导致我们可能在master分支上面删除了一些source分支上面重要的文件，如node_modules目录，则需要我们在切换到source分支的时候，重新下载npm包：npm i\n  - hexo deploy失败\n    - 需要安装hexo-deployer-git包，参考 [hexo deploy](https://hexo.io/docs/deployment.html#Git)\n  - master分支的使用方法\n    - master分支上面**不要放文件**，这个分支在使用hexo deploy之后自动更新，所以会覆盖我们自己的文件。\n  - 使用source分支来进行写作\n    - 上面提高了不能使用master分支，那么就需要我们使用别的分支来进行hexo的搭建和写作，我个人使用source分支，当然你也可以取一个自己喜欢的名字。\n\n  ------\n\n  ## — 2018年2月18日更新：\n\n- ### **绑定域名**：\n\n  绑定域名主要分为3个步骤：申请域名、Github Page 设置域名、域名解析\n\n  - 申请域名\n\n    - 国内：[万网](https://wanwang.aliyun.com/domain/com/)、[新网](http://www.xinnet.com/domain/domain.html)\n\n    国内域名申请有一些繁杂的手续和步骤，特别是域名备案。\n\n    - 国外：[GoDaddy](https://www.godaddy.com/)、[namecheap](https://www.namecheap.com)、[name](https://www.name.com/)、[enom](http://www.enom.com/)\n    - 国外的域名则相对操作简单很多，一般只需要提供联系方式即可，主要注意的是：Godaddy没有提供免费的域名信息保护功能，需要付费购买，否者别人可以通过 whois 查到域名持有者的信息。\n\n  - 设置 Github Page 的域名\n\n    - Github Page提供域名比对的功能，只需要在网站的根目录中添加 CNAME（全部大写）文件，填写自己申请的域名（一般是[顶级域名](http://baike.baidu.com/link?url=nBRFxvXXBbhf6esboaTgsAPqBASt6IT7cXro_okFQ9Xe8MOEaCnFOuJ1jxg0BRirAdJPU4XRrKZkYZSKzry4EmR21yJdMGuqG2TzJigDYipm0ZAAZTQGKg04IqSgAQ6E)）即可，不需要带 https://（如 baidu.com，而不是 http://www.baidu.com），github page 会自动把 www的请求重定向到顶级域名下。\n    - 使用 hexo 搭建起来的博客，则是在 source 目录中，来添加 CNAME 文件，然后部署到 github 上面（命令行为 hexo d -g）。\n\n  - 域名解析\n\n    - 申请好的域名，一般由提供商来进行解析（把域名映射为 IP 地址），我们这里不适用 Godaddy 提供的域名解析（NameServer） 服务，而是使用 NDSPod 作为我们的域名解析商。\n    - 申请 NDSPod 账户\n    - 在 NDSPod 添加域名、添加 A/CNAME 记录\n      - A 记录\n      - CNAME 记录\n    - 在 Godaddy 绑定 DNSPod的域名解析地址\n    - wait a moment\n\n- ### **HTTPS问题：**\n\n  - github page 的 ssl证书绑定的是 github.io 的域名。如果在 chrome 中使用 https 访问自定义的域名，会提示**NET::ERR_CERT_COMMON_NAME_INVALID**。\n  - CloudFlare 来做域名解析，开启 ssl 为 Flexble 之后，可以让chrome和 CloudFlare 之间使用 https访问，而CloudFlare 与 github page 中继续使用 http 来访问。\n  - 参考文章：[在GitHub Pages上使用CloudFlare https CDN](https://blog.chionlab.moe/2016/01/28/github-pages-with-https/)","slug":"使用hexo-github-page搭建个人博客","published":1,"updated":"2022-04-05T13:46:10.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6hf968o0018x6u0f0r77u1t","content":"<p>我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。</p>\n<p>2018年2月18日更新：域名绑定和https 访问问题。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"首先简单介绍下github-page和hexo：\"><a href=\"#首先简单介绍下github-page和hexo：\" class=\"headerlink\" title=\"首先简单介绍下github page和hexo：\"></a>首先简单介绍下github page和hexo：</h2><ul>\n<li>Github Page: 使用github repo的静态网页工具，可以无缝地与github一起使用，每个github帐号都有400M的免费空间来存放博客文件，具体的使用说明可以参看<a href=\"https://pages.github.com/\">github page网站</a></li>\n<li>hexo:一个node.js的框架，使用npm进行安装和配置，能够快速的搭建静态博客。主要特点是搭建快速、支持markdown编辑、一键部署、本地预览。</li>\n<li>使用github page+hexo主要是考虑到能够快速搭建、维护方便、技术栈匹配。</li>\n</ul>\n<p>下面来说具体的搭建步骤，这里使用<strong>MAC的开发环境</strong>：</p>\n<ul>\n<li><p>配置github repo：</p>\n<ul>\n<li>新建一个username.github.io的仓库，注意一定要使用自己的<strong>github用户名</strong></li>\n<li>设置ssh key：参见<a href=\"https://help.github.com/articles/generating-an-ssh-key/\">github ssh教程</a></li>\n<li>这里需要说明的是：github page默认使用的是<strong>master分支</strong>，在master分支中的<strong>index.html</strong>文件会被解析并且作为网页的入口。</li>\n</ul>\n</li>\n<li><p>安装Hexo命令行工具hexo-cli</p>\n<ul>\n<li>参考<a href=\"https://hexo.io/docs/index.html\">官方教程</a></li>\n<li>安装git、Node.js等工具</li>\n<li>安装hexo-cli命令行工具：npm install -g hexo-cli<ul>\n<li>hexo-cli是hexo的命令行工具，用于执行hexo init</li>\n</ul>\n</li>\n<li>Setup Hexo:<ul>\n<li>命令行为：hexo init <folder></li>\n<li>使用hexo的模板生成项目，下面几个文件比较重要：<ul>\n<li>package.json: Node js用于指定依赖包的配置文件，在不清楚的情况下，不要随意修改。</li>\n<li>_config.yml: hexo的配置文件，可以设置网站title、主题、字体、制定域名等。</li>\n<li>source: Blog的源文件目录，使用hexo new生成的md文件存放在这个目录中。</li>\n<li>scaffolds：模板文件，hexo new使用它来生成新的模板md。</li>\n<li>themes：主题目录，设置网站版式。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>写Blog：</p>\n<ul>\n<li>hexo new post_title：生成新的模板文件。</li>\n<li>注意：这里使用hexo命令和上面的hexo init不是同一个命令，这个hexo是在setup过程中下载的npm包，<strong>需要在Blog这个目录中使用才有效。</strong></li>\n<li>生成的文件在source&#x2F;_post目录中，使用markdown编辑器来写博客。</li>\n</ul>\n</li>\n<li><p>本机调试：</p>\n<ul>\n<li>在写blog的过程中，可以直接在本机进行预览：hexo serve</li>\n<li>默认使用4000端口，还可以<a href=\"https://hexo.io/docs/server.html#Custom-IP\">设置其他的端口</a></li>\n</ul>\n</li>\n<li><p>生成Blog文件：</p>\n<ul>\n<li>生成编译后的blog：hexo generate</li>\n<li>生成后的文件存放在public目录中</li>\n<li>也可以使用下面的命令直接完成发布: hexo generate —deploy</li>\n</ul>\n</li>\n<li><p>发布blog：</p>\n<ul>\n<li>使用hexo deploy完成发布</li>\n<li>第一次发布之前，需要修改_config.yml文件，参见：<a href=\"https://hexo.io/docs/deployment.html#Git\">hexo deploy</a></li>\n</ul>\n</li>\n<li><p>最后要说下Troubleshooting和需要注意的地方:</p>\n<ul>\n<li>hexo new不起作用<ul>\n<li>我们需要另外开一个branch来进行blog的写作（如source分支），然后使用hexo deploy到master分支上面。在不同的分支进行切换的时候，由于.gitignore文件不一样，导致我们可能在master分支上面删除了一些source分支上面重要的文件，如node_modules目录，则需要我们在切换到source分支的时候，重新下载npm包：npm i</li>\n</ul>\n</li>\n<li>hexo deploy失败<ul>\n<li>需要安装hexo-deployer-git包，参考 <a href=\"https://hexo.io/docs/deployment.html#Git\">hexo deploy</a></li>\n</ul>\n</li>\n<li>master分支的使用方法<ul>\n<li>master分支上面<strong>不要放文件</strong>，这个分支在使用hexo deploy之后自动更新，所以会覆盖我们自己的文件。</li>\n</ul>\n</li>\n<li>使用source分支来进行写作<ul>\n<li>上面提高了不能使用master分支，那么就需要我们使用别的分支来进行hexo的搭建和写作，我个人使用source分支，当然你也可以取一个自己喜欢的名字。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"—-2018年2月18日更新：\"><a href=\"#—-2018年2月18日更新：\" class=\"headerlink\" title=\"— 2018年2月18日更新：\"></a>— 2018年2月18日更新：</h2></li>\n<li><h3 id=\"绑定域名：\"><a href=\"#绑定域名：\" class=\"headerlink\" title=\"绑定域名：\"></a><strong>绑定域名</strong>：</h3><p>绑定域名主要分为3个步骤：申请域名、Github Page 设置域名、域名解析</p>\n<ul>\n<li><p>申请域名</p>\n<ul>\n<li>国内：<a href=\"https://wanwang.aliyun.com/domain/com/\">万网</a>、<a href=\"http://www.xinnet.com/domain/domain.html\">新网</a></li>\n</ul>\n<p>国内域名申请有一些繁杂的手续和步骤，特别是域名备案。</p>\n<ul>\n<li>国外：<a href=\"https://www.godaddy.com/\">GoDaddy</a>、<a href=\"https://www.namecheap.com/\">namecheap</a>、<a href=\"https://www.name.com/\">name</a>、<a href=\"http://www.enom.com/\">enom</a></li>\n<li>国外的域名则相对操作简单很多，一般只需要提供联系方式即可，主要注意的是：Godaddy没有提供免费的域名信息保护功能，需要付费购买，否者别人可以通过 whois 查到域名持有者的信息。</li>\n</ul>\n</li>\n<li><p>设置 Github Page 的域名</p>\n<ul>\n<li>Github Page提供域名比对的功能，只需要在网站的根目录中添加 CNAME（全部大写）文件，填写自己申请的域名（一般是<a href=\"http://baike.baidu.com/link?url=nBRFxvXXBbhf6esboaTgsAPqBASt6IT7cXro_okFQ9Xe8MOEaCnFOuJ1jxg0BRirAdJPU4XRrKZkYZSKzry4EmR21yJdMGuqG2TzJigDYipm0ZAAZTQGKg04IqSgAQ6E\">顶级域名</a>）即可，不需要带 https:&#x2F;&#x2F;（如 baidu.com，而不是 <a href=\"http://www.baidu.com),github/\">http://www.baidu.com），github</a> page 会自动把 www的请求重定向到顶级域名下。</li>\n<li>使用 hexo 搭建起来的博客，则是在 source 目录中，来添加 CNAME 文件，然后部署到 github 上面（命令行为 hexo d -g）。</li>\n</ul>\n</li>\n<li><p>域名解析</p>\n<ul>\n<li>申请好的域名，一般由提供商来进行解析（把域名映射为 IP 地址），我们这里不适用 Godaddy 提供的域名解析（NameServer） 服务，而是使用 NDSPod 作为我们的域名解析商。</li>\n<li>申请 NDSPod 账户</li>\n<li>在 NDSPod 添加域名、添加 A&#x2F;CNAME 记录<ul>\n<li>A 记录</li>\n<li>CNAME 记录</li>\n</ul>\n</li>\n<li>在 Godaddy 绑定 DNSPod的域名解析地址</li>\n<li>wait a moment</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"HTTPS问题：\"><a href=\"#HTTPS问题：\" class=\"headerlink\" title=\"HTTPS问题：\"></a><strong>HTTPS问题：</strong></h3><ul>\n<li>github page 的 ssl证书绑定的是 github.io 的域名。如果在 chrome 中使用 https 访问自定义的域名，会提示<strong>NET::ERR_CERT_COMMON_NAME_INVALID</strong>。</li>\n<li>CloudFlare 来做域名解析，开启 ssl 为 Flexble 之后，可以让chrome和 CloudFlare 之间使用 https访问，而CloudFlare 与 github page 中继续使用 http 来访问。</li>\n<li>参考文章：<a href=\"https://blog.chionlab.moe/2016/01/28/github-pages-with-https/\">在GitHub Pages上使用CloudFlare https CDN</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"hexo-leancloud-counter-security-fix":"/* global hexo */\n\n'use strict';\n\nconst AV = require('leancloud-storage');\nconst readlineSync = require('readline-sync');\nconst packageInfo = require('./package.json');\nconst pathFn = require('path');\nconst fs = require('fs');\n\nfunction generate_post_list(locals) {\n    let { config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    var urlsPath = 'leancloud_counter_security_urls.json';\n    var urls = [...locals.posts.toArray()]\n        .filter(x => x.published)\n        .map(x => {\n            return {\n                title: x.title,\n                url  : config.root + x.path\n            };\n        });\n    return {\n        path: urlsPath,\n        data: JSON.stringify(urls)\n    };\n}\n\nhexo.extend.generator.register('leancloud_counter_security_generator', generate_post_list);\n\nfunction cmp(x, y) {\n    if (x.url < y.url) {\n        return -1;\n    } else if (x.url === y.url) {\n        return 0;\n    }\n    return 1;\n}\n\nfunction postOperation(env, cnt, limit, newData, memoData, log) {\n    if (cnt !== limit) return;\n\n    newData.sort(cmp);\n    var sourceDir = env.source_dir;\n    var publicDir = env.public_dir;\n    var memoFile = pathFn.join(sourceDir, 'leancloud.memo');\n    fs.writeFileSync(memoFile, '[\\n');\n\n    var memoIdx = 1;\n    for (var i = 0; newData[i]; i++) {\n        while (memoData[memoIdx] !== ']') {\n            var y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > newData[i].url) break;\n\n            fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n            memoIdx++;\n        }\n        fs.writeFileSync(memoFile, '{\"title\":\"' + newData[i].title + '\",\"url\":\"' + newData[i].url + '\"},\\n', { flag: 'a' });\n    }\n    while (memoData[memoIdx] !== ']') {\n        fs.writeFileSync(memoFile, memoData[memoIdx] + '\\n', { flag: 'a' });\n        memoIdx++;\n    }\n    fs.writeFileSync(memoFile, memoData[memoIdx], { flag: 'a' });\n\n    var srcFile = pathFn.join(sourceDir, 'leancloud.memo');\n    var destFile = pathFn.join(publicDir, 'leancloud.memo');\n    var readStream = fs.createReadStream(srcFile);\n    var writeStream = fs.createWriteStream(destFile);\n    readStream.pipe(writeStream);\n    log.info('leancloud.memo successfully updated.');\n}\n\nasync function sync() {\n    let { log, config } = this;\n\n    if (!config.leancloud_counter_security.enable_sync) return;\n\n    let { app_id, app_key, server_url } = config.leancloud_counter_security;\n    var publicDir = this.public_dir;\n    var UrlsFile = pathFn.join(publicDir, 'leancloud_counter_security_urls.json');\n    var urls = JSON.parse(fs.readFileSync(UrlsFile, 'utf8'));\n\n    AV.init({\n        appId    : app_id,\n        appKey   : app_key,\n        serverURL: server_url\n    });\n\n    var currentUser = AV.User.current();\n    if (!currentUser) {\n        var userName = config.leancloud_counter_security.username;\n        var passWord = config.leancloud_counter_security.password;\n        if (!userName) {\n            userName = readlineSync.question('Enter your username: ');\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        } else if (!passWord) {\n            passWord = readlineSync.question('Enter your password: ', { hideEchoBack: true });\n        }\n        await AV.User.logIn(userName, passWord).then(loginedUser => {\n            log.info('Logined as: ' + loginedUser.getUsername());\n        }, error => {\n            log.error(error);\n        });\n    }\n\n    log.info('Now syncing your posts list to leancloud counter...');\n    var Counter = AV.Object.extend('Counter');\n    var memoFile = pathFn.join(publicDir, 'leancloud.memo');\n    if (!fs.existsSync(memoFile)) {\n        fs.writeFileSync(memoFile, '[\\n]');\n    }\n    var memoData = fs.readFileSync(memoFile, 'utf-8').split('\\n');\n    var memoIdx = 1;\n    var newData = [];\n    var cnt = 0;\n    var limit = 0;\n    var env = this;\n    urls.sort(cmp).forEach(x => {\n        var y = {};\n        y.title = '';\n        y.url = '';\n        var flag = false;\n        while (memoData[memoIdx] !== ']') {\n            y = JSON.parse(memoData[memoIdx].substring(0, memoData[memoIdx].length - 1));\n            if (y.url > x.url) break;\n            if (y.url === x.url && y.title === x.title) {\n                flag = true;\n                break;\n            }\n            memoIdx++;\n        }\n        if (flag) return;\n\n        log.info('Dealing with record of ' + x.title);\n        limit++;\n        var query = new AV.Query('Counter');\n        query.equalTo('url', x.url);\n        query.count().then(count => {\n            if (count === 0) {\n                var counter = new Counter();\n                counter.set('url', x.url);\n                counter.set('title', x.title);\n                counter.set('time', 0);\n                counter.save().then(obj => {\n                    log.info(x.title + ' is saved as: ' + obj.id);\n                    newData.push(x);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                }, error => {\n                    log.error(error);\n                    cnt++;\n                    postOperation(env, cnt, limit, newData, memoData, log);\n                });\n            } else {\n                newData.push(x);\n                cnt++;\n                postOperation(env, cnt, limit, newData, memoData, log);\n            }\n        }, error => {\n            log.error(error);\n            cnt++;\n            postOperation(env, cnt, limit, newData, memoData, log);\n        });\n    });\n}\n\nhexo.extend.deployer.register('leancloud_counter_security_sync', sync);\n\nvar commandOptions = {\n    desc     : packageInfo.description,\n    usage    : ' <argument>',\n    arguments: [\n        {\n            name: 'register | r <username> <password>',\n            desc: 'Register a new user.'\n        }\n    ]\n};\n\nfunction commandFunc(args) {\n    let { log, config } = this;\n\n    if (args._.length !== 3) {\n        log.error('Too Few or Many Arguments.');\n    } else if (args._[0] === 'register' || args._[0] === 'r') {\n        let { app_id, app_key, server_url } = config.leancloud_counter_security;\n        AV.init({\n            appId    : app_id,\n            appKey   : app_key,\n            serverURL: server_url\n        });\n\n        var user = new AV.User();\n        user.setUsername(String(args._[1]));\n        user.setPassword(String(args._[2]));\n        user.signUp().then(loginedUser => {\n            log.info(loginedUser.getUsername() + ' is successfully signed up');\n        }, error => {\n            log.error(error);\n        });\n    } else {\n        log.error('Unknown Command.');\n    }\n}\n\nhexo.extend.console.register('lc-counter', 'hexo-leancloud-counter-security', commandOptions, commandFunc);\n"}},"length":2494,"excerpt":"<p>我的这个博客就是使用hexo+github搭建起来的，这篇文章记录了相关步骤和一些需要注意的地方。</p>\n<p>2018年2月18日更新：域名绑定和https 访问问题。</p>","more":"<h2 id=\"首先简单介绍下github-page和hexo：\"><a href=\"#首先简单介绍下github-page和hexo：\" class=\"headerlink\" title=\"首先简单介绍下github page和hexo：\"></a>首先简单介绍下github page和hexo：</h2><ul>\n<li>Github Page: 使用github repo的静态网页工具，可以无缝地与github一起使用，每个github帐号都有400M的免费空间来存放博客文件，具体的使用说明可以参看<a href=\"https://pages.github.com/\">github page网站</a></li>\n<li>hexo:一个node.js的框架，使用npm进行安装和配置，能够快速的搭建静态博客。主要特点是搭建快速、支持markdown编辑、一键部署、本地预览。</li>\n<li>使用github page+hexo主要是考虑到能够快速搭建、维护方便、技术栈匹配。</li>\n</ul>\n<p>下面来说具体的搭建步骤，这里使用<strong>MAC的开发环境</strong>：</p>\n<ul>\n<li><p>配置github repo：</p>\n<ul>\n<li>新建一个username.github.io的仓库，注意一定要使用自己的<strong>github用户名</strong></li>\n<li>设置ssh key：参见<a href=\"https://help.github.com/articles/generating-an-ssh-key/\">github ssh教程</a></li>\n<li>这里需要说明的是：github page默认使用的是<strong>master分支</strong>，在master分支中的<strong>index.html</strong>文件会被解析并且作为网页的入口。</li>\n</ul>\n</li>\n<li><p>安装Hexo命令行工具hexo-cli</p>\n<ul>\n<li>参考<a href=\"https://hexo.io/docs/index.html\">官方教程</a></li>\n<li>安装git、Node.js等工具</li>\n<li>安装hexo-cli命令行工具：npm install -g hexo-cli<ul>\n<li>hexo-cli是hexo的命令行工具，用于执行hexo init</li>\n</ul>\n</li>\n<li>Setup Hexo:<ul>\n<li>命令行为：hexo init <folder></li>\n<li>使用hexo的模板生成项目，下面几个文件比较重要：<ul>\n<li>package.json: Node js用于指定依赖包的配置文件，在不清楚的情况下，不要随意修改。</li>\n<li>_config.yml: hexo的配置文件，可以设置网站title、主题、字体、制定域名等。</li>\n<li>source: Blog的源文件目录，使用hexo new生成的md文件存放在这个目录中。</li>\n<li>scaffolds：模板文件，hexo new使用它来生成新的模板md。</li>\n<li>themes：主题目录，设置网站版式。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>写Blog：</p>\n<ul>\n<li>hexo new post_title：生成新的模板文件。</li>\n<li>注意：这里使用hexo命令和上面的hexo init不是同一个命令，这个hexo是在setup过程中下载的npm包，<strong>需要在Blog这个目录中使用才有效。</strong></li>\n<li>生成的文件在source&#x2F;_post目录中，使用markdown编辑器来写博客。</li>\n</ul>\n</li>\n<li><p>本机调试：</p>\n<ul>\n<li>在写blog的过程中，可以直接在本机进行预览：hexo serve</li>\n<li>默认使用4000端口，还可以<a href=\"https://hexo.io/docs/server.html#Custom-IP\">设置其他的端口</a></li>\n</ul>\n</li>\n<li><p>生成Blog文件：</p>\n<ul>\n<li>生成编译后的blog：hexo generate</li>\n<li>生成后的文件存放在public目录中</li>\n<li>也可以使用下面的命令直接完成发布: hexo generate —deploy</li>\n</ul>\n</li>\n<li><p>发布blog：</p>\n<ul>\n<li>使用hexo deploy完成发布</li>\n<li>第一次发布之前，需要修改_config.yml文件，参见：<a href=\"https://hexo.io/docs/deployment.html#Git\">hexo deploy</a></li>\n</ul>\n</li>\n<li><p>最后要说下Troubleshooting和需要注意的地方:</p>\n<ul>\n<li>hexo new不起作用<ul>\n<li>我们需要另外开一个branch来进行blog的写作（如source分支），然后使用hexo deploy到master分支上面。在不同的分支进行切换的时候，由于.gitignore文件不一样，导致我们可能在master分支上面删除了一些source分支上面重要的文件，如node_modules目录，则需要我们在切换到source分支的时候，重新下载npm包：npm i</li>\n</ul>\n</li>\n<li>hexo deploy失败<ul>\n<li>需要安装hexo-deployer-git包，参考 <a href=\"https://hexo.io/docs/deployment.html#Git\">hexo deploy</a></li>\n</ul>\n</li>\n<li>master分支的使用方法<ul>\n<li>master分支上面<strong>不要放文件</strong>，这个分支在使用hexo deploy之后自动更新，所以会覆盖我们自己的文件。</li>\n</ul>\n</li>\n<li>使用source分支来进行写作<ul>\n<li>上面提高了不能使用master分支，那么就需要我们使用别的分支来进行hexo的搭建和写作，我个人使用source分支，当然你也可以取一个自己喜欢的名字。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"—-2018年2月18日更新：\"><a href=\"#—-2018年2月18日更新：\" class=\"headerlink\" title=\"— 2018年2月18日更新：\"></a>— 2018年2月18日更新：</h2></li>\n<li><h3 id=\"绑定域名：\"><a href=\"#绑定域名：\" class=\"headerlink\" title=\"绑定域名：\"></a><strong>绑定域名</strong>：</h3><p>绑定域名主要分为3个步骤：申请域名、Github Page 设置域名、域名解析</p>\n<ul>\n<li><p>申请域名</p>\n<ul>\n<li>国内：<a href=\"https://wanwang.aliyun.com/domain/com/\">万网</a>、<a href=\"http://www.xinnet.com/domain/domain.html\">新网</a></li>\n</ul>\n<p>国内域名申请有一些繁杂的手续和步骤，特别是域名备案。</p>\n<ul>\n<li>国外：<a href=\"https://www.godaddy.com/\">GoDaddy</a>、<a href=\"https://www.namecheap.com/\">namecheap</a>、<a href=\"https://www.name.com/\">name</a>、<a href=\"http://www.enom.com/\">enom</a></li>\n<li>国外的域名则相对操作简单很多，一般只需要提供联系方式即可，主要注意的是：Godaddy没有提供免费的域名信息保护功能，需要付费购买，否者别人可以通过 whois 查到域名持有者的信息。</li>\n</ul>\n</li>\n<li><p>设置 Github Page 的域名</p>\n<ul>\n<li>Github Page提供域名比对的功能，只需要在网站的根目录中添加 CNAME（全部大写）文件，填写自己申请的域名（一般是<a href=\"http://baike.baidu.com/link?url=nBRFxvXXBbhf6esboaTgsAPqBASt6IT7cXro_okFQ9Xe8MOEaCnFOuJ1jxg0BRirAdJPU4XRrKZkYZSKzry4EmR21yJdMGuqG2TzJigDYipm0ZAAZTQGKg04IqSgAQ6E\">顶级域名</a>）即可，不需要带 https:&#x2F;&#x2F;（如 baidu.com，而不是 <a href=\"http://www.baidu.com),github/\">http://www.baidu.com），github</a> page 会自动把 www的请求重定向到顶级域名下。</li>\n<li>使用 hexo 搭建起来的博客，则是在 source 目录中，来添加 CNAME 文件，然后部署到 github 上面（命令行为 hexo d -g）。</li>\n</ul>\n</li>\n<li><p>域名解析</p>\n<ul>\n<li>申请好的域名，一般由提供商来进行解析（把域名映射为 IP 地址），我们这里不适用 Godaddy 提供的域名解析（NameServer） 服务，而是使用 NDSPod 作为我们的域名解析商。</li>\n<li>申请 NDSPod 账户</li>\n<li>在 NDSPod 添加域名、添加 A&#x2F;CNAME 记录<ul>\n<li>A 记录</li>\n<li>CNAME 记录</li>\n</ul>\n</li>\n<li>在 Godaddy 绑定 DNSPod的域名解析地址</li>\n<li>wait a moment</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"HTTPS问题：\"><a href=\"#HTTPS问题：\" class=\"headerlink\" title=\"HTTPS问题：\"></a><strong>HTTPS问题：</strong></h3><ul>\n<li>github page 的 ssl证书绑定的是 github.io 的域名。如果在 chrome 中使用 https 访问自定义的域名，会提示<strong>NET::ERR_CERT_COMMON_NAME_INVALID</strong>。</li>\n<li>CloudFlare 来做域名解析，开启 ssl 为 Flexble 之后，可以让chrome和 CloudFlare 之间使用 https访问，而CloudFlare 与 github page 中继续使用 http 来访问。</li>\n<li>参考文章：<a href=\"https://blog.chionlab.moe/2016/01/28/github-pages-with-https/\">在GitHub Pages上使用CloudFlare https CDN</a></li>\n</ul>\n</li>\n</ul>"}],"PostAsset":[{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题/PR 代码.png","slug":"PR 代码.png","post":"cl6hf968g0001x6u0fp5jes0b","modified":0,"renderable":0},{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题/pod check失败.png","slug":"pod check失败.png","post":"cl6hf968g0001x6u0fp5jes0b","modified":0,"renderable":0},{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题/podfile.lock冲突.png","slug":"podfile.lock冲突.png","post":"cl6hf968g0001x6u0fp5jes0b","modified":0,"renderable":0},{"_id":"source/_posts/Cocoapods采坑记-Podfile-lock-冲突问题/xcode编译脚本.png","slug":"xcode编译脚本.png","post":"cl6hf968g0001x6u0fp5jes0b","modified":0,"renderable":0},{"_id":"source/_posts/Swift-与-OC-混编小技巧/1-1.jpg","slug":"1-1.jpg","post":"cl6hf968h0003x6u065wk623v","modified":0,"renderable":0},{"_id":"source/_posts/Swift-与-OC-混编小技巧/1-2.jpg","slug":"1-2.jpg","post":"cl6hf968h0003x6u065wk623v","modified":0,"renderable":0},{"_id":"source/_posts/Swift-与-OC-混编小技巧/1-3.jpg","slug":"1-3.jpg","post":"cl6hf968h0003x6u065wk623v","modified":0,"renderable":0},{"_id":"source/_posts/Swift-与-OC-混编小技巧/1-4.jpg","slug":"1-4.jpg","post":"cl6hf968h0003x6u065wk623v","modified":0,"renderable":0},{"_id":"source/_posts/Swift-与-OC-混编小技巧/2-1.jpg","slug":"2-1.jpg","post":"cl6hf968h0003x6u065wk623v","modified":0,"renderable":0},{"_id":"source/_posts/Swift-与-OC-混编小技巧/2-2.jpg","slug":"2-2.jpg","post":"cl6hf968h0003x6u065wk623v","modified":0,"renderable":0},{"_id":"source/_posts/Swift-与-OC-混编小技巧/2-3.jpg","slug":"2-3.jpg","post":"cl6hf968h0003x6u065wk623v","modified":0,"renderable":0},{"_id":"source/_posts/Swift-与-OC-混编小技巧/2-4.jpg","slug":"2-4.jpg","post":"cl6hf968h0003x6u065wk623v","modified":0,"renderable":0},{"_id":"source/_posts/Swift-与-OC-混编小技巧/3-1.jpg","slug":"3-1.jpg","post":"cl6hf968h0003x6u065wk623v","modified":0,"renderable":0},{"_id":"source/_posts/Swift-与-OC-混编小技巧/3-2.jpg","slug":"3-2.jpg","post":"cl6hf968h0003x6u065wk623v","modified":0,"renderable":0},{"_id":"source/_posts/iOS-ReactNative私有库指南/Folly-error.png","slug":"Folly-error.png","post":"cl6hf968l000dx6u01ksr730j","modified":0,"renderable":0},{"_id":"source/_posts/iOS-ReactNative私有库指南/schedule-error.png","slug":"schedule-error.png","post":"cl6hf968l000dx6u01ksr730j","modified":0,"renderable":0},{"_id":"source/_posts/iOS-ReactNative私有库指南/sourcetree.png","slug":"sourcetree.png","post":"cl6hf968l000dx6u01ksr730j","modified":0,"renderable":0},{"_id":"source/_posts/《人生战术本》- 里弗斯教练帮助他人“成为更好的人”/the-playbook.png","slug":"the-playbook.png","post":"cl6hf968n000zx6u0507hcz0z","modified":0,"renderable":0},{"_id":"source/_posts/关于HTTP-2-的那些事/HTTP2-overview.png","slug":"HTTP2-overview.png","post":"cl6hf968n0011x6u0dyun28m0","modified":0,"renderable":0},{"_id":"source/_posts/关于HTTP-3-的那些事/HTTP2-RTT.png","slug":"HTTP2-RTT.png","post":"cl6hf968o0013x6u07hr1gsyu","modified":0,"renderable":0},{"_id":"source/_posts/关于HTTP-3-的那些事/HTTP3-RTT.png","slug":"HTTP3-RTT.png","post":"cl6hf968o0013x6u07hr1gsyu","modified":0,"renderable":0},{"_id":"source/_posts/关于HTTP-3-的那些事/HTTP3-layout.png","slug":"HTTP3-layout.png","post":"cl6hf968o0013x6u07hr1gsyu","modified":0,"renderable":0},{"_id":"source/_posts/关于HTTP-3-的那些事/HTTP3-overview.png","slug":"HTTP3-overview.png","post":"cl6hf968o0013x6u07hr1gsyu","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cl6hf968j0008x6u04vhgex2y","category_id":"cl6hf968i0004x6u05gcs78j7","_id":"cl6hf968l000ex6u0cgova9v4"},{"post_id":"cl6hf968g0001x6u0fp5jes0b","category_id":"cl6hf968i0004x6u05gcs78j7","_id":"cl6hf968l000hx6u09l7v0ckd"},{"post_id":"cl6hf968k0009x6u0eo9rh8rq","category_id":"cl6hf968i0004x6u05gcs78j7","_id":"cl6hf968l000jx6u0agv23c7n"},{"post_id":"cl6hf968h0003x6u065wk623v","category_id":"cl6hf968i0004x6u05gcs78j7","_id":"cl6hf968m000nx6u0d253e9bk"},{"post_id":"cl6hf968j0007x6u09dm6dnhp","category_id":"cl6hf968i0004x6u05gcs78j7","_id":"cl6hf968m000px6u0gz6tc8l6"},{"post_id":"cl6hf968l000dx6u01ksr730j","category_id":"cl6hf968i0004x6u05gcs78j7","_id":"cl6hf968m000sx6u09he2bp9d"},{"post_id":"cl6hf968l000dx6u01ksr730j","category_id":"cl6hf968l000kx6u04wd33g1z","_id":"cl6hf968m000ux6u0hpk0gslb"},{"post_id":"cl6hf968n000yx6u0a0bnd44a","category_id":"cl6hf968i0004x6u05gcs78j7","_id":"cl6hf968o0014x6u0hmswbb2n"},{"post_id":"cl6hf968n0011x6u0dyun28m0","category_id":"cl6hf968i0004x6u05gcs78j7","_id":"cl6hf968o0019x6u0ec344n5l"},{"post_id":"cl6hf968o0013x6u07hr1gsyu","category_id":"cl6hf968i0004x6u05gcs78j7","_id":"cl6hf968p001bx6u08b15alqv"},{"post_id":"cl6hf968o0015x6u09ahe0s7t","category_id":"cl6hf968i0004x6u05gcs78j7","_id":"cl6hf968p001ex6u0fgitc2yx"},{"post_id":"cl6hf968n000zx6u0507hcz0z","category_id":"cl6hf968n0012x6u0adype4nx","_id":"cl6hf968p001gx6u05frqbaw3"}],"PostTag":[{"post_id":"cl6hf968j0008x6u04vhgex2y","tag_id":"cl6hf968i0005x6u030yb6r7e","_id":"cl6hf968l000cx6u01c9449qb"},{"post_id":"cl6hf968g0001x6u0fp5jes0b","tag_id":"cl6hf968i0005x6u030yb6r7e","_id":"cl6hf968l000ix6u07ztxbua4"},{"post_id":"cl6hf968g0001x6u0fp5jes0b","tag_id":"cl6hf968k000bx6u04mrrh15v","_id":"cl6hf968l000lx6u0dkjde9zq"},{"post_id":"cl6hf968h0003x6u065wk623v","tag_id":"cl6hf968i0005x6u030yb6r7e","_id":"cl6hf968m000ox6u0atmxhqvh"},{"post_id":"cl6hf968j0007x6u09dm6dnhp","tag_id":"cl6hf968i0005x6u030yb6r7e","_id":"cl6hf968m000rx6u03wk59evw"},{"post_id":"cl6hf968k0009x6u0eo9rh8rq","tag_id":"cl6hf968m000qx6u0hb1hbdcu","_id":"cl6hf968m000vx6u06go8a1le"},{"post_id":"cl6hf968l000dx6u01ksr730j","tag_id":"cl6hf968i0005x6u030yb6r7e","_id":"cl6hf968m000wx6u0bl4ia0oo"},{"post_id":"cl6hf968l000dx6u01ksr730j","tag_id":"cl6hf968m000tx6u0bxi60ndt","_id":"cl6hf968m000xx6u00j2efrvb"},{"post_id":"cl6hf968n000yx6u0a0bnd44a","tag_id":"cl6hf968i0005x6u030yb6r7e","_id":"cl6hf968o0017x6u0480x81rv"},{"post_id":"cl6hf968n000yx6u0a0bnd44a","tag_id":"cl6hf968n0010x6u0ag2n4u98","_id":"cl6hf968p001ax6u0agfu7628"},{"post_id":"cl6hf968o0015x6u09ahe0s7t","tag_id":"cl6hf968i0005x6u030yb6r7e","_id":"cl6hf968p001dx6u054wyfxkq"},{"post_id":"cl6hf968n000zx6u0507hcz0z","tag_id":"cl6hf968o0016x6u0e2ep1b0x","_id":"cl6hf968p001fx6u0aheidf80"},{"post_id":"cl6hf968n0011x6u0dyun28m0","tag_id":"cl6hf968p001cx6u0g6gleyab","_id":"cl6hf968p001ix6u02z7e5non"},{"post_id":"cl6hf968o0013x6u07hr1gsyu","tag_id":"cl6hf968p001cx6u0g6gleyab","_id":"cl6hf968p001kx6u0eo5732j9"},{"post_id":"cl6hf968o0018x6u0f0r77u1t","tag_id":"cl6hf968p001jx6u067wrc8pp","_id":"cl6hf968p001lx6u0azni5xnr"}],"Tag":[{"name":"iOS","_id":"cl6hf968i0005x6u030yb6r7e"},{"name":"cocoapods","_id":"cl6hf968k000bx6u04mrrh15v"},{"name":"git","_id":"cl6hf968m000qx6u0hb1hbdcu"},{"name":"ReactNative","_id":"cl6hf968m000tx6u0bxi60ndt"},{"name":"多线程","_id":"cl6hf968n0010x6u0ag2n4u98"},{"name":"分享","_id":"cl6hf968o0016x6u0e2ep1b0x"},{"name":"网络编程","_id":"cl6hf968p001cx6u0g6gleyab"},{"name":"hexo","_id":"cl6hf968p001jx6u067wrc8pp"}]}}